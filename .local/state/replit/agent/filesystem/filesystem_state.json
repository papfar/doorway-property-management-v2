{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nDoorway is a Danish property management B2B SaaS application built with a full-stack TypeScript architecture. The application focuses on simplicity with a minimal feature set for managing real estate properties. It provides a clean, modern interface for property administrators to track and manage their property portfolios with support for different property types including individual apartments (ejerlejlighed) and complete real estate (samlet fast ejendom).\n\n## Recent Changes (January 2025)\n\n- **Multi-Tenant Architecture Implemented**: Each business now has completely separate accounts and data isolation\n- **Organization-Based Data Model**: Added organizations table with proper foreign key relationships and cascade delete\n- **Enhanced Setup Flow**: Setup wizard now creates both organization and admin user, with improved Danish UI text\n- **Live Danish Number Formatting**: Comprehensive real-time formatting system for all monetary input fields using Danish thousand separators (1.000.000 kr) and comma decimal separator (21.551,16)\n- **Improved Authentication Flow**: Fixed redirect issues after account creation, users now properly navigate to dashboard\n- **Complete Company Relations System**: Implemented parent/subsidiary company relationships with ownership percentages and full CRUD operations\n- **Visual Corporate Structure Chart**: Created tree-diagram style visualization showing company hierarchy with SVG-based stamtræ layout, circular company nodes, connecting lines, and ownership percentages displayed on connections\n- **Interactive Ownership Management**: Added clickable ownership percentage boxes in corporate structure diagram allowing real-time editing and deletion of ownership relationships with immediate visual updates\n- **Role-Based Access Control**: Implemented comprehensive permission system where regular users have read-only access to properties and companies, while administrators can create, edit, and delete all data\n- **Weighted Portfolio Calculations**: Implemented dashboard toggle between \"total portefølje\" and \"vægtet andel\" with persistent user preferences. Calculates weighted property counts and acquisition values based on corporate ownership hierarchy from user's assigned company as root. Default view mode is weighted for regular users and total for administrators\n- **Enhanced Company Structure Visualization**: Polished corporate structure chart with optimized property placement (centered under single-property companies, horizontally distributed for multiple properties), 60% transparent connection lines for better readability, clickable property boxes with smooth navigation using Wouter routing, and improved spacing with 400px node width and dynamic height calculations\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built using React 18 with TypeScript, leveraging modern React patterns and libraries:\n- **UI Framework**: Radix UI components with Tailwind CSS for styling and shadcn/ui component library\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management and caching\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\nThe backend follows a REST API pattern built on Node.js:\n- **Framework**: Express.js with TypeScript for type safety\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Session-based authentication with express-session and bcrypt for password hashing\n- **Validation**: Shared Zod schemas between frontend and backend for consistent validation\n\n## Data Storage Architecture\n- **Database**: PostgreSQL using Neon serverless hosting\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Multi-Tenant Data Model**: \n  - Organizations table for business separation\n  - Users table with organizationId foreign key for tenant isolation\n  - Properties table linked to organizations (not users) for proper data segregation\n  - Proper foreign key relationships with cascade delete ensuring data integrity across tenants\n\n## Authentication & Authorization\n- **Session Management**: Memory-based session store for development with HTTP-only cookies\n- **Password Security**: Bcrypt with salt rounds for secure password hashing\n- **Route Protection**: Middleware-based authentication checking for protected API endpoints\n- **Initial Setup**: First-time setup wizard for creating the initial administrator account\n- **Role-Based Interface**: Dynamic UI elements that show/hide create, edit, and delete buttons based on user role (admin vs regular user)\n\n## Application Structure\nThe application uses a monorepo structure with clear separation of concerns:\n- **Client Directory**: React frontend application with organized component structure\n- **Server Directory**: Express backend with modular route handlers and business logic\n- **Shared Directory**: Common TypeScript types and Zod schemas used by both frontend and backend\n\n## Key Design Patterns\n- **Form Handling**: Consistent pattern using React Hook Form with Zod resolvers for validation\n- **Error Handling**: Centralized error handling with toast notifications for user feedback\n- **Data Fetching**: TanStack Query for caching, background updates, and optimistic updates\n- **Component Architecture**: Reusable UI components with proper TypeScript interfaces\n- **Empty States**: Thoughtful empty state handling to guide users through first-time setup\n- **Multi-Tenant Data Isolation**: All API endpoints and database queries filtered by organizationId\n- **Danish Number Formatting Pattern**: Standardized implementation for all monetary fields with live formatting during input and proper parsing when loading from database\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting for scalable database management\n- **Drizzle ORM**: Type-safe database toolkit with PostgreSQL dialect\n\n## UI and Styling\n- **Radix UI**: Headless component library for accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **shadcn/ui**: Pre-built component library built on Radix UI and Tailwind\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **Vite**: Build tool with hot module replacement and optimized bundling\n- **TypeScript**: Static type checking across the entire application\n- **React Hook Form**: Form library with validation integration\n- **Zod**: Schema validation library for runtime type checking\n\n## Geographic Data\n- **Danish Postal Codes**: Local JSON reference file for postal code to city mapping, enabling automatic city population based on postal code input\n\n## Danish Number Formatting Implementation Pattern\nFor consistent monetary field handling across the application:\n\n### Helper Functions\n```typescript\n// Format numbers with Danish thousand separators (.) and decimal comma (,)\nconst formatDanishNumber = (value: string | number): string => {\n  if (typeof value === 'number') {\n    return new Intl.NumberFormat('da-DK', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(value);\n  }\n  // Handle string input with live formatting logic\n  // Remove existing formatting, validate input, apply thousand separators\n}\n\n// Parse Danish formatted strings back to numbers\nconst parseDanishNumber = (value: string): number => {\n  const cleanValue = value.replace(/\\./g, '').replace(',', '.');\n  return parseFloat(cleanValue) || 0;\n}\n```\n\n### Input Field Pattern\n```typescript\n// For all monetary input fields\n<Input \n  type=\"text\"\n  value={field.value !== undefined ? (typeof field.value === 'number' ? formatDanishNumber(field.value) : field.value) : \"\"}\n  onChange={(e) => {\n    const inputValue = e.target.value;\n    if (inputValue === \"\" || /^[\\d.,]*$/.test(inputValue)) {\n      const formatted = formatDanishNumber(inputValue);\n      field.onChange(formatted);\n    }\n  }}\n/>\n```\n\n### Form Initialization Pattern\n```typescript\n// Default values: use null for empty fields, not empty strings\ndefaultValues: {\n  monetaryField: existingData?.monetaryField ? parseFloat(existingData.monetaryField.toString()) : null,\n}\n\n// Loading existing data: parse strings from database to numbers\nuseEffect(() => {\n  if (isEditing && existingData?.monetaryField) {\n    const value = parseFloat(existingData.monetaryField.toString());\n    form.setValue(\"monetaryField\", value);\n  }\n}, [isEditing, existingData, form]);\n```\n\n### Data Submission Pattern\n```typescript\n// Convert formatted strings back to numbers before API submission\nconst cleanData = {\n  ...formData,\n  monetaryField: typeof formData.monetaryField === 'string' \n    ? parseDanishNumber(formData.monetaryField) \n    : formData.monetaryField\n};\n```\n\nThis pattern ensures consistent Danish number formatting (1.000.000,50) across all monetary fields while maintaining proper data types for database storage and calculations.\n\n## Authentication Libraries\n- **bcrypt**: Password hashing library for secure credential storage\n- **express-session**: Session management middleware for Express\n- **memorystore**: Memory-based session store for development environments","size_bytes":9368},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\nexport async function authenticateUser(email: string, password: string): Promise<User | null> {\n  const user = await storage.getUserByEmail(email);\n  if (!user) {\n    return null;\n  }\n\n  const isValid = await verifyPassword(password, user.password);\n  if (!isValid) {\n    return null;\n  }\n\n  return user;\n}\n\nexport function requireAuth(req: any, res: any, next: any) {\n  console.log(`RequireAuth middleware for ${req.method} ${req.path}:`, {\n    sessionId: req.sessionID,\n    hasSession: !!req.session,\n    userId: req.session?.userId\n  });\n  \n  if (!req.session?.userId) {\n    console.log(`Auth failed for ${req.method} ${req.path} - no userId in session`);\n    return res.status(401).json({ message: \"Ikke autoriseret\" });\n  }\n  \n  console.log(`Auth passed for ${req.method} ${req.path}`);\n  next();\n}\n\nexport async function getCurrentUser(req: any): Promise<User | null> {\n  console.log(\"getCurrentUser called with session:\", {\n    sessionId: req.sessionID,\n    hasSession: !!req.session,\n    userId: req.session?.userId\n  });\n  \n  if (!req.session?.userId) {\n    console.log(\"No userId in session\");\n    return null;\n  }\n  \n  const user = await storage.getUser(req.session.userId);\n  console.log(\"Found user:\", user ? { id: user.id, email: user.email, role: user.role } : 'not found');\n  return user || null;\n}\n\n// Helper functions for role-based permissions\nexport function canWrite(user: User): boolean {\n  return user.role === \"admin\" || user.role === \"user\";\n}\n\nexport function isBroker(user: User): boolean {\n  return user.role === \"broker\";\n}\n\nexport function requireWriteAccess(req: any, res: any, next: any) {\n  requireAuth(req, res, async () => {\n    const user = await getCurrentUser(req);\n    if (!user || !canWrite(user)) {\n      return res.status(403).json({ message: \"Kun læseadgang (Mægler)\" });\n    }\n    next();\n  });\n}\n\n// Anonymize tenant data for broker users\nexport function anonymizeTenantData(tenant: any, user: User) {\n  if (!isBroker(user)) {\n    return tenant; // Return original data for non-broker users\n  }\n\n  return {\n    ...tenant,\n    name: \"Anonymiseret\",\n    cvrNumber: tenant.cvrNumber ? \"********\" : null,\n    contactPerson: tenant.contactPerson ? \"Anonymiseret\" : null,\n    phone: \"*******\",\n    email: tenant.email ? `${tenant.email[0]}*****@*****` : null,\n    invoiceEmail: tenant.invoiceEmail ? `${tenant.invoiceEmail[0]}*****@*****` : null,\n    notes: tenant.notes ? \"(Anonymiseret)\" : null,\n  };\n}\n","size_bytes":2821},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { hashPassword, authenticateUser, requireAuth, getCurrentUser, requireWriteAccess, anonymizeTenantData, isBroker } from \"./auth\";\nimport { insertUserSchema, insertPropertySchema, insertCompanySchema, insertCompanyRelationSchema, insertLeaseSchema, insertLeaseTenantSchema, insertTenantSchema, loginSchema, setupSchema, changePasswordSchema, userInviteSchema, type User, type Property, type Lease, type Tenant, type Company, type CompanyRelation, type UserInvitation, type LeaseTenant } from \"@shared/schema\";\nimport { verifyPassword } from \"./auth\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst MemoryStoreSession = MemoryStore(session);\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware\n  app.use(session({\n    store: new MemoryStoreSession({\n      checkPeriod: 86400000 // 24 hours\n    }),\n    secret: process.env.SESSION_SECRET || 'dev-secret-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Load Danish postal codes\n  const postalCodesPath = path.join(import.meta.dirname, 'data', 'danish-postal-codes.json');\n  const postalCodesData = JSON.parse(fs.readFileSync(postalCodesPath, 'utf-8'));\n\n  // Postal code lookup\n  app.get('/api/postal-codes/:code', (req, res) => {\n    const { code } = req.params;\n    const city = postalCodesData[code];\n    \n    if (city) {\n      res.json({ city });\n    } else {\n      res.json({ city: null });\n    }\n  });\n\n  // Check if setup is needed - always allow new organizations\n  app.get('/api/setup/needed', async (req, res) => {\n    try {\n      res.json({ needed: true }); // Always allow new organizations\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Initial setup - create new organization and admin user\n  app.post('/api/setup', async (req, res) => {\n    try {\n      const parsed = setupSchema.parse(req.body);\n      const hashedPassword = await hashPassword(parsed.password);\n      \n      // Create organization first\n      const organization = await storage.createOrganization({\n        name: parsed.organizationName,\n      });\n      \n      // Then create the admin user\n      const user = await storage.createUser({\n        name: parsed.name,\n        email: parsed.email,\n        password: hashedPassword,\n        organizationId: organization.id,\n      });\n\n      (req.session as any).userId = user.id;\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Authentication routes\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const parsed = loginSchema.parse(req.body);\n      const user = await authenticateUser(parsed.email, parsed.password);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Ugyldig e-mail eller adgangskode\" });\n      }\n\n      (req.session as any).userId = user.id;\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Kunne ikke logge ud\" });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  app.get('/api/auth/me', async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n      \n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // User preferences\n  app.put(\"/api/user/preferences\", requireAuth, async (req, res) => {\n    try {\n      const { dashboardViewMode } = req.body;\n      \n      if (!dashboardViewMode || ![\"total\", \"weighted\"].includes(dashboardViewMode)) {\n        return res.status(400).json({ message: \"Ugyldig visningsform\" });\n      }\n\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const updatedUser = await storage.updateUserPreferences(user.id, { dashboardViewMode });\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"Bruger ikke fundet\" });\n      }\n\n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error updating user preferences:\", error);\n      res.status(500).json({ message: \"Server fejl\" });\n    }\n  });\n\n  // User routes\n  app.put('/api/user/profile', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const { name, email } = req.body;\n      const updatedUser = await storage.updateUser(user.id, {});\n      \n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/user/change-password', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const parsed = changePasswordSchema.parse(req.body);\n      \n      const isCurrentPasswordValid = await verifyPassword(parsed.currentPassword, user.password);\n      if (!isCurrentPasswordValid) {\n        return res.status(400).json({ message: \"Nuværende adgangskode er forkert\" });\n      }\n\n      const hashedNewPassword = await hashPassword(parsed.newPassword);\n      await storage.updateUser(user.id, {});\n      \n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Property routes\n  app.get('/api/properties', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      // Brokers can see all properties, admins can see all properties, regular users only see properties they have ownership in\n      const userId = (user.role === 'admin' || user.role === 'broker') ? undefined : user.id;\n      const properties = await storage.getProperties(user.organizationId, userId);\n      res.json(properties);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/properties/:id', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const property = await storage.getProperty(req.params.id, user.organizationId);\n      if (!property) {\n        return res.status(404).json({ message: \"Ejendom ikke fundet\" });\n      }\n\n      res.json(property);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/properties', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const parsed = insertPropertySchema.parse(req.body);\n      const property = await storage.createProperty({ ...parsed, organizationId: user.organizationId });\n      \n      res.json(property);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/properties/:id', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const parsed = insertPropertySchema.parse(req.body);\n      const property = await storage.updateProperty(req.params.id, user.organizationId, parsed);\n      \n      res.json(property);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/properties/:id', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      await storage.deleteProperty(req.params.id, user.organizationId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get leases for a specific property\n  app.get('/api/properties/:id/leases', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const leases = await storage.getLeasesByProperty(req.params.id, user.organizationId);\n      res.json(leases);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const isWeighted = user.dashboardViewMode === \"weighted\";\n      \n      let stats;\n      if (isWeighted) {\n        stats = await storage.calculateWeightedStats(user.organizationId, user.id);\n      } else {\n        stats = await storage.getPropertyStats(user.organizationId);\n      }\n      \n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Recent activities\n  app.get('/api/dashboard/recent', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const isWeighted = user.dashboardViewMode === \"weighted\";\n      let recentProperties;\n      \n      if (isWeighted && user.role === \"user\") {\n        // For regular users in weighted mode, only show properties they have ownership in\n        recentProperties = await storage.getRecentPropertiesWeighted(user.organizationId, user.id, 5);\n      } else {\n        // For admins, brokers, or total mode, show all properties\n        recentProperties = await storage.getRecentProperties(user.organizationId, 5);\n      }\n      \n      res.json(recentProperties);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Company endpoints\n  app.get('/api/companies', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const companies = await storage.getCompanies(user.organizationId);\n      res.json(companies);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/companies/:id', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const company = await storage.getCompany(req.params.id, user.organizationId);\n      if (!company) {\n        return res.status(404).json({ message: \"Selskab ikke fundet\" });\n      }\n\n      res.json(company);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/companies', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const parsed = insertCompanySchema.parse(req.body);\n      const company = await storage.createCompany({ ...parsed, organizationId: user.organizationId });\n      \n      console.log('Created company:', company);\n      res.json(company);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/companies/:id', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const parsed = insertCompanySchema.parse(req.body);\n      const company = await storage.updateCompany(req.params.id, user.organizationId, parsed);\n      \n      res.json(company);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/companies/:id', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      await storage.deleteCompany(req.params.id, user.organizationId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Company relations endpoints\n  app.get('/api/company-relations', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const relations = await storage.getCompanyRelations(user.organizationId);\n      res.json(relations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/companies/:id/relations', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const parentRelations = await storage.getParentRelations(req.params.id);\n      const childRelations = await storage.getChildRelations(req.params.id);\n      \n      res.json({ parentRelations, childRelations });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/company-relations', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      // Simple validation without complex schema\n      const { parentCompanyId, childCompanyId, ownershipPercentage } = req.body;\n      \n      console.log('Company relation data:', JSON.stringify({ parentCompanyId, childCompanyId, ownershipPercentage }, null, 2));\n      \n      if (!parentCompanyId || !childCompanyId || ownershipPercentage === undefined) {\n        return res.status(400).json({ \n          message: \"Manglende påkrævede felter\",\n          received: { parentCompanyId, childCompanyId, ownershipPercentage }\n        });\n      }\n\n      if (ownershipPercentage < 0.01 || ownershipPercentage > 100) {\n        return res.status(400).json({ message: \"Ejerskabsprocent skal være mellem 0.01 og 100\" });\n      }\n      \n      // Verify both companies belong to the user's organization\n      const parentCompany = await storage.getCompany(parentCompanyId, user.organizationId);\n      const childCompany = await storage.getCompany(childCompanyId, user.organizationId);\n      \n      if (!parentCompany || !childCompany) {\n        return res.status(404).json({ message: \"Selskab ikke fundet\" });\n      }\n\n      // Check if adding this ownership would exceed 100% for the child company\n      const existingParentRelations = await storage.getParentRelations(childCompanyId);\n      const currentTotalPercentage = existingParentRelations.reduce((sum, rel) => \n        sum + parseFloat(rel.ownershipPercentage), 0);\n      const newTotalPercentage = currentTotalPercentage + parseFloat(ownershipPercentage);\n      \n      console.log('Current total percentage for child:', currentTotalPercentage);\n      console.log('New total percentage would be:', newTotalPercentage);\n      \n      if (newTotalPercentage > 100) {\n        return res.status(400).json({ \n          message: `Den samlede ejerskabsprocent vil blive ${newTotalPercentage.toFixed(1)}%, hvilket overskrider 100%. Der er allerede ${currentTotalPercentage.toFixed(1)}% ejerskab registreret.`\n        });\n      }\n\n      const relationData = {\n        parentCompanyId,\n        childCompanyId,\n        ownershipPercentage: parseFloat(ownershipPercentage).toString()\n      };\n\n      const relation = await storage.createCompanyRelation(relationData);\n      res.json(relation);\n    } catch (error: any) {\n      console.error('Error creating company relation:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/company-relations/:id', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const { ownershipPercentage } = req.body;\n      \n      if (!ownershipPercentage || ownershipPercentage < 0.01 || ownershipPercentage > 100) {\n        return res.status(400).json({ message: \"Ejerskabsprocent skal være mellem 0.01 og 100\" });\n      }\n\n      const relation = await storage.updateCompanyRelation(req.params.id, { ownershipPercentage: ownershipPercentage.toString() });\n      res.json(relation);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/company-relations/:id', requireWriteAccess, async (req, res) => {\n    try {\n      await storage.deleteCompanyRelation(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // User management endpoints\n  app.get('/api/users', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      if (!user || (user.role !== 'admin' && user.role !== 'broker')) {\n        return res.status(403).json({ message: \"Kun administratorer og mæglere kan se brugere\" });\n      }\n\n      const users = await storage.getUsersInOrganization(user.organizationId);\n      const usersWithCompany = await Promise.all(\n        users.map(async (u) => {\n          let assignedCompany = null;\n          if (u.assignedCompanyId) {\n            assignedCompany = await storage.getCompany(u.assignedCompanyId, user.organizationId);\n          }\n          return { ...u, assignedCompany };\n        })\n      );\n\n      res.json(usersWithCompany);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/users/invite', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      // Write access middleware already checked this\n\n      const { email, role, assignedCompanyId } = req.body;\n\n      // Check if email already exists as a user\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"En bruger med denne e-mail eksisterer allerede\" });\n      }\n\n      // Check if there's already a pending invitation for this email\n      const existingInvitation = await storage.getUserInvitationByEmail(email);\n      if (existingInvitation) {\n        return res.status(400).json({ message: \"Der er allerede sendt en invitation til denne e-mail\" });\n      }\n\n      // Generate unique token and expiration date\n      const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now\n\n      const invitation = await storage.createUserInvitation({\n        email,\n        role,\n        assignedCompanyId,\n        organizationId: user.organizationId,\n        invitedBy: user.id,\n        token,\n        expiresAt,\n      });\n\n      // In a real app, you would send an email here with the invitation link\n      console.log(`Invitation created for ${email} with token: ${token}`);\n      \n      res.json({ \n        invitation,\n        invitationLink: `${req.protocol}://${req.headers.host}/invitation?token=${token}`\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/users/invitations', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      if (!user || (user.role !== 'admin' && user.role !== 'broker')) {\n        return res.status(403).json({ message: \"Kun administratorer og mæglere kan se invitationer\" });\n      }\n\n      const invitations = await storage.getUserInvitations(user.organizationId);\n      res.json(invitations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/users/invitations/:id', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: \"Kun administratorer kan slette invitationer\" });\n      }\n\n      await storage.deleteUserInvitation(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Verify invitation token\n  app.get('/api/users/invitation/verify/:token', async (req, res) => {\n    try {\n      const { token } = req.params;\n      const invitation = await storage.getUserInvitation(token);\n      \n      if (!invitation || invitation.expiresAt < new Date()) {\n        return res.status(404).json({ message: \"Invitation ikke fundet eller udløbet\" });\n      }\n\n      res.json(invitation);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Accept invitation and create user account\n  app.post('/api/users/invitation/accept', async (req, res) => {\n    try {\n      const { token, name, password } = req.body;\n      \n      if (!token || !name || !password) {\n        return res.status(400).json({ message: \"Token, navn og adgangskode er påkrævet\" });\n      }\n\n      const invitation = await storage.getUserInvitation(token);\n      \n      if (!invitation || invitation.expiresAt < new Date()) {\n        return res.status(404).json({ message: \"Invitation ikke fundet eller udløbet\" });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(invitation.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"En bruger med denne email eksisterer allerede\" });\n      }\n\n      // Create new user\n      const hashedPassword = await bcrypt.hash(password, 10);\n      const newUser = await storage.createUser({\n        name,\n        email: invitation.email,\n        password: hashedPassword,\n        role: invitation.role,\n        organizationId: invitation.organizationId,\n        assignedCompanyId: invitation.assignedCompanyId,\n      });\n\n      // Delete the invitation after successful account creation\n      await storage.deleteUserInvitation(invitation.id);\n\n      res.json({ \n        message: \"Konto oprettet succesfuldt\",\n        user: {\n          id: newUser.id,\n          name: newUser.name,\n          email: newUser.email,\n          role: newUser.role,\n        }\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/users/:id', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: \"Kun administratorer kan redigere brugere\" });\n      }\n\n      const { role, assignedCompanyId } = req.body;\n      const targetUserId = req.params.id;\n\n      // Prevent admin from changing their own role to user if they're the only admin\n      if (targetUserId === user.id && role === 'user') {\n        const allUsers = await storage.getUsersInOrganization(user.organizationId);\n        const adminCount = allUsers.filter(u => u.role === 'admin').length;\n        if (adminCount === 1) {\n          return res.status(400).json({ message: \"Du kan ikke ændre din egen rolle når du er den eneste administrator\" });\n        }\n      }\n\n      const updatedUser = await storage.updateUser(targetUserId, {\n        role,\n        assignedCompanyId: assignedCompanyId || null\n      });\n\n      res.json(updatedUser);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/users/:id', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: \"Kun administratorer kan slette brugere\" });\n      }\n\n      const targetUserId = req.params.id;\n\n      // Prevent admin from deleting themselves if they're the only admin\n      if (targetUserId === user.id) {\n        const allUsers = await storage.getUsersInOrganization(user.organizationId);\n        const adminCount = allUsers.filter(u => u.role === 'admin').length;\n        if (adminCount === 1) {\n          return res.status(400).json({ message: \"Du kan ikke slette dig selv når du er den eneste administrator\" });\n        }\n      }\n\n      await storage.deleteUser(targetUserId, user.organizationId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Company relations endpoints\n  app.get('/api/companies/:id/parents', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const relations = await storage.getParentRelations(req.params.id);\n      res.json(relations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/companies/:id/children', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const relations = await storage.getChildRelations(req.params.id);\n      res.json(relations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Lease endpoints\n  app.get('/api/leases', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      // Brokers and admins can see all leases, regular users only see leases for properties they have ownership in\n      const userId = (user.role === 'admin' || user.role === 'broker') ? undefined : user.id;\n      const leases = await storage.getLeases(user.organizationId, userId);\n      res.json(leases);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/leases/:id', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const lease = await storage.getLease(req.params.id, user.organizationId);\n      if (!lease) {\n        return res.status(404).json({ message: \"Lejemål ikke fundet\" });\n      }\n      \n      res.json(lease);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/leases', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const parsed = insertLeaseSchema.parse(req.body);\n      const lease = await storage.createLease({ \n        ...parsed, \n        organizationId: user.organizationId \n      });\n      \n      res.json(lease);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch('/api/leases/:id', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const parsed = insertLeaseSchema.partial().parse(req.body);\n      const lease = await storage.updateLease(req.params.id, user.organizationId, parsed);\n      \n      res.json(lease);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/leases/:id', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      await storage.deleteLease(req.params.id, user.organizationId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Lease tenant endpoints\n  app.get('/api/leases/:leaseId/tenants', requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      // Verify lease belongs to user's organization\n      const lease = await storage.getLease(req.params.leaseId, user.organizationId);\n      if (!lease) {\n        return res.status(404).json({ message: \"Lejemål ikke fundet\" });\n      }\n\n      const tenants = await storage.getLeaseTenants(req.params.leaseId);\n      \n      // Anonymize tenant data for broker users\n      const processedTenants = tenants.map(tenant => {\n        if (tenant.tenant) {\n          const anonymizedTenant = anonymizeTenantData(tenant.tenant, user);\n          return { ...tenant, tenant: anonymizedTenant };\n        }\n        return tenant;\n      });\n      \n      res.json(processedTenants);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/lease-tenants', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const parsed = insertLeaseTenantSchema.parse(req.body);\n      \n      // Verify lease belongs to user's organization\n      const lease = await storage.getLease(parsed.leaseId, user.organizationId);\n      if (!lease) {\n        return res.status(404).json({ message: \"Lejemål ikke fundet\" });\n      }\n\n      const leaseTenant = await storage.createLeaseTenant({ \n        ...parsed, \n        organizationId: user.organizationId \n      });\n      \n      res.json(leaseTenant);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n\n\n  app.delete('/api/lease-tenants/:id', requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      await storage.deleteLeaseTenant(req.params.id, user.organizationId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Tenant routes\n  app.get(\"/api/tenants\", requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const tenants = await storage.getTenants(user.organizationId);\n      \n      // Anonymize tenant data for broker users\n      const processedTenants = tenants.map(tenant => anonymizeTenantData(tenant, user));\n      \n      res.json(processedTenants);\n    } catch (error: any) {\n      console.error(\"Error fetching tenants:\", error);\n      res.status(500).json({ message: \"Fejl ved hentning af lejere\" });\n    }\n  });\n\n  app.get(\"/api/tenants/:id\", requireAuth, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const tenant = await storage.getTenant(req.params.id, user.organizationId);\n      if (!tenant) {\n        return res.status(404).json({ message: \"Lejer ikke fundet\" });\n      }\n      \n      // Anonymize tenant data for broker users\n      const processedTenant = anonymizeTenantData(tenant, user);\n      \n      res.json(processedTenant);\n    } catch (error: any) {\n      console.error(\"Error fetching tenant:\", error);\n      res.status(500).json({ message: \"Fejl ved hentning af lejer\" });\n    }\n  });\n\n  app.post(\"/api/tenants\", requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const parsedData = insertTenantSchema.parse(req.body);\n      const tenant = await storage.createTenant({ ...parsedData, organizationId: user.organizationId });\n      res.json(tenant);\n    } catch (error: any) {\n      console.error(\"Error creating tenant:\", error);\n      if (error.name === 'ZodError') {\n        res.status(400).json({ message: error.errors });\n      } else {\n        res.status(500).json({ message: \"Fejl ved oprettelse af lejer\" });\n      }\n    }\n  });\n\n  app.put(\"/api/tenants/:id\", requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const parsedData = insertTenantSchema.parse(req.body);\n      const tenant = await storage.updateTenant(req.params.id, user.organizationId, parsedData);\n      res.json(tenant);\n    } catch (error: any) {\n      console.error(\"Error updating tenant:\", error);\n      if (error.name === 'ZodError') {\n        res.status(400).json({ message: error.errors });\n      } else {\n        res.status(500).json({ message: \"Fejl ved opdatering af lejer\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/tenants/:id\", requireWriteAccess, async (req, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      await storage.deleteTenant(req.params.id, user.organizationId);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error deleting tenant:\", error);\n      res.status(500).json({ message: \"Fejl ved sletning af lejer\" });\n    }\n  });\n\n  // Tenant routes\n  app.get(\"/api/tenants\", requireAuth, async (req: any, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const tenants = await storage.getTenants(user.organizationId);\n      res.json(tenants);\n    } catch (error) {\n      console.error(\"Error fetching tenants:\", error);\n      res.status(500).json({ message: \"Der opstod en fejl ved hentning af lejere\" });\n    }\n  });\n\n  app.post(\"/api/tenants\", requireAuth, async (req: any, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Kun administratorer kan oprette lejere\" });\n      }\n\n      const data = insertTenantSchema.parse(req.body);\n      \n      const tenant = await storage.createTenant({\n        ...data,\n        organizationId: user.organizationId,\n      });\n      \n      res.json(tenant);\n    } catch (error) {\n      console.error(\"Error creating tenant:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Ugyldige data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: (error as any).message || \"Der opstod en fejl ved oprettelse af lejer\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/tenants/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Kun administratorer kan redigere lejere\" });\n      }\n\n      const data = insertTenantSchema.partial().parse(req.body);\n      \n      const tenant = await storage.updateTenant(req.params.id, user.organizationId, data);\n      res.json(tenant);\n    } catch (error) {\n      console.error(\"Error updating tenant:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Ugyldige data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: (error as any).message || \"Der opstod en fejl ved opdatering af lejer\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/tenants/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Kun administratorer kan slette lejere\" });\n      }\n\n      await storage.deleteTenant(req.params.id, user.organizationId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting tenant:\", error);\n      res.status(500).json({ message: (error as any).message || \"Der opstod en fejl ved sletning af lejer\" });\n    }\n  });\n\n\n\n  // Lease tenant routes\n  // Get all lease tenants for overview\n  app.get('/api/all-lease-tenants', requireAuth, async (req: any, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const allLeaseTenants = await storage.getAllLeaseTenants(user.organizationId);\n      res.json(allLeaseTenants);\n    } catch (error) {\n      console.error(\"Error fetching all lease tenants:\", error);\n      res.status(500).json({ message: \"Kunne ikke hente lejekontakter\" });\n    }\n  });\n\n  app.get(\"/api/leases/:leaseId/tenants\", requireAuth, async (req: any, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const leaseTenants = await storage.getLeaseTenants(req.params.leaseId);\n      res.json(leaseTenants);\n    } catch (error) {\n      console.error(\"Error fetching lease tenants:\", error);\n      res.status(500).json({ message: \"Der opstod en fejl ved hentning af lejekontakter\" });\n    }\n  });\n\n  app.post(\"/api/lease-tenants\", requireAuth, async (req: any, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      const data = insertLeaseTenantSchema.parse(req.body);\n      \n      const leaseTenant = await storage.createLeaseTenant({\n        ...data,\n        organizationId: user.organizationId,\n      });\n      \n      res.json(leaseTenant);\n    } catch (error) {\n      console.error(\"Error creating lease tenant:\", error);\n      console.error(\"Request body:\", JSON.stringify(req.body, null, 2));\n      if (error instanceof z.ZodError) {\n        console.error(\"Validation errors:\", JSON.stringify(error.errors, null, 2));\n        // Show all validation errors\n        const errorMessages = error.errors.map(err => `${err.path.join('.')}: ${err.message}`);\n        res.status(400).json({ \n          message: `Valideringsfejl: ${errorMessages.join(', ')}`,\n          details: error.errors \n        });\n      } else {\n        res.status(500).json({ message: (error as any).message || \"Der opstod en fejl ved oprettelse af lejekontrakt\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/lease-tenants/:id\", requireAuth, async (req: any, res) => {\n    console.log(\"=== PATCH HANDLER START ===\");\n    console.log(\"PATCH request received for lease tenant:\", req.params.id);\n    console.log(\"Request body:\", JSON.stringify(req.body, null, 2));\n    \n    try {\n      \n      const user = await getCurrentUser(req);\n      if (!user) {\n        console.log(\"No user found in request\");\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n      \n      console.log(\"User found:\", user.id, user.role);\n\n      // Parse using the shared schema - it handles the transformations correctly\n      console.log(\"Before validation - request body:\", JSON.stringify(req.body, null, 2));\n      \n      try {\n        const data = insertLeaseTenantSchema.parse(req.body);\n        console.log(\"Validation successful, parsed data:\", JSON.stringify(data, null, 2));\n      } catch (validationError) {\n        console.log(\"Validation failed with error:\", validationError);\n        if (validationError instanceof z.ZodError) {\n          console.log(\"Detailed validation errors:\", JSON.stringify(validationError.errors, null, 2));\n        }\n        throw validationError;\n      }\n      \n      const data = insertLeaseTenantSchema.parse(req.body);\n      \n      const leaseTenant = await storage.updateLeaseTenant(req.params.id, user.organizationId, data);\n      res.json(leaseTenant);\n    } catch (error: any) {\n      console.error(\"=== ERROR IN PATCH HANDLER ===\");\n      console.error(\"Error updating lease tenant:\", error);\n      console.error(\"Error stack:\", error.stack);\n      console.error(\"Request body:\", JSON.stringify(req.body, null, 2));\n      \n      if (error instanceof z.ZodError) {\n        console.error(\"Zod validation errors:\", JSON.stringify(error.errors, null, 2));\n        const errorMessages = error.errors.map(err => `${err.path.join('.')}: ${err.message}`);\n        const response = { \n          message: `Valideringsfejl: ${errorMessages.join(', ')}`,\n          details: error.errors \n        };\n        console.error(\"Sending 400 response:\", response);\n        res.status(400).json(response);\n      } else {\n        console.error(\"Non-Zod error, sending 500\");\n        res.status(500).json({ message: error.message || \"Der opstod en fejl ved opdatering af lejekontrakt\" });\n      }\n    }\n    console.log(\"=== PATCH HANDLER END ===\");\n  });\n\n  app.delete(\"/api/lease-tenants/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const user = await getCurrentUser(req);\n      if (!user) {\n        return res.status(401).json({ message: \"Ikke autoriseret\" });\n      }\n\n      await storage.deleteLeaseTenant(req.params.id, user.organizationId);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error deleting lease tenant:\", error);\n      res.status(500).json({ message: error.message || \"Der opstod en fejl ved sletning af lejekontrakt\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":43554},"server/storage.ts":{"content":"import { users, properties, organizations, companies, companyRelations, userInvitations, leases, leaseTenants, tenants, type User, type InsertUser, type Property, type InsertProperty, type Organization, type InsertOrganization, type Company, type InsertCompany, type CompanyRelation, type InsertCompanyRelation, type UserInvitation, type InsertUserInvitation, type Lease, type InsertLease, type LeaseTenant, type InsertLeaseTenant, type Tenant, type InsertTenant } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sum, count, and, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Organization methods\n  createOrganization(org: InsertOrganization): Promise<Organization>;\n  \n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser & { organizationId: string }): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User>;\n  hasAnyUsers(): Promise<boolean>;\n  \n  // Property methods\n  getProperties(organizationId: string, userId?: string): Promise<Property[]>;\n  getProperty(id: string, organizationId: string): Promise<Property | undefined>;\n  createProperty(property: InsertProperty & { organizationId: string }): Promise<Property>;\n  updateProperty(id: string, organizationId: string, updates: Partial<InsertProperty>): Promise<Property>;\n  deleteProperty(id: string, organizationId: string): Promise<void>;\n  \n  // Company methods\n  getCompanies(organizationId: string): Promise<Company[]>;\n  getCompany(id: string, organizationId: string): Promise<Company | undefined>;\n  createCompany(company: InsertCompany & { organizationId: string }): Promise<Company>;\n  updateCompany(id: string, organizationId: string, updates: Partial<InsertCompany>): Promise<Company>;\n  deleteCompany(id: string, organizationId: string): Promise<void>;\n  \n  // Company relation methods\n  getCompanyRelations(organizationId: string): Promise<CompanyRelation[]>;\n  getParentRelations(companyId: string): Promise<CompanyRelation[]>;\n  getChildRelations(companyId: string): Promise<CompanyRelation[]>;\n  createCompanyRelation(relation: InsertCompanyRelation): Promise<CompanyRelation>;\n  updateCompanyRelation(id: string, updates: Partial<InsertCompanyRelation>): Promise<CompanyRelation>;\n  deleteCompanyRelation(id: string): Promise<void>;\n  \n  // User invitation methods\n  createUserInvitation(invitation: InsertUserInvitation & { organizationId: string, invitedBy: string, token: string, expiresAt: Date }): Promise<UserInvitation>;\n  getUserInvitation(token: string): Promise<UserInvitation | undefined>;\n  getUserInvitationByEmail(email: string): Promise<UserInvitation | undefined>;\n  getUserInvitations(organizationId: string): Promise<UserInvitation[]>;\n  deleteUserInvitation(id: string): Promise<void>;\n  \n  // User management methods\n  getUsersInOrganization(organizationId: string): Promise<User[]>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  updateUser(id: string, updates: Partial<{ role: \"admin\" | \"user\", assignedCompanyId: string | null }>): Promise<User>;\n  deleteUser(id: string, organizationId: string): Promise<void>;\n  \n  // Lease methods\n  getLeases(organizationId: string, userId?: string): Promise<(Lease & { property: Property })[]>;\n  getLeasesByProperty(propertyId: string, organizationId: string): Promise<(Lease & { property: Property })[]>;\n  getLease(id: string, organizationId: string): Promise<Lease | undefined>;\n  createLease(lease: InsertLease & { organizationId: string }): Promise<Lease>;\n  updateLease(id: string, organizationId: string, updates: Partial<InsertLease>): Promise<Lease>;\n  deleteLease(id: string, organizationId: string): Promise<void>;\n  \n  // Tenant methods\n  getTenants(organizationId: string): Promise<Tenant[]>;\n  getTenant(id: string, organizationId: string): Promise<Tenant | undefined>;\n  createTenant(tenant: InsertTenant & { organizationId: string }): Promise<Tenant>;\n  updateTenant(id: string, organizationId: string, updates: Partial<InsertTenant>): Promise<Tenant>;\n  deleteTenant(id: string, organizationId: string): Promise<void>;\n  \n  // Lease tenant methods  \n  getAllLeaseTenants(organizationId: string): Promise<(LeaseTenant & { tenant: Tenant })[]>;\n  getLeaseTenants(leaseId: string): Promise<(LeaseTenant & { tenant: Tenant })[]>;\n  getLeaseTenant(id: string): Promise<LeaseTenant | undefined>;\n  createLeaseTenant(leaseTenant: InsertLeaseTenant & { organizationId: string }): Promise<LeaseTenant>;\n  updateLeaseTenant(id: string, organizationId: string, updates: Partial<InsertLeaseTenant>): Promise<LeaseTenant>;\n  deleteLeaseTenant(id: string, organizationId: string): Promise<void>;\n  \n  // Dashboard methods\n  getPropertyStats(organizationId: string): Promise<{\n    count: number;\n    totalValue: string;\n    latestProperty: Property | null;\n    leaseStats: { count: number; totalRentCapacity: string };\n  }>;\n  getRecentProperties(organizationId: string, limit?: number): Promise<Property[]>;\n  getRecentPropertiesWeighted(organizationId: string, userId: string, limit?: number): Promise<Property[]>;\n  calculateWeightedStats(organizationId: string, userId: string): Promise<{\n    count: number;\n    totalValue: string;\n    latestProperty: Property | null;\n    leaseStats: { count: number; totalRentCapacity: string };\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async createOrganization(org: InsertOrganization): Promise<Organization> {\n    const [organization] = await db\n      .insert(organizations)\n      .values(org)\n      .returning();\n    return organization;\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser & { organizationId: string }): Promise<User> {\n    // Set default dashboard view mode based on role\n    const dashboardViewMode = insertUser.role === \"admin\" ? \"total\" : \"weighted\";\n    \n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        dashboardViewMode,\n      })\n      .returning();\n    return user;\n  }\n\n\n\n  async hasAnyUsers(): Promise<boolean> {\n    const [result] = await db.select({ count: count() }).from(users);\n    return result.count > 0;\n  }\n\n  async getProperties(organizationId: string, userId?: string): Promise<Property[]> {\n    // If no userId provided, return all properties (for admin access)\n    if (!userId) {\n      return await db\n        .select()\n        .from(properties)\n        .where(eq(properties.organizationId, organizationId))\n        .orderBy(desc(properties.createdAt));\n    }\n\n    // Get user and their assigned company\n    const user = await this.getUser(userId);\n    if (!user || !user.assignedCompanyId) {\n      return []; // User has no assigned company, no access to properties\n    }\n\n    // Get all companies that the user's assigned company has ownership in (including transitive ownership)\n    const accessibleCompanyIds = await this.getAccessibleCompanyIds(user.assignedCompanyId);\n    \n    if (accessibleCompanyIds.length === 0) {\n      return []; // User has no ownership stake in any companies\n    }\n\n    // Get properties owned by companies the user has access to\n    return await db\n      .select()\n      .from(properties)\n      .where(\n        and(\n          eq(properties.organizationId, organizationId),\n          inArray(properties.ownerCompanyId, accessibleCompanyIds)\n        )\n      )\n      .orderBy(desc(properties.createdAt));\n  }\n\n  async getProperty(id: string, organizationId: string): Promise<Property | undefined> {\n    const [property] = await db\n      .select()\n      .from(properties)\n      .where(eq(properties.id, id));\n    return property?.organizationId === organizationId ? property : undefined;\n  }\n\n  async createProperty(property: InsertProperty & { organizationId: string }): Promise<Property> {\n    const propertyData = {\n      ...property,\n      acquisitionPrice: property.acquisitionPrice.toString(),\n    };\n    const [newProperty] = await db\n      .insert(properties)\n      .values(propertyData)\n      .returning();\n    return newProperty;\n  }\n\n  async updateProperty(id: string, organizationId: string, updates: Partial<InsertProperty>): Promise<Property> {\n    const updateData: Record<string, any> = { ...updates };\n    if (updates.acquisitionPrice !== undefined) {\n      updateData.acquisitionPrice = updates.acquisitionPrice.toString();\n    }\n    \n    const [property] = await db\n      .update(properties)\n      .set(updateData)\n      .where(eq(properties.id, id))\n      .returning();\n    if (property?.organizationId !== organizationId) {\n      throw new Error(\"Property not found\");\n    }\n    return property;\n  }\n\n  async deleteProperty(id: string, organizationId: string): Promise<void> {\n    const [property] = await db\n      .select({ organizationId: properties.organizationId })\n      .from(properties)\n      .where(eq(properties.id, id));\n    \n    if (!property || property.organizationId !== organizationId) {\n      throw new Error(\"Property not found\");\n    }\n    \n    await db\n      .delete(properties)\n      .where(eq(properties.id, id));\n  }\n\n  async getRecentProperties(organizationId: string, limit: number = 5): Promise<Property[]> {\n    return await db\n      .select()\n      .from(properties)\n      .where(eq(properties.organizationId, organizationId))\n      .orderBy(desc(properties.acquisitionDate))\n      .limit(limit);\n  }\n\n  async getRecentPropertiesWeighted(organizationId: string, userId: string, limit: number = 5): Promise<Property[]> {\n    // Get user to find their assigned company (root company)\n    const user = await this.getUser(userId);\n    if (!user || !user.assignedCompanyId) {\n      return [];\n    }\n\n    // Get all properties with owner companies\n    const allProperties = await db\n      .select({\n        property: properties,\n        ownerCompany: companies,\n      })\n      .from(properties)\n      .leftJoin(companies, eq(properties.ownerCompanyId, companies.id))\n      .where(eq(properties.organizationId, organizationId))\n      .orderBy(desc(properties.acquisitionDate));\n\n    // Get all company relations for this organization\n    const allRelations = await db\n      .select()\n      .from(companyRelations)\n      .innerJoin(companies, eq(companyRelations.parentCompanyId, companies.id))\n      .where(eq(companies.organizationId, organizationId));\n\n    // Filter properties where user has ownership > 0\n    const filteredProperties = [];\n    for (const { property, ownerCompany } of allProperties) {\n      if (!ownerCompany) {\n        // Skip properties without owner company\n        continue;\n      }\n\n      // Calculate ownership weight from user's root company to this property owner\n      const ownershipWeight = this.calculateOwnershipFromRoot(user.assignedCompanyId, ownerCompany.id, allRelations);\n      \n      if (ownershipWeight > 0) {\n        filteredProperties.push(property);\n      }\n\n      if (filteredProperties.length >= limit) {\n        break;\n      }\n    }\n\n    return filteredProperties;\n  }\n\n  // Company methods\n  async getCompanies(organizationId: string): Promise<Company[]> {\n    return await db\n      .select()\n      .from(companies)\n      .where(eq(companies.organizationId, organizationId))\n      .orderBy(desc(companies.createdAt));\n  }\n\n  async getCompany(id: string, organizationId: string): Promise<Company | undefined> {\n    const [company] = await db\n      .select()\n      .from(companies)\n      .where(and(eq(companies.id, id), eq(companies.organizationId, organizationId)));\n    return company || undefined;\n  }\n\n  async createCompany(company: InsertCompany & { organizationId: string }): Promise<Company> {\n    const [newCompany] = await db\n      .insert(companies)\n      .values(company)\n      .returning();\n    return newCompany;\n  }\n\n  async updateCompany(id: string, organizationId: string, updates: Partial<InsertCompany>): Promise<Company> {\n    const [company] = await db\n      .update(companies)\n      .set(updates)\n      .where(and(eq(companies.id, id), eq(companies.organizationId, organizationId)))\n      .returning();\n    if (!company) {\n      throw new Error(\"Selskab ikke fundet\");\n    }\n    return company;\n  }\n\n  async deleteCompany(id: string, organizationId: string): Promise<void> {\n    const result = await db\n      .delete(companies)\n      .where(and(eq(companies.id, id), eq(companies.organizationId, organizationId)));\n    if (result.rowCount === 0) {\n      throw new Error(\"Selskab ikke fundet\");\n    }\n  }\n\n  // Company relation methods\n  async getCompanyRelations(organizationId: string): Promise<CompanyRelation[]> {\n    const relations = await db\n      .select({\n        id: companyRelations.id,\n        parentCompanyId: companyRelations.parentCompanyId,\n        childCompanyId: companyRelations.childCompanyId,\n        ownershipPercentage: companyRelations.ownershipPercentage,\n        createdAt: companyRelations.createdAt,\n      })\n      .from(companyRelations)\n      .innerJoin(companies, eq(companyRelations.parentCompanyId, companies.id))\n      .where(eq(companies.organizationId, organizationId));\n    return relations;\n  }\n\n  async getParentRelations(companyId: string): Promise<CompanyRelation[]> {\n    return await db\n      .select()\n      .from(companyRelations)\n      .where(eq(companyRelations.childCompanyId, companyId));\n  }\n\n  async getChildRelations(companyId: string): Promise<CompanyRelation[]> {\n    return await db\n      .select()\n      .from(companyRelations)\n      .where(eq(companyRelations.parentCompanyId, companyId));\n  }\n\n  async createCompanyRelation(relation: InsertCompanyRelation): Promise<CompanyRelation> {\n    const relationData = {\n      ...relation,\n      ownershipPercentage: relation.ownershipPercentage.toString(),\n    };\n    const [newRelation] = await db\n      .insert(companyRelations)\n      .values(relationData)\n      .returning();\n    return newRelation;\n  }\n\n  async updateCompanyRelation(id: string, updates: Partial<InsertCompanyRelation>): Promise<CompanyRelation> {\n    const updateData = updates.ownershipPercentage \n      ? { ...updates, ownershipPercentage: updates.ownershipPercentage.toString() }\n      : updates;\n      \n    const [relation] = await db\n      .update(companyRelations)\n      .set(updateData)\n      .where(eq(companyRelations.id, id))\n      .returning();\n    return relation;\n  }\n\n  async deleteCompanyRelation(id: string): Promise<void> {\n    await db\n      .delete(companyRelations)\n      .where(eq(companyRelations.id, id));\n  }\n\n  // Lease methods\n  async getLeases(organizationId: string, userId?: string): Promise<(Lease & { property: Property })[]> {\n    // If no userId provided, return all leases (for admin access)\n    if (!userId) {\n      const result = await db\n        .select({\n          id: leases.id,\n          propertyId: leases.propertyId,\n          name: leases.name,\n          registeredArea: leases.registeredArea,\n          totalArea: leases.totalArea,\n          vatRegistered: leases.vatRegistered,\n          type: leases.type,\n          maxRentPerSqm: leases.maxRentPerSqm,\n          yieldRequirementPct: leases.yieldRequirementPct,\n          organizationId: leases.organizationId,\n          createdAt: leases.createdAt,\n          property: properties\n        })\n        .from(leases)\n        .innerJoin(properties, eq(leases.propertyId, properties.id))\n        .where(eq(leases.organizationId, organizationId));\n      \n      return result.map(row => ({\n        id: row.id,\n        propertyId: row.propertyId,\n        name: row.name,\n        registeredArea: row.registeredArea,\n        totalArea: row.totalArea,\n        vatRegistered: row.vatRegistered,\n        type: row.type,\n        maxRentPerSqm: row.maxRentPerSqm,\n        yieldRequirementPct: row.yieldRequirementPct,\n        organizationId: row.organizationId,\n        createdAt: row.createdAt,\n        property: row.property\n      }));\n    }\n\n    // Get user and their assigned company\n    const user = await this.getUser(userId);\n    if (!user || !user.assignedCompanyId) {\n      return []; // User has no assigned company, no access to leases\n    }\n\n    // Get all companies that the user's assigned company has ownership in (including transitive ownership)\n    const accessibleCompanyIds = await this.getAccessibleCompanyIds(user.assignedCompanyId);\n    \n    if (accessibleCompanyIds.length === 0) {\n      return []; // User has no ownership stake in any companies\n    }\n\n    // Get leases for properties owned by companies the user has access to\n    const result = await db\n      .select({\n        id: leases.id,\n        propertyId: leases.propertyId,\n        name: leases.name,\n        registeredArea: leases.registeredArea,\n        totalArea: leases.totalArea,\n        vatRegistered: leases.vatRegistered,\n        type: leases.type,\n        maxRentPerSqm: leases.maxRentPerSqm,\n        yieldRequirementPct: leases.yieldRequirementPct,\n        organizationId: leases.organizationId,\n        createdAt: leases.createdAt,\n        property: properties\n      })\n      .from(leases)\n      .innerJoin(properties, eq(leases.propertyId, properties.id))\n      .where(\n        and(\n          eq(leases.organizationId, organizationId),\n          inArray(properties.ownerCompanyId, accessibleCompanyIds)\n        )\n      );\n    \n    return result.map(row => ({\n      id: row.id,\n      propertyId: row.propertyId,\n      name: row.name,\n      registeredArea: row.registeredArea,\n      totalArea: row.totalArea,\n      vatRegistered: row.vatRegistered,\n      type: row.type,\n      maxRentPerSqm: row.maxRentPerSqm,\n      yieldRequirementPct: row.yieldRequirementPct,\n      organizationId: row.organizationId,\n      createdAt: row.createdAt,\n      property: row.property\n    }));\n  }\n\n  // Helper method to get all company IDs that a company has ownership in (including transitive)\n  private async getAccessibleCompanyIds(companyId: string): Promise<string[]> {\n    const visitedCompanies = new Set<string>();\n    const accessibleCompanies = new Set<string>();\n\n    const traverseOwnership = async (currentCompanyId: string, currentOwnership: number = 100) => {\n      if (visitedCompanies.has(currentCompanyId)) {\n        return; // Prevent infinite loops\n      }\n      visitedCompanies.add(currentCompanyId);\n\n      // If ownership is greater than 0%, include this company\n      if (currentOwnership > 0) {\n        accessibleCompanies.add(currentCompanyId);\n      }\n\n      // Get child companies (companies this company owns)\n      const childRelations = await this.getChildRelations(currentCompanyId);\n      \n      for (const relation of childRelations) {\n        const childOwnership = (currentOwnership * parseFloat(relation.ownershipPercentage)) / 100;\n        await traverseOwnership(relation.childCompanyId, childOwnership);\n      }\n    };\n\n    await traverseOwnership(companyId);\n    return Array.from(accessibleCompanies);\n  }\n\n  async getLeasesByProperty(propertyId: string, organizationId: string): Promise<(Lease & { property: Property })[]> {\n    return await db\n      .select({\n        id: leases.id,\n        name: leases.name,\n        propertyId: leases.propertyId,\n        organizationId: leases.organizationId,\n        type: leases.type,\n        registeredArea: leases.registeredArea,\n        totalArea: leases.totalArea,\n        maxRentPerSqm: leases.maxRentPerSqm,\n        yieldRequirementPct: leases.yieldRequirementPct,\n        vatRegistered: leases.vatRegistered,\n        createdAt: leases.createdAt,\n        property: properties\n      })\n      .from(leases)\n      .leftJoin(properties, eq(leases.propertyId, properties.id))\n      .where(and(eq(leases.propertyId, propertyId), eq(leases.organizationId, organizationId)))\n      .orderBy(desc(leases.createdAt));\n  }\n\n  async getLease(id: string, organizationId: string): Promise<(Lease & { property: Property }) | undefined> {\n    const [lease] = await db\n      .select({\n        id: leases.id,\n        propertyId: leases.propertyId,\n        name: leases.name,\n        registeredArea: leases.registeredArea,\n        totalArea: leases.totalArea,\n        vatRegistered: leases.vatRegistered,\n        type: leases.type,\n        maxRentPerSqm: leases.maxRentPerSqm,\n        yieldRequirementPct: leases.yieldRequirementPct,\n        organizationId: leases.organizationId,\n        createdAt: leases.createdAt,\n        property: {\n          id: properties.id,\n          name: properties.name,\n          address: properties.address,\n          postalCode: properties.postalCode,\n          city: properties.city,\n          acquisitionPrice: properties.acquisitionPrice,\n          acquisitionDate: properties.acquisitionDate,\n          propertyType: properties.propertyType,\n          shareNumerator: properties.shareNumerator,\n          shareDenominator: properties.shareDenominator,\n          ownerCompanyId: properties.ownerCompanyId,\n          organizationId: properties.organizationId,\n          createdAt: properties.createdAt,\n        }\n      })\n      .from(leases)\n      .leftJoin(properties, eq(leases.propertyId, properties.id))\n      .where(and(eq(leases.id, id), eq(leases.organizationId, organizationId)));\n    return lease || undefined;\n  }\n\n  async createLease(lease: InsertLease & { organizationId: string }): Promise<Lease> {\n    const leaseData = {\n      ...lease,\n      maxRentPerSqm: lease.maxRentPerSqm ? lease.maxRentPerSqm.toString() : null,\n      yieldRequirementPct: lease.yieldRequirementPct ? lease.yieldRequirementPct.toString() : null,\n    };\n    const [newLease] = await db\n      .insert(leases)\n      .values(leaseData)\n      .returning();\n    return newLease;\n  }\n\n  async updateLease(id: string, organizationId: string, updates: Partial<InsertLease>): Promise<Lease> {\n    const updateData = {\n      ...updates,\n      maxRentPerSqm: updates.maxRentPerSqm ? updates.maxRentPerSqm.toString() : undefined,\n      yieldRequirementPct: updates.yieldRequirementPct ? updates.yieldRequirementPct.toString() : undefined,\n    };\n    \n    const [lease] = await db\n      .update(leases)\n      .set(updateData)\n      .where(and(eq(leases.id, id), eq(leases.organizationId, organizationId)))\n      .returning();\n    \n    if (!lease) {\n      throw new Error(\"Lejemål ikke fundet\");\n    }\n    \n    return lease;\n  }\n\n  async deleteLease(id: string, organizationId: string): Promise<void> {\n    await db\n      .delete(leases)\n      .where(and(eq(leases.id, id), eq(leases.organizationId, organizationId)));\n  }\n\n  // Lease tenant methods\n  async getAllLeaseTenants(organizationId: string): Promise<(LeaseTenant & { tenant: Tenant })[]> {\n    const results = await db\n      .select({\n        id: leaseTenants.id,\n        leaseId: leaseTenants.leaseId,\n        tenantId: leaseTenants.tenantId,\n        organizationId: leaseTenants.organizationId,\n        rentAmount: leaseTenants.rentAmount,\n        advanceWater: leaseTenants.advanceWater,\n        advanceHeating: leaseTenants.advanceHeating,\n        advanceElectricity: leaseTenants.advanceElectricity,\n        advanceOther: leaseTenants.advanceOther,\n        periodStart: leaseTenants.periodStart,\n        periodEnd: leaseTenants.periodEnd,\n        depositType: leaseTenants.depositType,\n        depositAmount: leaseTenants.depositAmount,\n        prepaidType: leaseTenants.prepaidType,\n        prepaidAmount: leaseTenants.prepaidAmount,\n        regulationType: leaseTenants.regulationType,\n        note: leaseTenants.note,\n        createdAt: leaseTenants.createdAt,\n        tenant: {\n          id: tenants.id,\n          internalNumber: tenants.internalNumber,\n          name: tenants.name,\n          type: tenants.type,\n          cvrNumber: tenants.cvrNumber,\n          contactPerson: tenants.contactPerson,\n          email: tenants.email,\n          invoiceEmail: tenants.invoiceEmail,\n          phone: tenants.phone,\n          notes: tenants.notes,\n          organizationId: tenants.organizationId,\n          createdAt: tenants.createdAt,\n        }\n      })\n      .from(leaseTenants)\n      .leftJoin(tenants, eq(leaseTenants.tenantId, tenants.id))\n      .where(eq(leaseTenants.organizationId, organizationId))\n      .orderBy(desc(leaseTenants.periodStart));\n\n    return results.filter(result => result.tenant && result.tenant.id !== null) as (LeaseTenant & { tenant: Tenant })[];\n  }\n\n  async getLeaseTenants(leaseId: string): Promise<(LeaseTenant & { tenant: Tenant })[]> {\n    const results = await db\n      .select({\n        id: leaseTenants.id,\n        leaseId: leaseTenants.leaseId,\n        tenantId: leaseTenants.tenantId,\n        organizationId: leaseTenants.organizationId,\n        rentAmount: leaseTenants.rentAmount,\n        advanceWater: leaseTenants.advanceWater,\n        advanceHeating: leaseTenants.advanceHeating,\n        advanceElectricity: leaseTenants.advanceElectricity,\n        advanceOther: leaseTenants.advanceOther,\n        periodStart: leaseTenants.periodStart,\n        periodEnd: leaseTenants.periodEnd,\n        depositType: leaseTenants.depositType,\n        depositAmount: leaseTenants.depositAmount,\n        prepaidType: leaseTenants.prepaidType,\n        prepaidAmount: leaseTenants.prepaidAmount,\n        regulationType: leaseTenants.regulationType,\n        note: leaseTenants.note,\n        createdAt: leaseTenants.createdAt,\n        tenant: {\n          id: tenants.id,\n          internalNumber: tenants.internalNumber,\n          name: tenants.name,\n          type: tenants.type,\n          cvrNumber: tenants.cvrNumber,\n          contactPerson: tenants.contactPerson,\n          email: tenants.email,\n          invoiceEmail: tenants.invoiceEmail,\n          phone: tenants.phone,\n          notes: tenants.notes,\n          organizationId: tenants.organizationId,\n          createdAt: tenants.createdAt,\n        }\n      })\n      .from(leaseTenants)\n      .leftJoin(tenants, eq(leaseTenants.tenantId, tenants.id))\n      .where(eq(leaseTenants.leaseId, leaseId))\n      .orderBy(desc(leaseTenants.periodStart));\n\n    return results.filter(result => result.tenant && result.tenant.id !== null) as (LeaseTenant & { tenant: Tenant })[];\n  }\n\n  async getLeaseTenant(id: string): Promise<LeaseTenant | undefined> {\n    const [leaseTenant] = await db\n      .select()\n      .from(leaseTenants)\n      .where(eq(leaseTenants.id, id));\n    return leaseTenant || undefined;\n  }\n\n\n\n\n\n  async getPropertyStats(organizationId: string): Promise<{\n    count: number;\n    totalValue: string;\n    latestProperty: Property | null;\n    leaseStats: { count: number; totalRentCapacity: string };\n  }> {\n    const [statsResult] = await db\n      .select({\n        count: count(),\n        totalValue: sum(properties.acquisitionPrice),\n      })\n      .from(properties)\n      .where(eq(properties.organizationId, organizationId));\n\n    const [latestProperty] = await db\n      .select()\n      .from(properties)\n      .where(eq(properties.organizationId, organizationId))\n      .orderBy(desc(properties.acquisitionDate))\n      .limit(1);\n\n    // Calculate lease statistics - for admin, show all leases\n    const allLeases = await this.getLeases(organizationId);\n    const leaseCount = allLeases.length;\n    const totalArea = allLeases.reduce((sum, lease) => {\n      const area = parseInt(lease.totalArea.toString()) || 0;\n      return sum + area;\n    }, 0);\n\n    return {\n      count: statsResult.count,\n      totalValue: statsResult.totalValue || \"0\",\n      latestProperty: latestProperty || null,\n      leaseStats: {\n        count: leaseCount,\n        totalRentCapacity: totalArea.toString()\n      }\n    };\n  }\n\n\n\n  // User invitation methods\n  async createUserInvitation(invitation: InsertUserInvitation & { organizationId: string, invitedBy: string, token: string, expiresAt: Date }): Promise<UserInvitation> {\n    const [userInvitation] = await db\n      .insert(userInvitations)\n      .values(invitation)\n      .returning();\n    return userInvitation;\n  }\n\n  async getUserInvitation(token: string): Promise<UserInvitation | undefined> {\n    const [invitation] = await db.select().from(userInvitations).where(eq(userInvitations.token, token));\n    return invitation || undefined;\n  }\n\n  async getUserInvitationByEmail(email: string): Promise<UserInvitation | undefined> {\n    const [invitation] = await db.select().from(userInvitations).where(eq(userInvitations.email, email));\n    return invitation || undefined;\n  }\n\n  async getUserInvitations(organizationId: string): Promise<UserInvitation[]> {\n    return await db\n      .select()\n      .from(userInvitations)\n      .where(eq(userInvitations.organizationId, organizationId));\n  }\n\n  async deleteUserInvitation(id: string): Promise<void> {\n    await db\n      .delete(userInvitations)\n      .where(eq(userInvitations.id, id));\n  }\n\n  // User management methods\n  async getUsersInOrganization(organizationId: string): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(eq(users.organizationId, organizationId));\n  }\n\n  async updateUser(id: string, updates: Partial<{ role: \"admin\" | \"user\", assignedCompanyId: string | null, dashboardViewMode: \"total\" | \"weighted\" }>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    \n    if (!user) {\n      throw new Error(\"Bruger ikke fundet\");\n    }\n    \n    return user;\n  }\n\n  async updateUserPreferences(userId: string, preferences: { dashboardViewMode: \"total\" | \"weighted\" }): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(preferences)\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async calculateWeightedStats(organizationId: string, userId: string): Promise<{\n    count: number;\n    totalValue: string;\n    latestProperty: Property | null;\n    leaseStats: { count: number; totalRentCapacity: string };\n  }> {\n    // Get user to find their assigned company (root company)\n    const user = await this.getUser(userId);\n    if (!user || !user.assignedCompanyId) {\n      console.log('User has no assigned company, using total stats');\n      return await this.getPropertyStats(organizationId);\n    }\n\n    // Get all properties for the organization\n    const allProperties = await db\n      .select({\n        property: {\n          id: properties.id,\n          name: properties.name,\n          address: properties.address,\n          postalCode: properties.postalCode,\n          city: properties.city,\n          acquisitionPrice: properties.acquisitionPrice,\n          acquisitionDate: properties.acquisitionDate,\n          propertyType: properties.propertyType,\n          shareNumerator: properties.shareNumerator,\n          shareDenominator: properties.shareDenominator,\n          ownerCompanyId: properties.ownerCompanyId,\n          organizationId: properties.organizationId,\n          createdAt: properties.createdAt,\n        },\n        ownerCompany: companies,\n      })\n      .from(properties)\n      .leftJoin(companies, eq(properties.ownerCompanyId, companies.id))\n      .where(eq(properties.organizationId, organizationId));\n\n    if (allProperties.length === 0) {\n      return { \n        count: 0, \n        totalValue: \"0\", \n        latestProperty: null,\n        leaseStats: { count: 0, totalRentCapacity: \"0\" }\n      };\n    }\n\n    // Get all company relations for this organization\n    const allRelations = await db\n      .select()\n      .from(companyRelations)\n      .innerJoin(companies, eq(companyRelations.parentCompanyId, companies.id))\n      .where(eq(companies.organizationId, organizationId));\n    \n    // Calculate ownership weights for each property from the user's root company perspective\n    let totalWeightedCount = 0;\n    let totalWeightedValue = 0;\n\n    for (const { property, ownerCompany } of allProperties) {\n      if (!ownerCompany) {\n        // Property without owner company - skip in weighted view\n        continue;\n      }\n\n      // Calculate ownership weight from user's root company to this property owner\n      const ownershipWeight = this.calculateOwnershipFromRoot(user.assignedCompanyId, ownerCompany.id, allRelations);\n      \n      totalWeightedCount += ownershipWeight;\n      totalWeightedValue += parseFloat(property.acquisitionPrice) * ownershipWeight;\n    }\n\n    // Find latest property where user has ownership > 0\n    let latestProperty = null;\n    const sortedProperties = allProperties.sort((a, b) => {\n      const dateA = a.property.acquisitionDate ? new Date(a.property.acquisitionDate).getTime() : 0;\n      const dateB = b.property.acquisitionDate ? new Date(b.property.acquisitionDate).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    for (const { property, ownerCompany } of sortedProperties) {\n      if (!ownerCompany) {\n        continue;\n      }\n      \n      const ownershipWeight = this.calculateOwnershipFromRoot(user.assignedCompanyId, ownerCompany.id, allRelations);\n      if (ownershipWeight > 0) {\n        latestProperty = property;\n        break;\n      }\n    }\n\n    // Calculate weighted lease statistics - filter by ownership\n    const allLeases = await this.getLeases(organizationId, userId);\n    let totalWeightedLeaseCount = 0;\n    let totalWeightedArea = 0;\n\n    for (const lease of allLeases) {\n      const ownerCompany = allProperties.find(p => p.property.id === lease.propertyId)?.ownerCompany;\n      if (!ownerCompany) continue;\n\n      const ownershipWeight = this.calculateOwnershipFromRoot(user.assignedCompanyId, ownerCompany.id, allRelations);\n      if (ownershipWeight > 0) {\n        totalWeightedLeaseCount += ownershipWeight;\n        \n        const area = parseInt(lease.totalArea.toString()) || 0;\n        totalWeightedArea += area * ownershipWeight;\n      }\n    }\n\n    return {\n      count: Math.round(totalWeightedCount * 100) / 100,\n      totalValue: Math.round(totalWeightedValue).toString(),\n      latestProperty,\n      leaseStats: {\n        count: Math.round(totalWeightedLeaseCount * 100) / 100,\n        totalRentCapacity: Math.round(totalWeightedArea).toString()\n      }\n    };\n  }\n\n  private calculateOwnershipFromRoot(rootCompanyId: string, targetCompanyId: string, relations: any[]): number {\n    if (rootCompanyId === targetCompanyId) {\n      return 1.0;\n    }\n\n    // Find all relations where root company is parent (direct ownership)\n    const directRelations = relations.filter(r => r.company_relations.parentCompanyId === rootCompanyId);\n    \n    let totalOwnership = 0;\n    for (const relation of directRelations) {\n      const childCompanyId = relation.company_relations.childCompanyId;\n      const directPercentage = parseFloat(relation.company_relations.ownershipPercentage) / 100;\n      \n      if (childCompanyId === targetCompanyId) {\n        // Direct ownership found\n        totalOwnership += directPercentage;\n      } else {\n        // Recursive ownership through this child\n        const indirectOwnership = this.calculateOwnershipFromRoot(childCompanyId, targetCompanyId, relations);\n        totalOwnership += directPercentage * indirectOwnership;\n      }\n    }\n\n    return totalOwnership;\n  }\n\n  async deleteUser(id: string, organizationId: string): Promise<void> {\n    const [user] = await db\n      .select({ organizationId: users.organizationId })\n      .from(users)\n      .where(eq(users.id, id));\n    \n    if (!user || user.organizationId !== organizationId) {\n      throw new Error(\"Bruger ikke fundet\");\n    }\n    \n    await db\n      .delete(users)\n      .where(eq(users.id, id));\n  }\n\n  // Tenant methods implementation\n  async getTenants(organizationId: string): Promise<Tenant[]> {\n    return await db\n      .select()\n      .from(tenants)\n      .where(eq(tenants.organizationId, organizationId))\n      .orderBy(tenants.internalNumber);\n  }\n\n  async getTenant(id: string, organizationId: string): Promise<Tenant | undefined> {\n    const [tenant] = await db\n      .select()\n      .from(tenants)\n      .where(and(eq(tenants.id, id), eq(tenants.organizationId, organizationId)));\n    \n    return tenant;\n  }\n\n  async createTenant(tenant: InsertTenant & { organizationId: string }): Promise<Tenant> {\n    // Generate next internal number (starts at 1001)\n    const lastTenant = await db\n      .select({ internalNumber: tenants.internalNumber })\n      .from(tenants)\n      .where(eq(tenants.organizationId, tenant.organizationId))\n      .orderBy(desc(tenants.internalNumber))\n      .limit(1);\n\n    const nextInternalNumber = lastTenant.length > 0 ? lastTenant[0].internalNumber + 1 : 1001;\n\n    const [newTenant] = await db\n      .insert(tenants)\n      .values({\n        ...tenant,\n        internalNumber: nextInternalNumber,\n      })\n      .returning();\n\n    return newTenant;\n  }\n\n  async updateTenant(id: string, organizationId: string, updates: Partial<InsertTenant>): Promise<Tenant> {\n    const [updatedTenant] = await db\n      .update(tenants)\n      .set(updates)\n      .where(and(eq(tenants.id, id), eq(tenants.organizationId, organizationId)))\n      .returning();\n\n    if (!updatedTenant) {\n      throw new Error(\"Lejer ikke fundet\");\n    }\n\n    return updatedTenant;\n  }\n\n  async deleteTenant(id: string, organizationId: string): Promise<void> {\n    const result = await db\n      .delete(tenants)\n      .where(and(eq(tenants.id, id), eq(tenants.organizationId, organizationId)));\n    \n    if (result.rowCount === 0) {\n      throw new Error(\"Lejer ikke fundet\");\n    }\n  }\n\n  // createLeaseTenant method with proper type conversion\n\n  async createLeaseTenant(leaseTenant: InsertLeaseTenant & { organizationId: string }): Promise<LeaseTenant> {\n    // Check for overlapping periods\n    const existingTenants = await db\n      .select()\n      .from(leaseTenants)\n      .where(eq(leaseTenants.leaseId, leaseTenant.leaseId));\n\n    const newStart = new Date(leaseTenant.periodStart);\n    const newEnd = leaseTenant.periodEnd ? new Date(leaseTenant.periodEnd) : null;\n\n    for (const existing of existingTenants) {\n      const existingStart = new Date(existing.periodStart);\n      const existingEnd = existing.periodEnd ? new Date(existing.periodEnd) : null;\n\n      // Check for overlap\n      const startOverlap = newStart <= (existingEnd || new Date('2099-12-31'));\n      const endOverlap = (newEnd || new Date('2099-12-31')) >= existingStart;\n      \n      if (startOverlap && endOverlap) {\n        throw new Error(\"Lejeperioden overlapper med en eksisterende kontrakt\");\n      }\n    }\n\n    // Check for active tenant (only one active at a time)\n    const today = new Date();\n    const isCurrentContract = newStart <= today && (!newEnd || newEnd >= today);\n    \n    if (isCurrentContract) {\n      const activeTenants = existingTenants.filter(tenant => {\n        const start = new Date(tenant.periodStart);\n        const end = tenant.periodEnd ? new Date(tenant.periodEnd) : null;\n        return start <= today && (!end || end >= today);\n      });\n\n      if (activeTenants.length > 0) {\n        throw new Error(\"Der er allerede en aktiv lejer for dette lejemål\");\n      }\n    }\n\n    const leaseTenantData = {\n      ...leaseTenant,\n      rentAmount: leaseTenant.rentAmount.toString(),\n      advanceWater: leaseTenant.advanceWater?.toString() || null,\n      advanceHeating: leaseTenant.advanceHeating?.toString() || null,\n      advanceElectricity: leaseTenant.advanceElectricity?.toString() || null,\n      advanceOther: leaseTenant.advanceOther?.toString() || null,\n      depositAmount: leaseTenant.depositAmount?.toString() || null,\n      prepaidAmount: leaseTenant.prepaidAmount?.toString() || null,\n    };\n\n    const [newLeaseTenant] = await db\n      .insert(leaseTenants)\n      .values(leaseTenantData)\n      .returning();\n\n    return newLeaseTenant;\n  }\n\n  async updateLeaseTenant(id: string, organizationId: string, updates: Partial<InsertLeaseTenant>): Promise<LeaseTenant> {\n    const updateData = {\n      ...updates,\n      rentAmount: updates.rentAmount ? updates.rentAmount.toString() : undefined,\n      advanceWater: updates.advanceWater ? updates.advanceWater.toString() : undefined,\n      advanceHeating: updates.advanceHeating ? updates.advanceHeating.toString() : undefined,\n      advanceElectricity: updates.advanceElectricity ? updates.advanceElectricity.toString() : undefined,\n      advanceOther: updates.advanceOther ? updates.advanceOther.toString() : undefined,\n      depositAmount: updates.depositAmount ? updates.depositAmount.toString() : undefined,\n      prepaidAmount: updates.prepaidAmount ? updates.prepaidAmount.toString() : undefined,\n    };\n    \n    const [updatedLeaseTenant] = await db\n      .update(leaseTenants)\n      .set(updateData)\n      .where(and(eq(leaseTenants.id, id), eq(leaseTenants.organizationId, organizationId)))\n      .returning();\n\n    if (!updatedLeaseTenant) {\n      throw new Error(\"Lejekontrakt ikke fundet\");\n    }\n\n    return updatedLeaseTenant;\n  }\n\n  async deleteLeaseTenant(id: string, organizationId: string): Promise<void> {\n    const result = await db\n      .delete(leaseTenants)\n      .where(and(eq(leaseTenants.id, id), eq(leaseTenants.organizationId, organizationId)));\n    \n    if (result.rowCount === 0) {\n      throw new Error(\"Lejekontrakt ikke fundet\");\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":41312},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, date, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const organizations = pgTable(\"organizations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  role: text(\"role\", { enum: [\"admin\", \"user\", \"broker\"] }).notNull().default(\"user\"),\n  assignedCompanyId: varchar(\"assigned_company_id\").references(() => companies.id, { onDelete: \"set null\" }),\n  dashboardViewMode: text(\"dashboard_view_mode\", { enum: [\"total\", \"weighted\"] }).notNull().default(\"weighted\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const companies = pgTable(\"companies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  cvrNumber: integer(\"cvr_number\"),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const companyRelations = pgTable(\"company_relations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  parentCompanyId: varchar(\"parent_company_id\").notNull().references(() => companies.id, { onDelete: \"cascade\" }),\n  childCompanyId: varchar(\"child_company_id\").notNull().references(() => companies.id, { onDelete: \"cascade\" }),\n  ownershipPercentage: decimal(\"ownership_percentage\", { precision: 5, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User invitations table for pending user invites\nexport const userInvitations = pgTable(\"user_invitations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  invitedBy: varchar(\"invited_by\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  assignedCompanyId: varchar(\"assigned_company_id\").references(() => companies.id, { onDelete: \"set null\" }),\n  role: text(\"role\", { enum: [\"admin\", \"user\", \"broker\"] }).notNull().default(\"user\"),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const properties = pgTable(\"properties\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  postalCode: text(\"postal_code\").notNull(),\n  city: text(\"city\").notNull(),\n  acquisitionPrice: decimal(\"acquisition_price\", { precision: 12, scale: 2 }).notNull(),\n  acquisitionDate: date(\"acquisition_date\"),\n  propertyType: text(\"property_type\").notNull(), // 'ejerlejlighed' | 'samlet_fast_ejendom'\n  shareNumerator: integer(\"share_numerator\"),\n  shareDenominator: integer(\"share_denominator\"),\n  ownerCompanyId: varchar(\"owner_company_id\").references(() => companies.id, { onDelete: \"set null\" }),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tenants (Lejere)\nexport const tenants = pgTable(\"tenants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  internalNumber: integer(\"internal_number\").notNull().unique(), // Auto-incrementing from 1001\n  name: text(\"name\").notNull(),\n  type: text(\"type\", { enum: [\"privat\", \"erhverv\"] }).notNull(),\n  cvrNumber: text(\"cvr_number\"), // Only for \"erhverv\"\n  contactPerson: text(\"contact_person\"), // Only for \"erhverv\"\n  email: text(\"email\").notNull(),\n  invoiceEmail: text(\"invoice_email\"), // Optional\n  phone: text(\"phone\").notNull(),\n  notes: text(\"notes\"), // Optional\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Leases (Lejemål)\nexport const leases = pgTable(\"leases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  propertyId: varchar(\"property_id\").notNull().references(() => properties.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(), // e.g. \"Vesterbrogade 97, 3.th\"\n  registeredArea: integer(\"registered_area\").notNull(), // tinglyst_areal (heltal)\n  totalArea: integer(\"total_area\").notNull(), // samlet_areal (heltal)\n  vatRegistered: boolean(\"vat_registered\").notNull().default(false), // momsregisteret\n  type: text(\"type\", { \n    enum: [\"Bolig\", \"Detail\", \"Kontor\", \"Lager\", \"Garage\", \"Industri\"] \n  }).notNull().default(\"Bolig\"),\n  maxRentPerSqm: decimal(\"max_rent_per_sqm\", { precision: 8, scale: 2 }), // max_leje_pr_m2\n  yieldRequirementPct: decimal(\"yield_requirement_pct\", { precision: 5, scale: 2 }), // afkastkrav_pct\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Lease Tenants (relation between leases and tenants with contract details)\nexport const leaseTenants = pgTable(\"lease_tenants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  leaseId: varchar(\"lease_id\").notNull().references(() => leases.id, { onDelete: \"cascade\" }),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id, { onDelete: \"cascade\" }),\n  rentAmount: decimal(\"rent_amount\", { precision: 10, scale: 2 }).notNull(), // leje_beloeb\n  advanceWater: decimal(\"advance_water\", { precision: 8, scale: 2 }), // aconto_vand (optional)\n  advanceHeating: decimal(\"advance_heating\", { precision: 8, scale: 2 }), // aconto_varme (optional)\n  advanceElectricity: decimal(\"advance_electricity\", { precision: 8, scale: 2 }), // aconto_el (optional)\n  advanceOther: decimal(\"advance_other\", { precision: 8, scale: 2 }), // aconto_oevrig (optional)\n  periodStart: date(\"period_start\").notNull(), // periode_start\n  periodEnd: date(\"period_end\"), // periode_slut (optional)\n  depositType: text(\"deposit_type\", { \n    enum: [\"none\", \"1_month\", \"2_months\", \"3_months\", \"4_months\", \"5_months\", \"6_months\", \"amount\"] \n  }).notNull().default(\"none\"), // depositum_type\n  depositAmount: decimal(\"deposit_amount\", { precision: 10, scale: 2 }), // depositum_beloeb\n  prepaidType: text(\"prepaid_type\", { \n    enum: [\"none\", \"1_month\", \"2_months\", \"3_months\", \"4_months\", \"5_months\", \"6_months\", \"amount\"] \n  }).notNull().default(\"none\"), // forudbetalt_type\n  prepaidAmount: decimal(\"prepaid_amount\", { precision: 10, scale: 2 }), // forudbetalt_beloeb\n  regulationType: text(\"regulation_type\", { \n    enum: [\"none\", \"NPI\", \"NPI_min_1\", \"NPI_min_2\", \"NPI_min_3\"] \n  }).notNull().default(\"none\"), // regulering\n  note: text(\"note\"), // optional note\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertOrganizationSchema = createInsertSchema(organizations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  organizationId: true,\n  createdAt: true,\n});\n\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  organizationId: true,\n  createdAt: true,\n}).extend({\n  cvrNumber: z.coerce.number().int().min(10000000).max(99999999).optional().or(z.literal(null)),\n}).refine((data) => {\n  if (data.cvrNumber !== null && data.cvrNumber !== undefined) {\n    const cvrStr = data.cvrNumber.toString();\n    return cvrStr.length === 8;\n  }\n  return true;\n}, {\n  message: \"CVR-nummer skal være præcis 8 cifre\",\n  path: [\"cvrNumber\"],\n});\n\nexport const insertCompanyRelationSchema = createInsertSchema(companyRelations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserInvitationSchema = createInsertSchema(userInvitations).omit({\n  id: true,\n  token: true,\n  organizationId: true,\n  invitedBy: true,\n  expiresAt: true,\n  createdAt: true,\n});\n\nexport const userInviteSchema = z.object({\n  email: z.string().email(\"Ugyldig e-mail adresse\"),\n  role: z.enum([\"admin\", \"user\", \"broker\"], { required_error: \"Rolle skal vælges\" }),\n  assignedCompanyId: z.string().optional().or(z.literal(null)),\n});\n\nexport const insertPropertySchema = createInsertSchema(properties).omit({\n  id: true,\n  organizationId: true,\n  createdAt: true,\n}).extend({\n  postalCode: z.string().regex(/^\\d{4}$/, \"Postnummer skal være 4 cifre\"),\n  acquisitionPrice: z.coerce.number().min(0, \"Anskaffelsessum skal være 0 eller højere\"),\n  shareNumerator: z.coerce.number().int().min(1).optional(),\n  shareDenominator: z.coerce.number().int().min(1).optional(),\n  ownerCompanyId: z.string().optional().or(z.literal(null)),\n}).refine((data) => {\n  if (data.propertyType === 'ejerlejlighed') {\n    return data.shareNumerator && data.shareDenominator;\n  }\n  return true;\n}, {\n  message: \"Fordelingstal (tæller og nævner) er påkrævet for ejerlejligheder\",\n  path: [\"shareNumerator\"],\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Ugyldig e-mail adresse\"),\n  password: z.string().min(1, \"Adgangskode påkrævet\"),\n});\n\nexport const setupSchema = insertUserSchema.extend({\n  organizationName: z.string().min(1, \"Virksomhedsnavn påkrævet\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Adgangskoder stemmer ikke overens\",\n  path: [\"confirmPassword\"],\n});\n\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Nuværende adgangskode påkrævet\"),\n  newPassword: z.string().min(8, \"Ny adgangskode skal være mindst 8 tegn\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Nye adgangskoder stemmer ikke overens\",\n  path: [\"confirmPassword\"],\n});\n\n// Helper function to parse Danish decimal format\nconst danishDecimal = () => z.string().optional().transform((val) => {\n  if (!val) return undefined;\n  // Convert Danish comma to English decimal point\n  const normalized = val.replace(',', '.');\n  const parsed = parseFloat(normalized);\n  if (isNaN(parsed)) return undefined;\n  return parsed;\n});\n\nexport const insertLeaseSchema = createInsertSchema(leases).omit({\n  id: true,\n  organizationId: true,\n  createdAt: true,\n}).extend({\n  registeredArea: z.coerce.number().int().min(0, \"Tinglyst areal skal være 0 eller højere\"),\n  totalArea: z.coerce.number().int().min(0, \"Samlet areal skal være 0 eller højere\"),\n  maxRentPerSqm: z.coerce.number().min(0, \"Max leje pr. m² skal være 0 eller højere\").optional(),\n  yieldRequirementPct: z.coerce.number().min(0, \"Afkastkrav skal være 0 eller højere\").optional(),\n});\n\nexport const insertLeaseTenantSchema = createInsertSchema(leaseTenants).omit({\n  id: true,\n  organizationId: true,\n  createdAt: true,\n}).extend({\n  periodEnd: z.union([z.string(), z.null()]).optional().transform((val) => {\n    if (val === null || val === undefined || val === \"\") return null;\n    return val;\n  }),\n  rentAmount: z.coerce.number().min(0, \"Lejebeløb skal være 0 eller højere\"),\n  advanceWater: z.union([z.string(), z.number(), z.null()]).optional().transform((val) => {\n    if (val === null || val === undefined || val === \"\" || val === \"0\" || val === 0) return null;\n    const num = typeof val === 'string' ? parseFloat(val.replace(',', '.')) : val;\n    return isNaN(num) ? null : num;\n  }),\n  advanceHeating: z.union([z.string(), z.number(), z.null()]).optional().transform((val) => {\n    if (val === null || val === undefined || val === \"\" || val === \"0\" || val === 0) return null;\n    const num = typeof val === 'string' ? parseFloat(val.replace(',', '.')) : val;\n    return isNaN(num) ? null : num;\n  }),\n  advanceElectricity: z.union([z.string(), z.number(), z.null()]).optional().transform((val) => {\n    if (val === null || val === undefined || val === \"\" || val === \"0\" || val === 0) return null;\n    const num = typeof val === 'string' ? parseFloat(val.replace(',', '.')) : val;\n    return isNaN(num) ? null : num;\n  }),\n  advanceOther: z.union([z.string(), z.number(), z.null()]).optional().transform((val) => {\n    if (val === null || val === undefined || val === \"\" || val === \"0\" || val === 0) return null;\n    const num = typeof val === 'string' ? parseFloat(val.replace(',', '.')) : val;\n    return isNaN(num) ? null : num;\n  }),\n  depositAmount: z.union([z.string(), z.number(), z.null()]).optional().transform((val) => {\n    if (val === null || val === undefined || val === \"\" || val === \"0\" || val === 0) return null;\n    const num = typeof val === 'string' ? parseFloat(val.replace(',', '.')) : val;\n    return isNaN(num) ? null : num;\n  }),\n  prepaidAmount: z.union([z.string(), z.number(), z.null()]).optional().transform((val) => {\n    if (val === null || val === undefined || val === \"\" || val === \"0\" || val === 0) return null;\n    const num = typeof val === 'string' ? parseFloat(val.replace(',', '.')) : val;\n    return isNaN(num) ? null : num;\n  }),\n}).refine((data) => {\n  if (data.periodEnd && data.periodEnd !== \"\" && data.periodStart) {\n    return new Date(data.periodEnd) >= new Date(data.periodStart);\n  }\n  return true;\n}, {\n  message: \"Slutdato skal være efter eller lig med startdato\",\n  path: [\"periodEnd\"],\n});\n\nexport const insertTenantSchema = createInsertSchema(tenants).omit({\n  id: true,\n  internalNumber: true,\n  organizationId: true,\n  createdAt: true,\n});\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type Property = typeof properties.$inferSelect;\nexport type Organization = typeof organizations.$inferSelect;\nexport type Company = typeof companies.$inferSelect;\nexport type CompanyRelation = typeof companyRelations.$inferSelect;\nexport type UserInvitation = typeof userInvitations.$inferSelect;\nexport type Tenant = typeof tenants.$inferSelect;\nexport type Lease = typeof leases.$inferSelect;\nexport type LeaseTenant = typeof leaseTenants.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertProperty = z.infer<typeof insertPropertySchema>;\nexport type InsertOrganization = z.infer<typeof insertOrganizationSchema>;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type InsertTenant = z.infer<typeof insertTenantSchema>;\nexport type InsertCompanyRelation = z.infer<typeof insertCompanyRelationSchema>;\nexport type InsertUserInvitation = z.infer<typeof insertUserInvitationSchema>;\nexport type InsertLease = z.infer<typeof insertLeaseSchema>;\nexport type InsertLeaseTenant = z.infer<typeof insertLeaseTenantSchema>;\nexport type UserInviteData = z.infer<typeof userInviteSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type SetupData = z.infer<typeof setupSchema>;\nexport type ChangePasswordData = z.infer<typeof changePasswordSchema>;\n","size_bytes":15265},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"./hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Setup from \"@/pages/setup\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Properties from \"@/pages/properties\";\nimport PropertyDetail from \"@/pages/property-detail\";\nimport Profile from \"@/pages/profile\";\nimport Companies from \"@/pages/companies\";\nimport Users from \"@/pages/users\";\nimport Leases from \"@/pages/leases\";\nimport LeaseDetail from \"@/pages/lease-detail\";\nimport Tenants from \"@/pages/Tenants\";\nimport Invitation from \"@/pages/invitation\";\nimport AppLayout from \"@/components/layout/AppLayout\";\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const { user, loading } = useAuth();\n  \n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n  \n  if (!user) {\n    return <Login />;\n  }\n  \n  return (\n    <AppLayout>\n      <Component />\n    </AppLayout>\n  );\n}\n\nfunction Router() {\n  const { user, loading } = useAuth();\n  \n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n  \n  // In multi-tenant mode, always allow access to setup page\n  return (\n    <Switch>\n      <Route path=\"/setup\" component={Setup} />\n      <Route path=\"/invitation\" component={Invitation} />\n      <Route path=\"/\" component={() => <ProtectedRoute component={Dashboard} />} />\n      <Route path=\"/dashboard\" component={() => <ProtectedRoute component={Dashboard} />} />\n      <Route path=\"/properties\" component={() => <ProtectedRoute component={Properties} />} />\n      <Route path=\"/properties/:id\" component={() => <ProtectedRoute component={PropertyDetail} />} />\n      <Route path=\"/leases\" component={() => <ProtectedRoute component={Leases} />} />\n      <Route path=\"/leases/:id\" component={() => <ProtectedRoute component={LeaseDetail} />} />\n      <Route path=\"/tenants\" component={() => <ProtectedRoute component={Tenants} />} />\n      <Route path=\"/companies\" component={() => <ProtectedRoute component={Companies} />} />\n      <Route path=\"/users\" component={() => <ProtectedRoute component={Users} />} />\n      <Route path=\"/profile\" component={() => <ProtectedRoute component={Profile} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3096},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 94%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(217.2 91.2% 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 94%);\n  --sidebar-accent-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n  --sidebar: hsl(222.2 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-accent: hsl(217.2 32.6% 17.5%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217.2 32.6% 17.5%);\n  --sidebar-ring: hsl(217.2 91.2% 59.8%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":2962},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  setupNeeded: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const queryClient = useQueryClient();\n  const [setupNeeded, setSetupNeeded] = useState(false);\n  const [authInitialized, setAuthInitialized] = useState(false);\n\n  // Check if setup is needed\n  const { data: setupCheck, isLoading: setupLoading } = useQuery<{ needed: boolean }>({\n    queryKey: [\"/api/setup/needed\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchOnReconnect: false,\n  });\n\n  // Get current user - try to get user when not in setup mode\n  const { data: user, isLoading: userLoading, error: userError } = useQuery<User>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    enabled: !setupLoading && setupCheck !== undefined,\n    refetchOnWindowFocus: false,\n  });\n\n  useEffect(() => {\n    if (setupCheck !== undefined) {\n      setSetupNeeded(setupCheck.needed);\n    }\n  }, [setupCheck]);\n\n  useEffect(() => {\n    // Mark auth as initialized once we've attempted to get the user or confirmed setup is needed\n    if ((user !== undefined || userError !== null || setupCheck?.needed) && !authInitialized) {\n      setAuthInitialized(true);\n    }\n  }, [user, userError, setupCheck, authInitialized]);\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ email, password }: { email: string; password: string }) => {\n      await apiRequest(\"/api/auth/login\", \"POST\", { email, password });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      window.location.href = \"/dashboard\";\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"/api/auth/logout\", \"POST\");\n    },\n    onSuccess: () => {\n      queryClient.clear();\n      window.location.href = \"/\";\n    },\n  });\n\n  const login = async (email: string, password: string) => {\n    await loginMutation.mutateAsync({ email, password });\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  const loading = setupLoading || (userLoading && !authInitialized) || loginMutation.isPending || logoutMutation.isPending;\n\n  return (\n    <AuthContext.Provider value={{\n      user: user || null,\n      loading,\n      setupNeeded,\n      login,\n      logout,\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3035},"client/src/lib/auth.ts":{"content":"export function getInitials(name: string): string {\n  return name\n    .split(' ')\n    .map(part => part.charAt(0).toUpperCase())\n    .slice(0, 2)\n    .join('');\n}\n\nexport function formatCurrency(amount: number | string): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('da-DK', {\n    style: 'currency',\n    currency: 'DKK',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(numAmount);\n}\n\nexport function formatDate(date: string | null): string {\n  if (!date) return '';\n  \n  return new Intl.DateTimeFormat('da-DK', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n  }).format(new Date(date));\n}\n\nexport function formatPropertyType(type: string): string {\n  switch (type) {\n    case 'ejerlejlighed':\n      return 'Ejerlejlighed';\n    case 'samlet_fast_ejendom':\n      return 'Samlet Fast Ejendom';\n    default:\n      return type;\n  }\n}\n\nexport function formatShareDisplay(numerator?: number | null, denominator?: number | null): string {\n  if (numerator && denominator) {\n    return `${numerator} af ${denominator}`;\n  }\n  return '';\n}\n","size_bytes":1141},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    try {\n      const errorData = await res.json();\n      throw new Error(errorData.message || res.statusText);\n    } catch (e) {\n      const text = await res.text() || res.statusText;\n      throw new Error(text);\n    }\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<any> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1503},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(amount: string | number): string {\n  const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('da-DK', {\n    style: 'currency',\n    currency: 'DKK',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(num);\n}\n\nexport function formatNumber(num: string | number): string {\n  const number = typeof num === 'string' ? parseFloat(num) : num;\n  return new Intl.NumberFormat('da-DK').format(number);\n}\n\nexport function formatPropertyType(type: string): string {\n  switch (type) {\n    case 'ejerlejlighed':\n      return 'Ejerlejlighed';\n    case 'samlet_fast_ejendom':\n      return 'Samlet Fast Ejendom';\n    case 'apartment':\n      return 'Ejerlejlighed';\n    case 'house':\n      return 'Hus';\n    case 'commercial':\n      return 'Erhverv';\n    case 'other':\n      return 'Andet';\n    default:\n      return type;\n  }\n}\n\nexport function formatDate(dateString: string | Date): string {\n  const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\n  return new Intl.DateTimeFormat('da-DK', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  }).format(date);\n}\n\nexport function formatDateTime(dateString: string | Date): string {\n  const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\n  return new Intl.DateTimeFormat('da-DK', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  }).format(date);\n}\n\nexport function formatShareDisplay(numerator: number | null, denominator: number | null): string {\n  if (!numerator || !denominator) {\n    return 'Ikke angivet';\n  }\n  return `${numerator}/${denominator}`;\n}\n","size_bytes":1878},"client/src/pages/dashboard.tsx":{"content":"import Dashboard from \"@/components/dashboard/Dashboard\";\n\nexport default function DashboardPage() {\n  return <Dashboard />;\n}\n","size_bytes":127},"client/src/pages/login.tsx":{"content":"import LoginForm from \"@/components/auth/LoginForm\";\n\nexport default function LoginPage() {\n  return <LoginForm />;\n}\n","size_bytes":118},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport ProfileForm from \"@/components/profile/ProfileForm\";\nimport ChangePasswordForm from \"@/components/profile/ChangePasswordForm\";\n\nexport default function ProfilePage() {\n  const [location] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"profile\");\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(location.split('?')[1]);\n    const tab = urlParams.get('tab');\n    if (tab === 'password') {\n      setActiveTab('password');\n    }\n  }, [location]);\n\n  return (\n    <div className=\"max-w-2xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-semibold text-gray-900\">Min profil</h1>\n        <p className=\"text-gray-600 mt-1\">Administrer dine brugeroplysninger</p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">Profil</TabsTrigger>\n          <TabsTrigger value=\"password\" data-testid=\"tab-password\">Adgangskode</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"profile\" className=\"mt-6\">\n          <ProfileForm />\n        </TabsContent>\n        \n        <TabsContent value=\"password\" className=\"mt-6\">\n          <div className=\"mb-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Skift adgangskode</h2>\n            <p className=\"text-gray-600 mt-1\">Opdater din adgangskode for øget sikkerhed</p>\n          </div>\n          <ChangePasswordForm />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":1700},"client/src/pages/properties.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport PropertyList from \"@/components/properties/PropertyList\";\nimport PropertyForm from \"@/components/properties/PropertyForm\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function PropertiesPage() {\n  const { user } = useAuth();\n  const [showForm, setShowForm] = useState(false);\n  const canWrite = user?.role === 'admin' || user?.role === 'user';\n\n  const handleCreateProperty = () => {\n    setShowForm(true);\n  };\n\n  return (\n    <>\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Ejendomme</h1>\n          <p className=\"text-gray-600 mt-1\">\n            {canWrite ? \"Administrer og overvåg dine ejendomme\" : \"Se oversigt over ejendomme\"}\n          </p>\n        </div>\n        {canWrite && (\n          <Button onClick={handleCreateProperty} data-testid=\"button-create-property\">\n            <Plus className=\"mr-2\" size={16} />\n            Opret ejendom\n          </Button>\n        )}\n      </div>\n\n      <PropertyList />\n\n      <PropertyForm\n        isOpen={showForm}\n        onClose={() => setShowForm(false)}\n      />\n    </>\n  );\n}\n","size_bytes":1266},"client/src/pages/property-detail.tsx":{"content":"import PropertyDetail from \"@/components/properties/PropertyDetail\";\n\nexport default function PropertyDetailPage() {\n  return <PropertyDetail />;\n}\n","size_bytes":148},"client/src/pages/setup.tsx":{"content":"import { AuthProvider } from \"@/hooks/useAuth\";\nimport SetupWizard from \"@/components/auth/SetupWizard\";\n\nexport default function SetupPage() {\n  return (\n    <AuthProvider>\n      <SetupWizard />\n    </AuthProvider>\n  );\n}\n","size_bytes":223},"client/src/components/auth/LoginForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema, type LoginData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Logo } from \"../ui/logo\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function LoginForm() {\n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const [rememberMe, setRememberMe] = useState(false);\n  \n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  // Load saved credentials on component mount\n  useEffect(() => {\n    const savedEmail = localStorage.getItem('doorway_email');\n    const savedPassword = localStorage.getItem('doorway_password');\n    if (savedEmail && savedPassword) {\n      form.setValue('email', savedEmail);\n      form.setValue('password', savedPassword);\n      setRememberMe(true);\n    }\n  }, [form]);\n\n  const onSubmit = async (data: LoginData) => {\n    try {\n      // Save credentials if remember me is checked\n      if (rememberMe) {\n        localStorage.setItem('doorway_email', data.email);\n        localStorage.setItem('doorway_password', data.password);\n      } else {\n        localStorage.removeItem('doorway_email');\n        localStorage.removeItem('doorway_password');\n      }\n      \n      await login(data.email, data.password);\n    } catch (error: any) {\n      const message = error.message?.includes(\"401\") || error.message?.includes(\"Ugyldig\") \n        ? \"Ugyldig e-mail eller adgangskode\" \n        : error.message || \"Der opstod en fejl ved login\";\n      \n      toast({\n        title: \"Login fejl\",\n        description: message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCreateAccount = () => {\n    setLocation('/setup');\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      <div className=\"max-w-md w-full mx-4\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <Logo size=\"lg\" />\n          </div>\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Log ind på Doorway</h1>\n          <p className=\"text-gray-600 mt-2\">Administrer dine ejendomme</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Log ind</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"email\">E-mail adresse</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"din@email.dk\"\n                  {...form.register(\"email\")}\n                  data-testid=\"input-email\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-email\">\n                    {form.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Adgangskode</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Din adgangskode\"\n                  {...form.register(\"password\")}\n                  data-testid=\"input-password\"\n                />\n                {form.formState.errors.password && (\n                  <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-password\">\n                    {form.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"remember\" \n                  checked={rememberMe}\n                  onCheckedChange={(checked) => setRememberMe(checked === true)}\n                  data-testid=\"checkbox-remember\"\n                />\n                <Label htmlFor=\"remember\" className=\"text-sm\">\n                  Husk mig\n                </Label>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\"\n                disabled={form.formState.isSubmitting}\n                data-testid=\"button-login\"\n              >\n                {form.formState.isSubmitting ? \"Logger ind...\" : \"Log ind\"}\n              </Button>\n\n              <div className=\"text-center\">\n                <Button \n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={handleCreateAccount}\n                  data-testid=\"button-create-account\"\n                >\n                  Opret konto\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5256},"client/src/components/auth/SetupWizard.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { setupSchema, type SetupData } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Logo } from \"../ui/logo\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function SetupWizard() {\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  \n  // Check if setup is still needed\n  const { data: setupCheck, isLoading: setupLoading } = useQuery<{ needed: boolean }>({\n    queryKey: [\"/api/setup/needed\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n  \n  const form = useForm<SetupData>({\n    resolver: zodResolver(setupSchema),\n    defaultValues: {\n      organizationName: \"\",\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const setupMutation = useMutation({\n    mutationFn: async (data: SetupData) => {\n      await apiRequest(\"/api/setup\", \"POST\", data);\n    },\n    onSuccess: () => {\n      // Clear all auth-related queries to refresh the app state\n      queryClient.invalidateQueries({ queryKey: [\"/api/setup/needed\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/auth/me\"] });\n      \n      toast({\n        title: \"Velkommen til Doorway!\",\n        description: \"Din virksomhed og administrator er oprettet\",\n      });\n      \n      // Force a small delay to ensure queries are updated before redirect\n      setTimeout(() => {\n        setLocation(\"/dashboard\");\n      }, 100);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl under opsætningen\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SetupData) => {\n    setupMutation.mutate(data);\n  };\n\n  const handleBackToLogin = () => {\n    setLocation('/');\n  };\n\n  // Show loading while checking setup status\n  if (setupLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Multi-tenant system - always allow new organizations\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      <div className=\"max-w-md w-full mx-4\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <Logo size=\"lg\" />\n          </div>\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Velkommen til Doorway</h1>\n          <p className=\"text-gray-600 mt-2\">Opret din virksomhed og administrator for at komme i gang</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Opret virksomhed</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"organizationName\">Virksomhedsnavn *</Label>\n                <Input\n                  id=\"organizationName\"\n                  type=\"text\"\n                  placeholder=\"Din virksomheds navn\"\n                  {...form.register(\"organizationName\")}\n                  data-testid=\"input-organization-name\"\n                />\n                {form.formState.errors.organizationName && (\n                  <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-organization-name\">\n                    {form.formState.errors.organizationName.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"name\">Fulde navn *</Label>\n                <Input\n                  id=\"name\"\n                  type=\"text\"\n                  placeholder=\"Dit fulde navn\"\n                  {...form.register(\"name\")}\n                  data-testid=\"input-name\"\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-name\">\n                    {form.formState.errors.name.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\">E-mail adresse *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"din@email.dk\"\n                  {...form.register(\"email\")}\n                  data-testid=\"input-email\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-email\">\n                    {form.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Adgangskode *</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Minimum 8 tegn\"\n                  {...form.register(\"password\")}\n                  data-testid=\"input-password\"\n                />\n                {form.formState.errors.password && (\n                  <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-password\">\n                    {form.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\">Bekræft adgangskode *</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  placeholder=\"Gentag adgangskode\"\n                  {...form.register(\"confirmPassword\")}\n                  data-testid=\"input-confirm-password\"\n                />\n                {form.formState.errors.confirmPassword && (\n                  <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-confirm-password\">\n                    {form.formState.errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\"\n                disabled={setupMutation.isPending}\n                data-testid=\"button-create-admin\"\n              >\n                {setupMutation.isPending ? \"Opretter...\" : \"Opret portefølje\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6880},"client/src/components/dashboard/Dashboard.tsx":{"content":"import DashboardStats from \"./DashboardStats\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { Building, Plus, ToggleLeft, ToggleRight, Info } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport PropertyForm from \"../properties/PropertyForm\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { formatDateTime, formatDate, formatPropertyType } from \"@/lib/utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Property } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [showForm, setShowForm] = useState(false);\n  const queryClient = useQueryClient();\n\n  const { data: stats } = useQuery<{\n    count: number;\n    totalValue: string;\n    latestProperty: { name: string; acquisitionDate: string } | null;\n    leaseStats: { count: number; totalRentCapacity: string };\n  }>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: recentProperties } = useQuery<Property[]>({\n    queryKey: [\"/api/dashboard/recent\"],\n  });\n\n  const handleCreateFirstProperty = () => {\n    setShowForm(true);\n  };\n\n  const handleGoToProperties = () => {\n    setLocation(\"/properties\");\n  };\n\n  const toggleViewModeMutation = useMutation({\n    mutationFn: async (newMode: \"total\" | \"weighted\") => {\n      await apiRequest(\"/api/user/preferences\", \"PUT\", { dashboardViewMode: newMode });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Visningsform opdateret\",\n        description: user?.dashboardViewMode === \"total\" ? \"Viser nu vægtet andel\" : \"Viser nu total portefølje\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Kunne ikke opdatere visningsform\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggleViewMode = () => {\n    const newMode = user?.dashboardViewMode === \"total\" ? \"weighted\" : \"total\";\n    toggleViewModeMutation.mutate(newMode);\n  };\n\n  // Show empty state if no properties exist\n  if (stats && stats.count === 0) {\n    return (\n      <>\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Dashboard</h1>\n          <p className=\"text-gray-600 mt-1\">Oversigt over dine ejendomme og nøgletal</p>\n        </div>\n\n        <div className=\"text-center py-12\" data-testid=\"dashboard-empty-state\">\n          <div className=\"w-24 h-24 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-6\">\n            <Building className=\"text-gray-400 text-3xl\" size={48} />\n          </div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Ingen ejendomme endnu</h3>\n          <p className=\"text-gray-600 mb-6 max-w-sm mx-auto\">\n            Kom i gang ved at oprette din første ejendom og se dine nøgletal her.\n          </p>\n          <Button onClick={handleCreateFirstProperty} data-testid=\"button-create-first-property\">\n            <Plus className=\"mr-2\" size={16} />\n            Opret første ejendom\n          </Button>\n        </div>\n\n        <PropertyForm\n          isOpen={showForm}\n          onClose={() => setShowForm(false)}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"flex items-center space-x-3\">\n              <h1 className=\"text-2xl font-semibold text-gray-900\">Dashboard</h1>\n              {user?.role === \"broker\" && (\n                <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-800\">\n                  Mægler (læseadgang)\n                </Badge>\n              )}\n            </div>\n            <p className=\"text-gray-600 mt-1\">Oversigt over dine ejendomme og nøgletal</p>\n          </div>\n          \n{user?.role !== \"broker\" && (\n            <TooltipProvider>\n              <div className=\"flex items-center space-x-3\">\n                <span className={`text-sm ${user?.dashboardViewMode === \"total\" ? \"font-medium text-gray-900\" : \"text-gray-500\"}`}>\n                  Total portefølje\n                </span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleToggleViewMode}\n                  disabled={toggleViewModeMutation.isPending}\n                  data-testid=\"button-toggle-view-mode\"\n                  className=\"p-1\"\n                >\n                  {user?.dashboardViewMode === \"total\" ? (\n                    <ToggleLeft className=\"h-6 w-6 text-gray-400\" />\n                  ) : (\n                    <ToggleRight className=\"h-6 w-6 text-blue-600\" />\n                  )}\n                </Button>\n                <span className={`text-sm ${user?.dashboardViewMode === \"weighted\" ? \"font-medium text-gray-900\" : \"text-gray-500\"}`}>\n                  Vægtet andel\n                </span>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"p-1\">\n                      <Info className=\"h-4 w-4 text-gray-400\" />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent className=\"max-w-xs\">\n                    <div className=\"space-y-2\">\n                      <p className=\"font-medium\">Forskel på visningstyper:</p>\n                      <div className=\"text-sm space-y-1\">\n                        <p><strong>Total portefølje:</strong> Viser alle ejendomme i koncernen</p>\n                        <p><strong>Vægtet andel:</strong> Viser din relative andel baseret på koncernens struktur og ejerandele</p>\n                      </div>\n                      {user && (\n                        <div className=\"text-xs text-gray-500 pt-1 border-t\">\n                          Du er logget ind som <strong>{user.name}</strong>\n                        </div>\n                      )}\n                    </div>\n                  </TooltipContent>\n                </Tooltip>\n              </div>\n            </TooltipProvider>\n          )}\n        </div>\n      </div>\n\n      <DashboardStats />\n      \n\n\n      <Card className=\"mt-8\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Seneste aktivitet</h2>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={handleGoToProperties}\n              data-testid=\"button-view-all-properties\"\n            >\n              Se alle ejendomme\n            </Button>\n          </div>\n        </div>\n        <CardContent className=\"p-0\">\n          {recentProperties && recentProperties.length > 0 ? (\n            <div className=\"space-y-0\">\n              {recentProperties.map((property, index) => (\n                <div \n                  key={property.id} \n                  className={`flex items-center space-x-4 p-6 ${\n                    index < recentProperties.length - 1 ? 'border-b border-gray-100' : ''\n                  }`}\n                  data-testid={`recent-property-${property.id}`}\n                >\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Plus className=\"text-blue-600 text-sm\" size={16} />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm text-gray-900\">\n                      <span className=\"font-medium\" data-testid={`text-property-name-${property.id}`}>\n                        {property.name}\n                      </span> blev anskaffet\n                    </p>\n                    <div className=\"flex items-center space-x-4 mt-1\">\n                      <p className=\"text-xs text-gray-500\" data-testid={`text-property-type-${property.id}`}>\n                        {formatPropertyType(property.propertyType)}\n                      </p>\n                      <p className=\"text-xs text-gray-500\" data-testid={`text-acquisition-date-${property.id}`}>\n                        {property.acquisitionDate ? formatDate(property.acquisitionDate) : 'Ukendt dato'}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"p-6\">\n              <p className=\"text-gray-500 text-sm\">Ingen aktivitet endnu</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n","size_bytes":9038},"client/src/components/dashboard/DashboardStats.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Building, TrendingUp, Clock, FileText, Square } from \"lucide-react\";\nimport { formatCurrency, formatDate, formatNumber } from \"@/lib/utils\";\n\nexport default function DashboardStats() {\n  const { data: stats, isLoading } = useQuery<{\n    count: number;\n    totalValue: string;\n    latestProperty: { name: string; acquisitionDate: string } | null;\n    leaseStats: { count: number; totalRentCapacity: string };\n  }>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n        {[1, 2, 3, 4, 5].map((i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\n                <div className=\"ml-4 space-y-2\">\n                  <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                  <div className=\"h-6 bg-gray-200 rounded w-16\"></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return null;\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n      {/* Property Count Card */}\n      <Card data-testid=\"card-property-count\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <Building className=\"text-blue-600\" size={24} />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Antal ejendomme</p>\n              <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-property-count\">\n                {stats.count}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Total Acquisition Value Card */}\n      <Card data-testid=\"card-total-value\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"text-green-600\" size={24} />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Total anskaffelsessum</p>\n              <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-total-value\">\n                {formatNumber(stats.totalValue)} kr\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Lease Count Card */}\n      <Card data-testid=\"card-lease-count\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n              <FileText className=\"text-orange-600\" size={24} />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Antal lejemål</p>\n              <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-lease-count\">\n                {stats.leaseStats?.count || 0}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Latest Property Card */}\n      <Card data-testid=\"card-latest-property\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n              <Clock className=\"text-purple-600\" size={24} />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Senest anskaffede</p>\n              {stats.latestProperty ? (\n                <>\n                  <p className=\"text-lg font-semibold text-gray-900\" data-testid=\"text-latest-property-name\">\n                    {stats.latestProperty.name}\n                  </p>\n                  <p className=\"text-sm text-gray-500\" data-testid=\"text-latest-property-date\">\n                    {formatDate(stats.latestProperty.acquisitionDate)}\n                  </p>\n                </>\n              ) : (\n                <p className=\"text-lg font-semibold text-gray-500\">-</p>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Total Area Card */}\n      <Card data-testid=\"card-total-area\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center\">\n              <Square className=\"text-indigo-600\" size={24} />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Antal m²</p>\n              <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-total-area\">\n                {formatNumber(stats.leaseStats?.totalRentCapacity || \"0\")} m²\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5324},"client/src/components/layout/AppLayout.tsx":{"content":"import TopBar from \"./TopBar\";\nimport Sidebar from \"./Sidebar\";\n\nexport default function AppLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <TopBar />\n      <Sidebar />\n      <main className=\"ml-60 mt-16 p-6\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":330},"client/src/components/layout/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Building2, Building, BarChart3, Users, FileText, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Logo } from \"../ui/logo\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: Home },\n  { name: \"Ejendomme\", href: \"/properties\", icon: Building2 },\n  { name: \"Lejemål\", href: \"/leases\", icon: FileText },\n  { name: \"Lejere\", href: \"/tenants\", icon: User },\n  { name: \"Koncern\", href: \"/companies\", icon: Building },\n  { name: \"Brugere\", href: \"/users\", icon: Users, adminOnly: true },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  return (\n    <div className=\"hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0 bg-white border-r border-gray-200\">\n      <div className=\"flex flex-col flex-grow pt-20 overflow-y-auto\">\n        <nav className=\"flex-1 px-4 pb-4 space-y-1\">\n          {navigation.filter(item => !item.adminOnly || user?.role === 'admin').map((item) => {\n            const isActive = location === item.href || \n              (item.href !== \"/dashboard\" && location.startsWith(item.href));\n            \n            return (\n              <Link \n                key={item.name} \n                href={item.href}\n                className={cn(\n                  \"group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors\",\n                  isActive \n                    ? \"bg-primary/10 text-primary border-r-2 border-primary\" \n                    : \"text-gray-600 hover:bg-gray-50 hover:text-gray-900\"\n                )}\n                data-testid={`nav-${item.name.toLowerCase()}`}\n              >\n                <item.icon\n                  className={cn(\n                    \"mr-3 h-5 w-5 flex-shrink-0\",\n                    isActive ? \"text-primary\" : \"text-gray-400 group-hover:text-gray-500\"\n                  )}\n                  aria-hidden=\"true\"\n                />\n                {item.name}\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n    </div>\n  );\n}","size_bytes":2147},"client/src/components/layout/TopBar.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { getInitials } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { User, Key, LogOut, ChevronDown } from \"lucide-react\";\nimport { Logo } from \"../ui/logo\";\nimport { useLocation } from \"wouter\";\nimport { toast } from \"@/hooks/use-toast\";\n\nexport default function TopBar() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"Success\",\n        description: \"Du er nu logget ud\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Fejl\",\n        description: \"Kunne ikke logge ud\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!user) return null;\n\n  return (\n    <header className=\"bg-white border-b border-gray-200 h-16 fixed top-0 left-0 right-0 z-30\">\n      <div className=\"flex items-center justify-between h-full px-6\">\n        {/* Logo */}\n        <Logo size=\"sm\" />\n\n        {/* Avatar Menu */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button \n              variant=\"ghost\" \n              className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n              data-testid=\"avatar-button\"\n            >\n              <Avatar className=\"w-8 h-8\">\n                <AvatarFallback className=\"bg-primary text-white text-sm font-medium\">\n                  {getInitials(user.name)}\n                </AvatarFallback>\n              </Avatar>\n              <span className=\"text-sm font-medium text-gray-700\">{user.name}</span>\n              <ChevronDown className=\"text-gray-400 text-xs\" size={12} />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-48\">\n            <DropdownMenuItem \n              onClick={() => setLocation(\"/profile\")}\n              className=\"flex items-center cursor-pointer\"\n              data-testid=\"menu-profile\"\n            >\n              <User className=\"w-4 mr-3 text-gray-400\" size={16} />\n              Min profil\n            </DropdownMenuItem>\n            <DropdownMenuItem \n              onClick={() => setLocation(\"/profile?tab=password\")}\n              className=\"flex items-center cursor-pointer\"\n              data-testid=\"menu-change-password\"\n            >\n              <Key className=\"w-4 mr-3 text-gray-400\" size={16} />\n              Skift adgangskode\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem \n              onClick={handleLogout}\n              className=\"flex items-center cursor-pointer text-red-600 hover:bg-red-50\"\n              data-testid=\"menu-logout\"\n            >\n              <LogOut className=\"w-4 mr-3\" size={16} />\n              Log ud\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3155},"client/src/components/profile/ChangePasswordForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { changePasswordSchema, type ChangePasswordData } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { toast } from \"@/hooks/use-toast\";\n\nexport default function ChangePasswordForm() {\n  const form = useForm<ChangePasswordData>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: ChangePasswordData) => {\n      await apiRequest(\"/api/user/change-password\", \"POST\", data);\n    },\n    onSuccess: () => {\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Adgangskode ændret\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ChangePasswordData) => {\n    changePasswordMutation.mutate(data);\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"currentPassword\">Nuværende adgangskode *</Label>\n            <Input\n              id=\"currentPassword\"\n              type=\"password\"\n              {...form.register(\"currentPassword\")}\n              data-testid=\"input-current-password\"\n            />\n            {form.formState.errors.currentPassword && (\n              <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-current-password\">\n                {form.formState.errors.currentPassword.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"newPassword\">Ny adgangskode *</Label>\n            <Input\n              id=\"newPassword\"\n              type=\"password\"\n              {...form.register(\"newPassword\")}\n              data-testid=\"input-new-password\"\n            />\n            {form.formState.errors.newPassword && (\n              <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-new-password\">\n                {form.formState.errors.newPassword.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"confirmPassword\">Bekræft ny adgangskode *</Label>\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              {...form.register(\"confirmPassword\")}\n              data-testid=\"input-confirm-password\"\n            />\n            {form.formState.errors.confirmPassword && (\n              <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-confirm-password\">\n                {form.formState.errors.confirmPassword.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-3 pt-6 border-t border-gray-200\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => form.reset()}\n              data-testid=\"button-reset-form\"\n            >\n              Annuller\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={changePasswordMutation.isPending}\n              data-testid=\"button-change-password\"\n            >\n              {changePasswordMutation.isPending ? \"Skifter...\" : \"Skift adgangskode\"}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3843},"client/src/components/profile/ProfileForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { toast } from \"@/hooks/use-toast\";\n\nconst profileSchema = z.object({\n  name: z.string().min(1, \"Navn påkrævet\"),\n  email: z.string().email(\"Ugyldig e-mail adresse\"),\n});\n\ntype ProfileData = z.infer<typeof profileSchema>;\n\nexport default function ProfileForm() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<ProfileData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      name: user?.name || \"\",\n      email: user?.email || \"\",\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: ProfileData) => {\n      await apiRequest(\"/api/user/profile\", \"PUT\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Success\",\n        description: \"Profil opdateret\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProfileData) => {\n    updateMutation.mutate(data);\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"name\">Navn *</Label>\n            <Input\n              id=\"name\"\n              type=\"text\"\n              {...form.register(\"name\")}\n              data-testid=\"input-name\"\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-name\">\n                {form.formState.errors.name.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\">E-mail *</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              {...form.register(\"email\")}\n              data-testid=\"input-email\"\n            />\n            {form.formState.errors.email && (\n              <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-email\">\n                {form.formState.errors.email.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex items-center justify-end pt-6 border-t border-gray-200\">\n            <Button \n              type=\"submit\" \n              disabled={updateMutation.isPending}\n              data-testid=\"button-save-profile\"\n            >\n              {updateMutation.isPending ? \"Gemmer...\" : \"Gem ændringer\"}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3097},"client/src/components/properties/PropertyDetail.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency, formatPropertyType, formatDate, formatShareDisplay, formatNumber } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { ArrowLeft, Edit2, Trash2, FileText, Building2, TrendingUp, Users, ExternalLink } from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { useState } from \"react\";\nimport PropertyForm from \"./PropertyForm\";\nimport { toast } from \"@/hooks/use-toast\";\nimport type { Property, Company, Lease, LeaseTenant } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function PropertyDetail() {\n  const { user } = useAuth();\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [showForm, setShowForm] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  \n  const isAdmin = user?.role === 'admin';\n\n  const { data: property, isLoading } = useQuery<Property>({\n    queryKey: [\"/api/properties\", id],\n    enabled: !!id,\n  });\n\n  const { data: ownerCompany } = useQuery<Company>({\n    queryKey: [\"/api/companies\", property?.ownerCompanyId],\n    enabled: !!property?.ownerCompanyId,\n  });\n\n  // Get leases for this property\n  const { data: propertyLeases = [] } = useQuery<(Lease & { property: Property })[]>({\n    queryKey: [\"/api/properties\", id, \"leases\"],\n    enabled: !!id,\n  });\n\n  // Get all lease-tenants for calculating occupancy\n  const { data: allLeaseTenants = [] } = useQuery<(LeaseTenant & { tenant: { name: string; internalNumber: number } })[]>({\n    queryKey: ['/api/all-lease-tenants'],\n    enabled: propertyLeases.length > 0,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(`/api/properties/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Ejendom slettet\",\n      });\n      setLocation(\"/properties\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = () => {\n    setShowForm(true);\n  };\n\n  const handleDelete = () => {\n    setShowDeleteDialog(true);\n  };\n\n  const confirmDelete = () => {\n    deleteMutation.mutate();\n    setShowDeleteDialog(false);\n  };\n\n  const handleBackToList = () => {\n    setLocation(\"/properties\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!property) {\n    return (\n      <div className=\"text-center py-12\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 mb-4\">Ejendom ikke fundet</h1>\n        <Button onClick={handleBackToList} data-testid=\"button-back-to-list\">\n          <ArrowLeft className=\"mr-2\" size={16} />\n          Tilbage til ejendomme\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"mb-6\">\n        <Button \n          variant=\"ghost\" \n          onClick={handleBackToList}\n          className=\"inline-flex items-center text-sm text-gray-600 hover:text-gray-900 mb-4\"\n          data-testid=\"button-back-to-list\"\n        >\n          <ArrowLeft className=\"mr-2\" size={16} />\n          Tilbage til ejendomme\n        </Button>\n        <h1 className=\"text-2xl font-semibold text-gray-900\">{property.name}</h1>\n        <p className=\"text-gray-600\">{property.address}, {property.postalCode} {property.city}</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Details */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Ejendomsoplysninger</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-500 mb-1\">Ejendomsnavn</label>\n                  <p className=\"text-gray-900\" data-testid=\"text-property-name\">{property.name}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-500 mb-1\">Ejendomstype</label>\n                  <span className=\"inline-flex px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full\" data-testid=\"text-property-type\">\n                    {formatPropertyType(property.propertyType)}\n                  </span>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-500 mb-1\">Adresse</label>\n                  <p className=\"text-gray-900\" data-testid=\"text-address\">{property.address}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-500 mb-1\">Postnummer og by</label>\n                  <p className=\"text-gray-900\" data-testid=\"text-postal-city\">\n                    {property.postalCode} {property.city}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-500 mb-1\">Størrelse</label>\n                  <p className=\"text-gray-900\" data-testid=\"text-total-size\">\n                    {(() => {\n                      const totalArea = propertyLeases.reduce((sum, lease) => {\n                        return sum + (parseFloat(lease.totalArea.toString()) || 0);\n                      }, 0);\n                      return `${formatNumber(totalArea.toString())} m²`;\n                    })()}\n                  </p>\n                </div>\n                {property.shareNumerator && property.shareDenominator && (\n                  <div className=\"md:col-span-2\">\n                    <label className=\"block text-sm font-medium text-gray-500 mb-1\">Fordelingstal</label>\n                    <p className=\"text-gray-900\" data-testid=\"text-share-display\">\n                      {formatShareDisplay(property.shareNumerator, property.shareDenominator)}\n                    </p>\n                  </div>\n                )}\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-500 mb-1\">Ejerselskab</label>\n                  <p className=\"text-gray-900\" data-testid=\"text-owner-company\">\n                    {ownerCompany ? (\n                      <span>\n                        {ownerCompany.name}\n                        {ownerCompany.cvrNumber && (\n                          <span className=\"text-gray-500 ml-2\">(CVR: {ownerCompany.cvrNumber})</span>\n                        )}\n                      </span>\n                    ) : (\n                      <span className=\"text-gray-500\">Intet selskab tilknyttet</span>\n                    )}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Financial Info */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Økonomiske oplysninger</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-500 mb-1\">Anskaffelsessum</label>\n                  <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-acquisition-price\">\n                    {formatNumber(property.acquisitionPrice)} kr\n                  </p>\n                </div>\n                {property.acquisitionDate && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-500 mb-1\">Anskaffelsesdato</label>\n                    <p className=\"text-gray-900\" data-testid=\"text-acquisition-date\">\n                      {formatDate(property.acquisitionDate)}\n                    </p>\n                  </div>\n                )}\n                {/* Total Deposits and Prepaid Rent */}\n                {propertyLeases.length > 0 && (\n                  <>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-500 mb-1\">Total depositum</label>\n                      <p className=\"text-gray-900\" data-testid=\"text-total-deposits\">\n                        {(() => {\n                          const totalDeposits = allLeaseTenants\n                            .filter(lt => \n                              propertyLeases.some(lease => lease.id === lt.leaseId) &&\n                              (!lt.periodEnd || new Date(lt.periodEnd) > new Date()) &&\n                              lt.depositType !== 'none'\n                            )\n                            .reduce((sum, lt) => sum + (parseFloat(lt.depositAmount || '0') || 0), 0);\n                          return `${formatNumber(totalDeposits.toString())} kr`;\n                        })()}\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-500 mb-1\">Total forudbetalt leje</label>\n                      <p className=\"text-gray-900\" data-testid=\"text-total-prepaid\">\n                        {(() => {\n                          const totalPrepaid = allLeaseTenants\n                            .filter(lt => \n                              propertyLeases.some(lease => lease.id === lt.leaseId) &&\n                              (!lt.periodEnd || new Date(lt.periodEnd) > new Date()) &&\n                              lt.prepaidType !== 'none'\n                            )\n                            .reduce((sum, lt) => sum + (parseFloat(lt.prepaidAmount || '0') || 0), 0);\n                          return `${formatNumber(totalPrepaid.toString())} kr`;\n                        })()}\n                      </p>\n                    </div>\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Actions */}\n          {isAdmin && (\n            <div className=\"mt-6 space-y-2\">\n              <Button \n                onClick={handleEdit}\n                className=\"w-full flex items-center justify-center\"\n                data-testid=\"button-edit-property\"\n              >\n                <Edit className=\"mr-2\" size={16} />\n                Redigér ejendom\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={handleDelete}\n                className=\"w-full flex items-center justify-center text-red-600 border-red-300 hover:bg-red-50\"\n                data-testid=\"button-delete-property\"\n              >\n                <Trash2 className=\"mr-2\" size={16} />\n                Slet ejendom\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Leases and Statistics */}\n      {propertyLeases.length > 0 && (\n        <div className=\"mt-8 space-y-6\">\n          {/* Statistics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Occupancy Status */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Udlejning</CardTitle>\n                <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                {(() => {\n                  const occupiedLeases = propertyLeases.filter(lease => {\n                    return allLeaseTenants.some(lt => \n                      lt.leaseId === lease.id && \n                      (!lt.periodEnd || new Date(lt.periodEnd) > new Date())\n                    );\n                  });\n                  const occupancyRate = propertyLeases.length > 0 ? (occupiedLeases.length / propertyLeases.length) * 100 : 0;\n                  \n                  return (\n                    <>\n                      <div className=\"text-2xl font-bold\">{Math.round(occupancyRate)}%</div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {occupiedLeases.length} af {propertyLeases.length} lejemål udlejet\n                      </p>\n                    </>\n                  );\n                })()}\n              </CardContent>\n            </Card>\n\n            {/* Potential Income */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Potentiale</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                {(() => {\n                  const potentialIncome = propertyLeases.reduce((sum, lease) => {\n                    const area = parseFloat(lease.totalArea.toString()) || 0;\n                    const maxRent = parseFloat(lease.maxRentPerSqm?.toString() || '0') || 0;\n                    return sum + (area * maxRent); // maxRentPerSqm er allerede årligt\n                  }, 0);\n                  \n                  return (\n                    <>\n                      <div className=\"text-2xl font-bold\">{formatNumber(potentialIncome.toString())} kr</div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Årlig lejeindtægt ved fuld udlejning\n                      </p>\n                    </>\n                  );\n                })()}\n              </CardContent>\n            </Card>\n\n            {/* Current Income */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Aktuel Indtægt</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                {(() => {\n                  const currentIncome = allLeaseTenants\n                    .filter(lt => \n                      propertyLeases.some(lease => lease.id === lt.leaseId) &&\n                      (!lt.periodEnd || new Date(lt.periodEnd) > new Date())\n                    )\n                    .reduce((sum, lt) => sum + (parseFloat(lt.rentAmount) || 0), 0) * 12; // Årlig indtægt\n                  \n                  return (\n                    <>\n                      <div className=\"text-2xl font-bold\">{formatNumber(currentIncome.toString())} kr</div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Nuværende årlig lejeindtægt\n                      </p>\n                    </>\n                  );\n                })()}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Leases List */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"mr-2 h-5 w-5\" />\n                Tilknyttede lejemål ({propertyLeases.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {propertyLeases.map((lease) => {\n                  const activeTenant = allLeaseTenants.find(lt => \n                    lt.leaseId === lease.id && \n                    (!lt.periodEnd || new Date(lt.periodEnd) > new Date())\n                  );\n                  \n                  return (\n                    <div key={lease.id} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 transition-colors cursor-pointer\" onClick={() => setLocation(`/leases/${lease.id}`)}>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3\">\n                          <h4 className=\"font-medium text-blue-600 hover:text-blue-800\">{lease.name}</h4>\n                          {lease.type && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {lease.type}\n                            </Badge>\n                          )}\n                          {activeTenant ? (\n                            <Badge className=\"bg-green-100 text-green-800 text-xs\">\n                              Udlejet\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              Tomgang\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"text-sm text-gray-600 mt-1\">\n                          {formatNumber(Math.round(parseFloat(lease.totalArea.toString())).toString())} m²\n                          {lease.maxRentPerSqm && ` • Max ${formatCurrency(lease.maxRentPerSqm.toString())}/m²`}\n                          {lease.vatRegistered && (\n                            <span className=\"ml-2 px-1.5 py-0.5 text-xs bg-blue-100 text-blue-800 rounded\">\n                              Moms\n                            </span>\n                          )}\n                        </div>\n                        {activeTenant && (\n                          <div className=\"text-sm text-gray-500 mt-1\">\n                            {user?.role === 'broker' ? \n                              `Lejer ${activeTenant.tenant.internalNumber}` : \n                              activeTenant.tenant.name\n                            } • {formatCurrency(activeTenant.rentAmount || '0')}/mdr\n                            {(() => {\n                              const monthlyRent = parseFloat(activeTenant.rentAmount?.toString() || '0') || 0;\n                              const area = parseFloat(lease.totalArea.toString()) || 0;\n                              const yearlyRentPerSqm = area > 0 ? (monthlyRent * 12) / area : 0;\n                              return ` • ${formatCurrency(yearlyRentPerSqm.toString())}/m²/år`;\n                            })()}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"ml-4\">\n                        <ExternalLink className=\"h-4 w-4 text-gray-400\" />\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <PropertyForm\n        isOpen={showForm}\n        onClose={() => setShowForm(false)}\n        property={property}\n      />\n\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Slet ejendom</AlertDialogTitle>\n            <AlertDialogDescription>\n              Er du sikker på, at du vil slette ejendommen \"{property.name}\"? \n              Denne handling kan ikke fortrydes.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Annuller</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={deleteMutation.isPending}\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? \"Sletter...\" : \"Slet\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":20248},"client/src/components/properties/PropertyForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { insertPropertySchema, type InsertProperty, type Property, type Company } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { useEffect, useState } from \"react\";\nimport { formatNumber } from \"@/lib/utils\";\n\ninterface PropertyFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n  property?: Property;\n}\n\nexport default function PropertyForm({ isOpen, onClose, property }: PropertyFormProps) {\n  const queryClient = useQueryClient();\n  const [showShareFields, setShowShareFields] = useState(false);\n  const [displayPrice, setDisplayPrice] = useState(\"\");\n\n  // Fetch companies for the dropdown\n  const { data: companies = [] } = useQuery<Company[]>({\n    queryKey: ['/api/companies'],\n    enabled: isOpen,\n  });\n\n  // Helper function to format number input with Danish formatting\n  const formatPriceInput = (value: string): { display: string; raw: string } => {\n    // Remove all non-digits\n    const rawValue = value.replace(/\\D/g, '');\n    \n    // Format with Danish thousand separators\n    const displayValue = rawValue ? formatNumber(parseInt(rawValue, 10)) : '';\n    \n    return { display: displayValue, raw: rawValue };\n  };\n  \n  const form = useForm<InsertProperty>({\n    resolver: zodResolver(insertPropertySchema),\n    defaultValues: {\n      name: property?.name || \"\",\n      address: property?.address || \"\",\n      postalCode: property?.postalCode || \"\",\n      city: property?.city || \"\",\n      acquisitionPrice: property?.acquisitionPrice ? parseInt(property.acquisitionPrice.toString(), 10) : 0,\n      acquisitionDate: property?.acquisitionDate || \"\",\n      propertyType: property?.propertyType || \"\",\n      shareNumerator: property?.shareNumerator || undefined,\n      shareDenominator: property?.shareDenominator || undefined,\n      ownerCompanyId: property?.ownerCompanyId || null,\n    },\n  });\n\n  const isEdit = !!property;\n\n  useEffect(() => {\n    if (property) {\n      form.reset({\n        name: property.name,\n        address: property.address,\n        postalCode: property.postalCode,\n        city: property.city,\n        acquisitionPrice: property.acquisitionPrice ? parseInt(property.acquisitionPrice.toString(), 10) : 0,\n        acquisitionDate: property.acquisitionDate,\n        propertyType: property.propertyType,\n        shareNumerator: property.shareNumerator || undefined,\n        shareDenominator: property.shareDenominator || undefined,\n        ownerCompanyId: property.ownerCompanyId || null,\n      });\n      setShowShareFields(property.propertyType === 'ejerlejlighed');\n      // Set display price for existing property\n      if (property.acquisitionPrice) {\n        setDisplayPrice(formatNumber(parseInt(property.acquisitionPrice.toString(), 10)));\n      }\n    } else {\n      form.reset({\n        name: \"\",\n        address: \"\",\n        postalCode: \"\",\n        city: \"\",\n        acquisitionPrice: 0,\n        acquisitionDate: \"\",\n        propertyType: \"\",\n        shareNumerator: undefined,\n        shareDenominator: undefined,\n        ownerCompanyId: null,\n      });\n      setShowShareFields(false);\n      setDisplayPrice(\"\"); // Clear display price for new property\n    }\n  }, [property, form]);\n\n  // Reset display price when dialog closes\n  useEffect(() => {\n    if (!isOpen) {\n      setDisplayPrice(\"\");\n    }\n  }, [isOpen]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertProperty) => {\n      await apiRequest(\"/api/properties\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/recent\"] });\n      onClose();\n      toast({\n        title: \"Success\",\n        description: \"Ejendom oprettet\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertProperty) => {\n      await apiRequest(`/api/properties/${property!.id}`, \"PUT\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/properties\", property!.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/recent\"] });\n      onClose();\n      toast({\n        title: \"Success\",\n        description: \"Ejendom opdateret\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertProperty) => {\n    if (isEdit) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handlePostalCodeChange = async (value: string) => {\n    form.setValue(\"postalCode\", value);\n    \n    if (value.length === 4) {\n      try {\n        const response = await fetch(`/api/postal-codes/${value}`);\n        const data = await response.json();\n        if (data.city) {\n          form.setValue(\"city\", data.city);\n        }\n      } catch (error) {\n        console.error(\"Failed to lookup city:\", error);\n      }\n    }\n  };\n\n  const handlePropertyTypeChange = (value: string) => {\n    form.setValue(\"propertyType\", value);\n    setShowShareFields(value === 'ejerlejlighed');\n    \n    if (value !== 'ejerlejlighed') {\n      form.setValue(\"shareNumerator\", undefined);\n      form.setValue(\"shareDenominator\", undefined);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{isEdit ? \"Redigér ejendom\" : \"Opret ejendom\"}</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit((data: InsertProperty) => onSubmit(data))} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Property Name */}\n            <div className=\"md:col-span-2\">\n              <Label htmlFor=\"name\">Ejendomsnavn *</Label>\n              <Input\n                id=\"name\"\n                placeholder=\"F.eks. Strandvejen 15, 3. th\"\n                {...form.register(\"name\")}\n                data-testid=\"input-property-name\"\n              />\n              {form.formState.errors.name && (\n                <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-name\">\n                  {form.formState.errors.name.message}\n                </p>\n              )}\n            </div>\n\n            {/* Address */}\n            <div className=\"md:col-span-2\">\n              <Label htmlFor=\"address\">Adresse *</Label>\n              <Input\n                id=\"address\"\n                placeholder=\"Indtast den fulde adresse\"\n                {...form.register(\"address\")}\n                data-testid=\"input-address\"\n              />\n              {form.formState.errors.address && (\n                <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-address\">\n                  {form.formState.errors.address.message}\n                </p>\n              )}\n            </div>\n\n            {/* Postal Code */}\n            <div>\n              <Label htmlFor=\"postalCode\">Postnummer *</Label>\n              <Input\n                id=\"postalCode\"\n                placeholder=\"2100\"\n                maxLength={4}\n                {...form.register(\"postalCode\")}\n                onChange={(e) => handlePostalCodeChange(e.target.value)}\n                data-testid=\"input-postal-code\"\n              />\n              {form.formState.errors.postalCode && (\n                <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-postal-code\">\n                  {form.formState.errors.postalCode.message}\n                </p>\n              )}\n            </div>\n\n            {/* City */}\n            <div>\n              <Label htmlFor=\"city\">By *</Label>\n              <Input\n                id=\"city\"\n                placeholder=\"Autoudfyldes fra postnummer\"\n                {...form.register(\"city\")}\n                data-testid=\"input-city\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">Udfyldes automatisk, men kan overskrives</p>\n              {form.formState.errors.city && (\n                <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-city\">\n                  {form.formState.errors.city.message}\n                </p>\n              )}\n            </div>\n\n            {/* Property Type */}\n            <div>\n              <Label htmlFor=\"propertyType\">Ejendomstype *</Label>\n              <Select\n                value={form.watch(\"propertyType\")}\n                onValueChange={handlePropertyTypeChange}\n              >\n                <SelectTrigger data-testid=\"select-property-type\">\n                  <SelectValue placeholder=\"Vælg type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"ejerlejlighed\">Ejerlejlighed</SelectItem>\n                  <SelectItem value=\"samlet_fast_ejendom\">Samlet Fast Ejendom</SelectItem>\n                </SelectContent>\n              </Select>\n              {form.formState.errors.propertyType && (\n                <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-property-type\">\n                  {form.formState.errors.propertyType.message}\n                </p>\n              )}\n            </div>\n\n            {/* Acquisition Price */}\n            <div>\n              <Label htmlFor=\"acquisitionPrice\">Anskaffelsessum *</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"acquisitionPrice\"\n                  type=\"text\"\n                  placeholder=\"2.450.000\"\n                  value={displayPrice}\n                  onChange={(e) => {\n                    const { display, raw } = formatPriceInput(e.target.value);\n                    setDisplayPrice(display);\n                    // Update the form with the raw numeric value\n                    form.setValue(\"acquisitionPrice\", parseInt(raw, 10) || 0);\n                  }}\n                  className=\"pr-8\"\n                  data-testid=\"input-acquisition-price\"\n                />\n                <span className=\"absolute right-3 top-2 text-gray-500 text-sm\">kr</span>\n              </div>\n              {form.formState.errors.acquisitionPrice && (\n                <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-acquisition-price\">\n                  {form.formState.errors.acquisitionPrice.message}\n                </p>\n              )}\n            </div>\n\n            {/* Acquisition Date */}\n            <div>\n              <Label htmlFor=\"acquisitionDate\">Anskaffelsesdato</Label>\n              <Input\n                id=\"acquisitionDate\"\n                type=\"date\"\n                {...form.register(\"acquisitionDate\")}\n                data-testid=\"input-acquisition-date\"\n              />\n              {form.formState.errors.acquisitionDate && (\n                <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-acquisition-date\">\n                  {form.formState.errors.acquisitionDate.message}\n                </p>\n              )}\n            </div>\n\n            {/* Owner Company */}\n            <div>\n              <Label htmlFor=\"ownerCompany\">Ejerselskab (valgfrit)</Label>\n              <Select\n                value={form.watch(\"ownerCompanyId\") || \"none\"}\n                onValueChange={(value) => form.setValue(\"ownerCompanyId\", value === \"none\" ? null : value)}\n              >\n                <SelectTrigger data-testid=\"select-owner-company\">\n                  <SelectValue placeholder=\"Vælg ejerselskab\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">Intet selskab</SelectItem>\n                  {companies.map((company) => (\n                    <SelectItem key={company.id} value={company.id}>\n                      {company.name}\n                      {company.cvrNumber && ` (CVR: ${company.cvrNumber})`}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {form.formState.errors.ownerCompanyId && (\n                <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-owner-company\">\n                  {form.formState.errors.ownerCompanyId.message}\n                </p>\n              )}\n            </div>\n\n            {/* Share Numbers (only for condominiums) */}\n            {showShareFields && (\n              <div className=\"md:col-span-2\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <h3 className=\"text-sm font-medium text-blue-900 mb-3\">Fordelingstal (kun for ejerlejligheder)</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"shareNumerator\">Tæller *</Label>\n                      <Input\n                        id=\"shareNumerator\"\n                        type=\"number\"\n                        placeholder=\"192\"\n                        {...form.register(\"shareNumerator\", { valueAsNumber: true })}\n                        className=\"border-blue-300\"\n                        data-testid=\"input-share-numerator\"\n                      />\n                      {form.formState.errors.shareNumerator && (\n                        <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-share-numerator\">\n                          {form.formState.errors.shareNumerator.message}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"shareDenominator\">Nævner *</Label>\n                      <Input\n                        id=\"shareDenominator\"\n                        type=\"number\"\n                        placeholder=\"2384\"\n                        {...form.register(\"shareDenominator\", { valueAsNumber: true })}\n                        className=\"border-blue-300\"\n                        data-testid=\"input-share-denominator\"\n                      />\n                      {form.formState.errors.shareDenominator && (\n                        <p className=\"text-sm text-red-600 mt-1\" data-testid=\"error-share-denominator\">\n                          {form.formState.errors.shareDenominator.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-blue-700 mt-2\">Begge felter skal udfyldes hvis ejendommen er en ejerlejlighed</p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex items-center justify-end space-x-3 pt-6 border-t border-gray-200\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose}\n              data-testid=\"button-cancel\"\n            >\n              Annuller\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createMutation.isPending || updateMutation.isPending}\n              data-testid=\"button-save\"\n            >\n              {createMutation.isPending || updateMutation.isPending \n                ? \"Gemmer...\" \n                : \"Gem ejendom\"\n              }\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":16190},"client/src/components/properties/PropertyList.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency, formatPropertyType, formatNumber } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Building, Plus, Eye, Edit2, Trash2, MoreHorizontal, ArrowUpDown, Search, Filter } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport PropertyForm from \"./PropertyForm\";\nimport { useLocation } from \"wouter\";\nimport { toast } from \"@/hooks/use-toast\";\nimport type { Property, Company } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function PropertyList() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [showForm, setShowForm] = useState(false);\n  const [editingProperty, setEditingProperty] = useState<Property | undefined>();\n  const [deletingProperty, setDeletingProperty] = useState<Property | undefined>();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [sortField, setSortField] = useState<'name' | 'address' | 'propertyType' | 'ownerCompanyName' | 'acquisitionPrice'>('name');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  \n  const isAdmin = user?.role === 'admin';\n\n  const { data: properties = [], isLoading } = useQuery<Property[]>({\n    queryKey: [\"/api/properties\"],\n  });\n\n  const { data: companies = [] } = useQuery<Company[]>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  const filteredAndSortedProperties = useMemo(() => {\n    let filtered = properties.filter(property => {\n      const ownerCompany = companies.find(c => c.id === property.ownerCompanyId);\n      const matchesSearch = property.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                           property.address.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                           (ownerCompany?.name || '').toLowerCase().includes(searchQuery.toLowerCase());\n      const matchesType = typeFilter === \"all\" || property.propertyType === typeFilter;\n      return matchesSearch && matchesType;\n    });\n\n    filtered.sort((a, b) => {\n      let aValue: any = '';\n      let bValue: any = '';\n\n      switch (sortField) {\n        case 'name':\n          aValue = a.name.toLowerCase();\n          bValue = b.name.toLowerCase();\n          break;\n        case 'address':\n          aValue = a.address.toLowerCase();\n          bValue = b.address.toLowerCase();\n          break;\n        case 'propertyType':\n          aValue = a.propertyType?.toLowerCase() || '';\n          bValue = b.propertyType?.toLowerCase() || '';\n          break;\n        case 'ownerCompanyName':\n          const aCompany = companies.find(c => c.id === a.ownerCompanyId);\n          const bCompany = companies.find(c => c.id === b.ownerCompanyId);\n          aValue = aCompany?.name?.toLowerCase() || '';\n          bValue = bCompany?.name?.toLowerCase() || '';\n          break;\n        case 'acquisitionPrice':\n          aValue = a.acquisitionPrice || 0;\n          bValue = b.acquisitionPrice || 0;\n          break;\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return filtered;\n  }, [properties, companies, searchQuery, typeFilter, sortField, sortDirection]);\n\n  const handleSort = (field: typeof sortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  const uniqueTypes = useMemo(() => {\n    const types = properties.map(property => property.propertyType).filter(Boolean);\n    return Array.from(new Set(types));\n  }, [properties]);\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(`/api/properties/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/recent\"] });\n      setDeletingProperty(undefined);\n      toast({\n        title: \"Success\",\n        description: \"Ejendom slettet\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateProperty = () => {\n    setEditingProperty(undefined);\n    setShowForm(true);\n  };\n\n  const handleEditProperty = (property: Property) => {\n    setEditingProperty(property);\n    setShowForm(true);\n  };\n\n  const handleViewProperty = (property: Property) => {\n    setLocation(`/properties/${property.id}`);\n  };\n\n  const handleDeleteProperty = (property: Property) => {\n    setDeletingProperty(property);\n  };\n\n  const confirmDelete = () => {\n    if (deletingProperty) {\n      deleteMutation.mutate(deletingProperty.id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (properties.length === 0) {\n    return (\n      <>\n        <Card className=\"text-center py-12\">\n          <CardContent className=\"pt-6\">\n            <div className=\"w-24 h-24 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-6\">\n              <Building className=\"text-gray-400 text-3xl\" size={48} />\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Ingen ejendomme endnu</h3>\n            <p className=\"text-gray-600 mb-6 max-w-sm mx-auto\">\n              Kom i gang ved at oprette din første ejendom. Du kan tilføje alle relevante oplysninger og spore værdien over tid.\n            </p>\n            {isAdmin && (\n              <Button onClick={handleCreateProperty} data-testid=\"button-create-first-property\">\n                <Plus className=\"mr-2\" size={16} />\n                Opret ejendom\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n\n        <PropertyForm\n          isOpen={showForm}\n          onClose={() => setShowForm(false)}\n          property={editingProperty}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"space-y-4\">\n        {/* Filters and search */}\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Søg efter ejendom, adresse eller selskab...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-properties\"\n            />\n          </div>\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-filter-type\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              <SelectValue placeholder=\"Filtrer efter type\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Alle typer</SelectItem>\n              {uniqueTypes.map((type) => (\n                <SelectItem key={type} value={type}>\n                  {formatPropertyType(type)}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Results count */}\n        <div className=\"text-sm text-gray-600\">\n          Viser {filteredAndSortedProperties.length} af {properties.length} ejendomme\n        </div>\n\n        {/* Table */}\n        <div className=\"border rounded-lg\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleSort('name')}\n                    className=\"h-auto p-0 font-semibold\"\n                    data-testid=\"sort-name\"\n                  >\n                    Ejendom\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleSort('address')}\n                    className=\"h-auto p-0 font-semibold\"\n                    data-testid=\"sort-address\"\n                  >\n                    Adresse\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleSort('propertyType')}\n                    className=\"h-auto p-0 font-semibold\"\n                    data-testid=\"sort-type\"\n                  >\n                    Type\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleSort('ownerCompanyName')}\n                    className=\"h-auto p-0 font-semibold\"\n                    data-testid=\"sort-company\"\n                  >\n                    Ejerselskab\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead className=\"text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleSort('acquisitionPrice')}\n                    className=\"h-auto p-0 font-semibold\"\n                    data-testid=\"sort-price\"\n                  >\n                    Anskaffelsessum\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead className=\"text-center\">Handlinger</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredAndSortedProperties.map((property: Property) => {\n                const ownerCompany = companies.find(c => c.id === property.ownerCompanyId);\n                return (\n                  <TableRow key={property.id} data-testid={`row-property-${property.id}`}>\n                    <TableCell className=\"font-medium\" data-testid={`text-property-name-${property.id}`}>\n                      {property.name}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-gray-900\" data-testid={`text-property-address-${property.id}`}>\n                        {property.address}\n                      </div>\n                      <div className=\"text-sm text-gray-500\" data-testid={`text-property-postal-${property.id}`}>\n                        {property.postalCode} {property.city}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"inline-flex px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full\" data-testid={`text-property-type-${property.id}`}>\n                        {formatPropertyType(property.propertyType)}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-gray-900\" data-testid={`text-owner-company-${property.id}`}>\n                        {ownerCompany ? ownerCompany.name : \"Ikke tilknyttet\"}\n                      </div>\n                      {ownerCompany?.cvrNumber && (\n                        <div className=\"text-sm text-gray-500\">\n                          CVR: {ownerCompany.cvrNumber}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-gray-900\" data-testid={`text-acquisition-value-${property.id}`}>\n                        {property.acquisitionPrice ? `${formatNumber(property.acquisitionPrice)} kr` : \"-\"}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-center\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-actions-${property.id}`}>\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => handleViewProperty(property)} data-testid={`menu-view-${property.id}`}>\n                            <Eye className=\"h-4 w-4 mr-2\" />\n                            Se ejendom\n                          </DropdownMenuItem>\n                          {isAdmin && (\n                            <>\n                              <DropdownMenuItem onClick={() => handleEditProperty(property)} data-testid={`menu-edit-${property.id}`}>\n                                <Edit2 className=\"h-4 w-4 mr-2\" />\n                                Rediger\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                onClick={() => handleDeleteProperty(property)} \n                                className=\"text-red-600\"\n                                data-testid={`menu-delete-${property.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4 mr-2\" />\n                                Slet\n                              </DropdownMenuItem>\n                            </>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </div>\n      </div>\n\n      <PropertyForm\n        isOpen={showForm}\n        onClose={() => setShowForm(false)}\n        property={editingProperty}\n      />\n\n      <AlertDialog open={!!deletingProperty} onOpenChange={() => setDeletingProperty(undefined)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Slet ejendom</AlertDialogTitle>\n            <AlertDialogDescription>\n              Er du sikker på, at du vil slette ejendommen \"{deletingProperty?.name}\"? \n              Denne handling kan ikke fortrydes.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Annuller</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={deleteMutation.isPending}\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? \"Sletter...\" : \"Slet\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":16021},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/companies.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Plus, Building, Trash2, Edit2, Network, UserPlus, Users, MoreHorizontal } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from \"@/components/ui/table\";\nimport CompanyRelationForm from \"@/components/companies/CompanyRelationForm\";\nimport CompanyStructureChart from \"@/components/companies/CompanyStructureChart\";\nimport OwnershipManagementDialog from \"@/components/companies/OwnershipManagementDialog\";\nimport type { Company } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function CompaniesPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  const [isRelationFormOpen, setIsRelationFormOpen] = useState(false);\n  const [relationFormData, setRelationFormData] = useState<{\n    companyId: string;\n    companyName: string;\n    relationType: \"parent\" | \"child\";\n  } | null>(null);\n  const [editingCompany, setEditingCompany] = useState<Company | null>(null);\n  const [selectedCompany, setSelectedCompany] = useState<Company | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    cvrNumber: \"\"\n  });\n\n  const isAdmin = user?.role === 'admin';\n\n  const { data: companies = [], isLoading } = useQuery<Company[]>({\n    queryKey: ['/api/companies'],\n  });\n\n  const { data: companyRelations = [] } = useQuery<any[]>({\n    queryKey: ['/api/company-relations'],\n    staleTime: 0,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/companies', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      setIsCreateOpen(false);\n      setFormData({ name: \"\", cvrNumber: \"\" });\n      toast({ title: \"Selskab oprettet\", description: \"Selskabet blev oprettet med succes\" });\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Fejl\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, ...data }: any) => {\n      const response = await fetch(`/api/companies/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      setIsEditOpen(false);\n      setEditingCompany(null);\n      setFormData({ name: \"\", cvrNumber: \"\" });\n      toast({ title: \"Selskab opdateret\", description: \"Selskabet blev opdateret med succes\" });\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Fejl\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/companies/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      toast({ title: \"Selskab slettet\", description: \"Selskabet blev slettet med succes\" });\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Fejl\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const { data: parentRelations = [] } = useQuery({\n    queryKey: ['/api/companies', selectedCompany?.id, 'parents'],\n    enabled: !!selectedCompany,\n  });\n\n  const { data: childRelations = [] } = useQuery({\n    queryKey: ['/api/companies', selectedCompany?.id, 'children'],\n    enabled: !!selectedCompany,\n  });\n\n  // Helper function to find majority owner of a company\n  const getMajorityOwner = (companyId: string) => {\n    if (!companyRelations || companyRelations.length === 0) return null;\n    \n    const parentRelations = companyRelations.filter((rel: any) => rel.childCompanyId === companyId);\n    if (parentRelations.length === 0) return null;\n    \n    // Find the owner with the highest percentage\n    const majorityRelation = parentRelations.reduce((highest: any, current: any) => {\n      const currentPercentage = parseFloat(current.ownershipPercentage);\n      const highestPercentage = parseFloat(highest.ownershipPercentage);\n      return currentPercentage > highestPercentage ? current : highest;\n    });\n    \n    const majorityPercentage = parseFloat(majorityRelation.ownershipPercentage);\n    \n    // Only show as majority owner if they own more than 50%\n    if (majorityPercentage > 50) {\n      const ownerCompany = companies.find(c => c.id === majorityRelation.parentCompanyId);\n      return {\n        name: ownerCompany?.name || 'Ukendt',\n        percentage: majorityPercentage\n      };\n    }\n    \n    // If no single majority owner, show the largest owner with \"Største:\"\n    const ownerCompany = companies.find(c => c.id === majorityRelation.parentCompanyId);\n    return {\n      name: ownerCompany?.name || 'Ukendt',\n      percentage: majorityPercentage,\n      isLargest: true\n    };\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingCompany) {\n      updateMutation.mutate({\n        id: editingCompany.id,\n        name: formData.name,\n        cvrNumber: formData.cvrNumber ? parseInt(formData.cvrNumber) : null\n      });\n    } else {\n      createMutation.mutate({\n        name: formData.name,\n        cvrNumber: formData.cvrNumber ? parseInt(formData.cvrNumber) : null\n      });\n    }\n  };\n\n  const handleEdit = (company: Company) => {\n    setEditingCompany(company);\n    setFormData({\n      name: company.name,\n      cvrNumber: company.cvrNumber?.toString() || \"\"\n    });\n    setIsEditOpen(true);\n  };\n\n  const handleDelete = (company: Company) => {\n    if (confirm(`Er du sikker på, at du vil slette selskabet \"${company.name}\"?`)) {\n      deleteMutation.mutate(company.id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-2\">\n          <Building className=\"h-6 w-6\" />\n          <h1 className=\"text-2xl font-bold\">Koncern</h1>\n        </div>\n        {isAdmin && (\n          <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-company\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Opret Selskab\n              </Button>\n            </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Opret Nyt Selskab</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Selskabsnavn</Label>\n                <Input\n                  id=\"name\"\n                  data-testid=\"input-company-name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Indtast selskabsnavn\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"cvr\">CVR-nummer (valgfrit)</Label>\n                <Input\n                  id=\"cvr\"\n                  data-testid=\"input-cvr-number\"\n                  value={formData.cvrNumber}\n                  onChange={(e) => {\n                    const value = e.target.value.replace(/\\D/g, '');\n                    if (value.length <= 8) {\n                      setFormData(prev => ({ ...prev, cvrNumber: value }));\n                    }\n                  }}\n                  placeholder=\"12345678\"\n                  maxLength={8}\n                />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  data-testid=\"button-cancel\"\n                  onClick={() => setIsCreateOpen(false)}\n                >\n                  Annullér\n                </Button>\n                <Button \n                  type=\"submit\" \n                  data-testid=\"button-submit-company\"\n                  disabled={createMutation.isPending}\n                >\n                  {createMutation.isPending ? \"Opretter...\" : \"Opret\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n        )}\n      </div>\n\n      {companies.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <Building className=\"h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">Ingen selskaber endnu</h3>\n            <p className=\"text-gray-500 text-center mb-6\">\n              Opret dit første selskab for at begynde at administrere din koncernstruktur\n            </p>\n            {isAdmin && (\n              <Button onClick={() => setIsCreateOpen(true)} data-testid=\"button-create-first-company\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Opret Dit Første Selskab\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <Tabs defaultValue=\"companies\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"companies\" data-testid=\"tab-companies\">Selskaber</TabsTrigger>\n            <TabsTrigger value=\"structure\" data-testid=\"tab-structure\">Koncernstruktur</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"companies\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Alle Selskaber ({companies.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Selskabsnavn</TableHead>\n                      <TableHead>CVR-nummer</TableHead>\n                      <TableHead>Majoritetsejer</TableHead>\n                      <TableHead>Oprettelsesdato</TableHead>\n                      <TableHead className=\"text-right\">Handlinger</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {companies.map((company) => {\n                      const majorityOwner = getMajorityOwner(company.id);\n                      return (\n                        <TableRow key={company.id} data-testid={`row-company-${company.id}`}>\n                          <TableCell className=\"font-medium\">{company.name}</TableCell>\n                          <TableCell>{company.cvrNumber || \"-\"}</TableCell>\n                          <TableCell>\n                            {majorityOwner ? (\n                              <div className=\"text-sm\">\n                                <div className=\"font-medium\">\n                                  {majorityOwner.isLargest ? 'Største: ' : ''}{majorityOwner.name}\n                                </div>\n                                <div className={`text-xs ${majorityOwner.isLargest ? 'text-amber-600' : 'text-green-600'}`}>\n                                  {majorityOwner.percentage.toFixed(1)}%\n                                </div>\n                              </div>\n                            ) : (\n                              <span className=\"text-sm text-gray-500\">Ingen ejere</span>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {company.createdAt ? new Date(company.createdAt).toLocaleDateString('da-DK', {\n                              day: 'numeric',\n                              month: 'short',\n                              year: 'numeric'\n                            }) : '-'}\n                          </TableCell>\n                        <TableCell className=\"text-center\">\n                          {isAdmin && (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\" data-testid={`button-actions-${company.id}`}>\n                                  <MoreHorizontal className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => setSelectedCompany(company)} data-testid={`menu-relations-${company.id}`}>\n                                  <Network className=\"h-4 w-4 mr-2\" />\n                                  Administrer ejerskab\n                                </DropdownMenuItem>\n                                <DropdownMenuItem onClick={() => handleEdit(company)} data-testid={`menu-edit-${company.id}`}>\n                                  <Edit2 className=\"h-4 w-4 mr-2\" />\n                                  Rediger\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleDelete(company)} \n                                  className=\"text-red-600\"\n                                  data-testid={`menu-delete-${company.id}`}\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                                  Slet\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"structure\">\n            <CompanyStructureChart organizationId=\"\" />\n          </TabsContent>\n        </Tabs>\n      )}\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Rediger Selskab</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"edit-name\">Selskabsnavn</Label>\n              <Input\n                id=\"edit-name\"\n                data-testid=\"input-edit-company-name\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"Indtast selskabsnavn\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"edit-cvr\">CVR-nummer (valgfrit)</Label>\n              <Input\n                id=\"edit-cvr\"\n                data-testid=\"input-edit-cvr-number\"\n                value={formData.cvrNumber}\n                onChange={(e) => {\n                  const value = e.target.value.replace(/\\D/g, '');\n                  if (value.length <= 8) {\n                    setFormData(prev => ({ ...prev, cvrNumber: value }));\n                  }\n                }}\n                placeholder=\"12345678\"\n                maxLength={8}\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                data-testid=\"button-cancel-edit\"\n                onClick={() => setIsEditOpen(false)}\n              >\n                Annullér\n              </Button>\n              <Button \n                type=\"submit\" \n                data-testid=\"button-update-company\"\n                disabled={updateMutation.isPending}\n              >\n                {updateMutation.isPending ? \"Opdaterer...\" : \"Opdater\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Ownership Management Dialog */}\n      <OwnershipManagementDialog\n        isOpen={!!selectedCompany}\n        onClose={() => setSelectedCompany(null)}\n        company={selectedCompany}\n      />\n\n      {/* Company Relations Dialog */}\n      {relationFormData && (\n        <CompanyRelationForm\n          isOpen={isRelationFormOpen}\n          onClose={() => {\n            setIsRelationFormOpen(false);\n            setRelationFormData(null);\n          }}\n          companyId={relationFormData.companyId}\n          companyName={relationFormData.companyName}\n          relationType={relationFormData.relationType}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":18257},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { userInviteSchema, type UserInviteData, type User, type Company, type UserInvitation } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { UserPlus, Users, Mail, Trash2, Copy, Building, Edit, MoreHorizontal } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\n\nexport default function UsersPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isInviteOpen, setIsInviteOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n\n  const { data: users = [], isLoading: isLoadingUsers } = useQuery<(User & { assignedCompany?: Company })[]>({\n    queryKey: ['/api/users'],\n  });\n\n  const { data: companies = [] } = useQuery<Company[]>({\n    queryKey: ['/api/companies'],\n  });\n\n  const { data: invitations = [], isLoading: isLoadingInvitations } = useQuery<UserInvitation[]>({\n    queryKey: ['/api/users/invitations'],\n  });\n\n  const form = useForm<UserInviteData>({\n    resolver: zodResolver(userInviteSchema),\n    defaultValues: {\n      email: \"\",\n      role: \"user\",\n      assignedCompanyId: null,\n    },\n  });\n\n  const editForm = useForm<{role: \"admin\" | \"user\", assignedCompanyId: string | null}>({\n    defaultValues: {\n      role: \"user\",\n      assignedCompanyId: null,\n    },\n  });\n\n  const inviteMutation = useMutation({\n    mutationFn: async (data: UserInviteData) => {\n      return await apiRequest(\"/api/users/invite\", \"POST\", data);\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/invitations\"] });\n      toast({\n        title: \"Bruger inviteret\",\n        description: `Invitation sendt til ${data.invitation.email}`,\n      });\n      \n      // Copy invitation link to clipboard\n      navigator.clipboard.writeText(data.invitationLink);\n      toast({\n        title: \"Invitationslink kopieret\",\n        description: \"Invitationslinket er kopieret til udklipsholderen\",\n      });\n      \n      setIsInviteOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      console.error('Invitation error:', error);\n      toast({\n        title: \"Fejl ved invitation\",\n        description: error.message || \"Kunne ikke invitere bruger\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteInvitationMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/users/invitations/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/invitations\"] });\n      toast({\n        title: \"Invitation slettet\",\n        description: \"Invitationen er blevet slettet\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Kunne ikke slette invitation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const editUserMutation = useMutation({\n    mutationFn: async ({ id, ...data }: { id: string, role: \"admin\" | \"user\", assignedCompanyId: string | null }) => {\n      return await apiRequest(`/api/users/${id}`, \"PUT\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Bruger opdateret\",\n        description: \"Brugerens information er blevet opdateret\",\n      });\n      setEditingUser(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Kunne ikke opdatere bruger\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/users/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Bruger slettet\",\n        description: \"Brugeren er blevet slettet\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Kunne ikke slette bruger\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInvite = (data: UserInviteData) => {\n    inviteMutation.mutate(data);\n  };\n\n  const handleEditUser = (user: User) => {\n    setEditingUser(user);\n    editForm.reset({\n      role: user.role as \"admin\" | \"user\",\n      assignedCompanyId: user.assignedCompanyId,\n    });\n  };\n\n  const handleUpdateUser = (data: {role: \"admin\" | \"user\", assignedCompanyId: string | null}) => {\n    if (!editingUser) return;\n    editUserMutation.mutate({\n      id: editingUser.id,\n      ...data,\n    });\n  };\n\n  if (isLoadingUsers) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-lg\">Indlæser brugere...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"users-page\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Brugeradministration</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n            Administrer brugere og deres adgang til systemet\n          </p>\n        </div>\n\n        <Dialog open={isInviteOpen} onOpenChange={setIsInviteOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-invite-user\">\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Invitér Bruger\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Invitér Ny Bruger</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleInvite)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>E-mail</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-invite-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Rolle</FormLabel>\n                      <FormControl>\n                        <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"select-role\">\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Vælg rolle\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"user\">Bruger</SelectItem>\n                            <SelectItem value=\"admin\">Administrator</SelectItem>\n                            <SelectItem value=\"broker\">Mægler</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"assignedCompanyId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tilknyttet Selskab (valgfrit)</FormLabel>\n                      <FormControl>\n                        <Select \n                          onValueChange={(value) => field.onChange(value === \"none\" ? null : value)} \n                          defaultValue={field.value || \"none\"}\n                          data-testid=\"select-company\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Vælg selskab\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"none\">Intet selskab</SelectItem>\n                            {companies.map((company) => (\n                              <SelectItem key={company.id} value={company.id}>\n                                {company.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsInviteOpen(false)}>\n                    Annullér\n                  </Button>\n                  <Button type=\"submit\" disabled={inviteMutation.isPending} data-testid=\"button-send-invitation\">\n                    {inviteMutation.isPending ? \"Sender...\" : \"Send Invitation\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Current Users */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"h-5 w-5 mr-2\" />\n            Aktive Brugere ({users.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {users.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">Ingen brugere endnu</p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Navn</TableHead>\n                  <TableHead>E-mail</TableHead>\n                  <TableHead>Rolle</TableHead>\n                  <TableHead>Tilknyttet Selskab</TableHead>\n                  <TableHead>Oprettet</TableHead>\n                  <TableHead className=\"text-center\">Handlinger</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users.map((user) => (\n                  <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                    <TableCell className=\"font-medium\">{user.name}</TableCell>\n                    <TableCell>{user.email}</TableCell>\n                    <TableCell>\n                      <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                        {user.role === 'admin' ? 'Administrator' : user.role === 'broker' ? 'Mægler' : 'Bruger'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {user.assignedCompany ? (\n                        <div className=\"flex items-center\">\n                          <Building className=\"h-4 w-4 mr-1 text-gray-400\" />\n                          {user.assignedCompany.name}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-500\">Intet selskab</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {user.createdAt ? new Date(user.createdAt).toLocaleDateString('da-DK', {\n                        day: 'numeric',\n                        month: 'short',\n                        year: 'numeric'\n                      }) : '-'}\n                    </TableCell>\n                    <TableCell className=\"text-center\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-user-menu-${user.id}`}>\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => handleEditUser(user)} data-testid={`button-edit-user-${user.id}`}>\n                            <Edit className=\"h-4 w-4 mr-2\" />\n                            Redigér\n                          </DropdownMenuItem>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <DropdownMenuItem onSelect={(e) => e.preventDefault()} data-testid={`button-delete-user-${user.id}`}>\n                                <Trash2 className=\"h-4 w-4 mr-2\" />\n                                Slet\n                              </DropdownMenuItem>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Slet bruger</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Er du sikker på at du vil slette brugeren \"{user.name}\"? Denne handling kan ikke fortrydes.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Annullér</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => deleteUserMutation.mutate(user.id)}\n                                  className=\"bg-red-600 hover:bg-red-700\"\n                                >\n                                  Slet\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Pending Invitations */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Mail className=\"h-5 w-5 mr-2\" />\n            Afventende Invitationer ({invitations.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoadingInvitations ? (\n            <div className=\"text-center py-4\">Indlæser invitationer...</div>\n          ) : invitations.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Mail className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">Ingen afventende invitationer</p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>E-mail</TableHead>\n                  <TableHead>Rolle</TableHead>\n                  <TableHead>Tilknyttet Selskab</TableHead>\n                  <TableHead>Udløber</TableHead>\n                  <TableHead className=\"text-center\">Handlinger</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {invitations.map((invitation) => {\n                  const assignedCompany = companies.find(c => c.id === invitation.assignedCompanyId);\n                  const isExpired = new Date(invitation.expiresAt) < new Date();\n                  \n                  return (\n                    <TableRow key={invitation.id} data-testid={`row-invitation-${invitation.id}`}>\n                      <TableCell className=\"font-medium\">{invitation.email}</TableCell>\n                      <TableCell>\n                        <Badge variant={invitation.role === 'admin' ? 'default' : 'secondary'}>\n                          {invitation.role === 'admin' ? 'Administrator' : invitation.role === 'broker' ? 'Mægler' : 'Bruger'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {assignedCompany ? (\n                          <div className=\"flex items-center\">\n                            <Building className=\"h-4 w-4 mr-1 text-gray-400\" />\n                            {assignedCompany.name}\n                          </div>\n                        ) : (\n                          <span className=\"text-gray-500\">Intet selskab</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <span className={isExpired ? \"text-red-600\" : \"\"}>\n                          {new Date(invitation.expiresAt).toLocaleDateString('da-DK', {\n                            day: 'numeric',\n                            month: 'short',\n                            year: 'numeric'\n                          })}\n                          {isExpired && \" (Udløbet)\"}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              const link = `${window.location.protocol}//${window.location.host}/invitation/${invitation.token}`;\n                              navigator.clipboard.writeText(link);\n                              toast({\n                                title: \"Link kopieret\",\n                                description: \"Invitationslinket er kopieret til udklipsholderen\",\n                              });\n                            }}\n                            data-testid={`button-copy-link-${invitation.id}`}\n                          >\n                            <Copy className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => deleteInvitationMutation.mutate(invitation.id)}\n                            disabled={deleteInvitationMutation.isPending}\n                            data-testid={`button-delete-invitation-${invitation.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit User Dialog */}\n      <Dialog open={!!editingUser} onOpenChange={() => setEditingUser(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Redigér Bruger</DialogTitle>\n          </DialogHeader>\n          {editingUser && (\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(handleUpdateUser)} className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">\n                    <strong>Navn:</strong> {editingUser.name}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    <strong>E-mail:</strong> {editingUser.email}\n                  </p>\n                </div>\n\n                <FormField\n                  control={editForm.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Rolle</FormLabel>\n                      <FormControl>\n                        <Select onValueChange={field.onChange} value={field.value} data-testid=\"select-edit-role\">\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"user\">Bruger</SelectItem>\n                            <SelectItem value=\"admin\">Administrator</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={editForm.control}\n                  name=\"assignedCompanyId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tilknyttet Selskab</FormLabel>\n                      <FormControl>\n                        <Select \n                          onValueChange={(value) => field.onChange(value === \"none\" ? null : value)} \n                          value={field.value || \"none\"}\n                          data-testid=\"select-edit-company\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"none\">Intet selskab</SelectItem>\n                            {companies.map((company) => (\n                              <SelectItem key={company.id} value={company.id}>\n                                {company.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setEditingUser(null)}>\n                    Annullér\n                  </Button>\n                  <Button type=\"submit\" disabled={editUserMutation.isPending} data-testid=\"button-save-user-changes\">\n                    {editUserMutation.isPending ? \"Gemmer...\" : \"Gem Ændringer\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":23230},"client/src/components/companies/CompanyStructureChart.tsx":{"content":"import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Building2, Home } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport type { Company, CompanyRelation, Property } from '@shared/schema';\n\ninterface CompanyNode extends Company {\n  parents: Array<{ parent: Company; percentage: number }>;\n  children: Array<{ child: Company; percentage: number }>;\n  properties: Property[];\n  level: number;\n  x: number;\n  y: number;\n}\n\ninterface CompanyStructureChartProps {\n  organizationId: string;\n}\n\nexport default function CompanyStructureChart({ organizationId }: CompanyStructureChartProps) {\n  const [, setLocation] = useLocation();\n\n  const { data: companies, isLoading: companiesLoading } = useQuery<Company[]>({\n    queryKey: ['/api/companies'],\n    refetchOnWindowFocus: true,\n    staleTime: 0\n  });\n\n  const { data: relations, isLoading: relationsLoading } = useQuery<CompanyRelation[]>({\n    queryKey: ['/api/company-relations'],\n    refetchOnWindowFocus: true, \n    staleTime: 0\n  });\n\n  const { data: properties, isLoading: propertiesLoading } = useQuery<Property[]>({\n    queryKey: ['/api/properties'],\n    refetchOnWindowFocus: true,\n    staleTime: 0\n  });\n\n  const isLoading = companiesLoading || relationsLoading || propertiesLoading;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <Skeleton className=\"h-8 w-full\" />\n        <Skeleton className=\"h-96 w-full\" />\n      </div>\n    );\n  }\n\n  if (!companies || !relations || companies.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n        <p>Ingen selskaber eller relationer fundet.</p>\n        <p className=\"text-sm mt-2\">Opret selskaber og relationer for at se koncernstrukturen.</p>\n      </div>\n    );\n  }\n\n  // Build company nodes with relationships\n  const companyNodes: Map<string, CompanyNode> = new Map();\n  \n  // Initialize all companies\n  companies.forEach(company => {\n    companyNodes.set(company.id, {\n      ...company,\n      parents: [],\n      children: [],\n      properties: [],\n      level: 0,\n      x: 0,\n      y: 0\n    });\n  });\n\n  // Add properties to their owner companies\n  if (properties) {\n    properties.forEach(property => {\n      if (property.ownerCompanyId) {\n        const ownerCompany = companyNodes.get(property.ownerCompanyId);\n        if (ownerCompany) {\n          ownerCompany.properties.push(property);\n        }\n      }\n    });\n  }\n\n  // Add relationships\n  relations.forEach(relation => {\n    const parent = companies.find(c => c.id === relation.parentCompanyId);\n    const child = companies.find(c => c.id === relation.childCompanyId);\n    \n    if (parent && child) {\n      const parentNode = companyNodes.get(parent.id);\n      const childNode = companyNodes.get(child.id);\n      \n      if (parentNode && childNode) {\n        childNode.parents.push({\n          parent,\n          percentage: parseInt(relation.ownershipPercentage)\n        });\n        \n        parentNode.children.push({\n          child,\n          percentage: parseInt(relation.ownershipPercentage)\n        });\n      }\n    }\n  });\n\n  // Calculate levels and positions with special layout for ultimate owners\n  const calculateLayout = () => {\n    // Find all ultimate owners (companies with no parents)\n    const ultimateOwners = Array.from(companyNodes.values()).filter(\n      node => node.parents.length === 0\n    );\n\n    // Find all leaf companies (companies with no children)\n    const leafCompanies = Array.from(companyNodes.values()).filter(\n      node => node.children.length === 0\n    );\n\n    // Find intermediate companies (companies that have both parents and children)\n    const intermediateCompanies = Array.from(companyNodes.values()).filter(\n      node => node.parents.length > 0 && node.children.length > 0\n    );\n\n    // Create a mapping of which ultimate owners connect to which leaf companies\n    const ownershipPaths: Map<string, { leaf: CompanyNode; intermediates: CompanyNode[]; percentage: number }[]> = new Map();\n    \n    // For each ultimate owner, trace all paths to leaf companies\n    ultimateOwners.forEach(owner => {\n      const paths: { leaf: CompanyNode; intermediates: CompanyNode[]; percentage: number }[] = [];\n      \n      const tracePaths = (currentNode: CompanyNode, intermediates: CompanyNode[], cumulativePercentage: number) => {\n        if (currentNode.children.length === 0) {\n          // This is a leaf company\n          paths.push({ \n            leaf: currentNode, \n            intermediates: [...intermediates],\n            percentage: cumulativePercentage\n          });\n        } else {\n          // Continue tracing through children\n          currentNode.children.forEach(childRel => {\n            const childNode = companyNodes.get(childRel.child.id);\n            if (childNode) {\n              const newIntermediates = currentNode === owner ? intermediates : [...intermediates, currentNode];\n              tracePaths(childNode, newIntermediates, childRel.percentage);\n            }\n          });\n        }\n      };\n      \n      tracePaths(owner, [], 100);\n      ownershipPaths.set(owner.id, paths);\n    });\n\n    // Layout: Ultimate owners on top row, intermediates in middle, leaf companies at bottom, properties under leaf companies\n    const levelGroups: CompanyNode[][] = [[], [], []]; // 3 levels max for this layout\n    const nodeWidth = 400; // More width to accommodate properties\n    const levelHeight = 340; // Increased height to accommodate properties with more spacing\n\n    // Level 0: Ultimate owners\n    ultimateOwners.forEach((owner, index) => {\n      owner.level = 0;\n      owner.x = 100 + (index * nodeWidth);\n      owner.y = 50;\n      levelGroups[0].push(owner);\n    });\n\n    // Level 2: Leaf companies (bottom row)\n    leafCompanies.forEach((leaf, index) => {\n      leaf.level = 2;\n      leaf.x = 100 + (index * nodeWidth);\n      leaf.y = 50 + (2 * levelHeight);\n      levelGroups[2].push(leaf);\n    });\n\n    // Level 1: Intermediate companies (middle row) - only if they exist in ownership chain\n    const usedIntermediates = new Set<string>();\n    ultimateOwners.forEach(owner => {\n      const paths = ownershipPaths.get(owner.id) || [];\n      paths.forEach(path => {\n        path.intermediates.forEach(intermediate => {\n          if (!usedIntermediates.has(intermediate.id)) {\n            usedIntermediates.add(intermediate.id);\n            levelGroups[1].push(intermediate);\n          }\n        });\n      });\n    });\n\n    // Position intermediate companies\n    levelGroups[1].forEach((intermediate, index) => {\n      intermediate.level = 1;\n      intermediate.x = 100 + (index * nodeWidth);\n      intermediate.y = 50 + levelHeight;\n    });\n\n    // Adjust horizontal spacing based on number of companies in each level\n    const maxNodesInLevel = Math.max(\n      levelGroups[0].length,\n      levelGroups[1].length, \n      levelGroups[2].length\n    );\n    \n    const minSvgWidth = Math.max(1200, maxNodesInLevel * nodeWidth + 300);\n    \n    // Re-center each level\n    levelGroups.forEach((levelNodes, level) => {\n      if (levelNodes.length > 0) {\n        const totalWidth = levelNodes.length * nodeWidth;\n        const startX = Math.max(100, (minSvgWidth - totalWidth) / 2);\n        \n        levelNodes.forEach((node, index) => {\n          node.x = startX + (index * nodeWidth);\n        });\n      }\n    });\n\n    return levelGroups.filter(level => level.length > 0); // Remove empty levels\n  };\n\n  const levelGroups = calculateLayout();\n  const allNodes = Array.from(companyNodes.values());\n  const maxLevel = Math.max(...allNodes.map(n => n.level));\n  const maxNodesInLevel = Math.max(...levelGroups.map(level => level.length));\n  const svgWidth = Math.max(1200, maxNodesInLevel * 400 + 300);\n  // Calculate height based on properties per company\n  const maxPropertiesPerCompany = Math.max(1, ...allNodes.map(node => node.properties.length));\n  const svgHeight = (maxLevel + 1) * 340 + 200 + (maxPropertiesPerCompany > 0 ? 100 : 0); // Dynamic height for properties with more spacing\n\n  // Generate SVG paths for connections\n  const generateConnections = () => {\n    const connections: JSX.Element[] = [];\n    \n    allNodes.forEach(parentNode => {\n      parentNode.children.forEach(childRel => {\n        const childNode = companyNodes.get(childRel.child.id);\n        if (childNode) {\n          const parentCenterX = parentNode.x + 70; // Half of company circle width\n          const parentCenterY = parentNode.y + 70;\n          const childCenterX = childNode.x + 70;\n          const childCenterY = childNode.y + 70;\n          \n          // Draw line from parent to child\n          connections.push(\n            <g key={`${parentNode.id}-${childNode.id}`}>\n              {/* Connection line - handle both vertical and angled connections */}\n              <line\n                x1={parentCenterX}\n                y1={parentCenterY + 35} // Start from bottom of parent circle\n                x2={childCenterX}\n                y2={childCenterY - 35} // End at top of child circle\n                stroke=\"rgb(59 130 246)\" // blue-500\n                strokeWidth=\"3\"\n                className=\"stroke-blue-500 dark:stroke-blue-400\"\n              />\n              \n              {/* Arrow */}\n              <polygon\n                points={`${childCenterX-8},${childCenterY-43} ${childCenterX+8},${childCenterY-43} ${childCenterX},${childCenterY-27}`}\n                fill=\"rgb(59 130 246)\"\n                className=\"fill-blue-500 dark:fill-blue-400\"\n              />\n              \n              {/* Ownership percentage box */}\n              <g>\n                <rect\n                  x={(parentCenterX + childCenterX) / 2 - 35}\n                  y={(parentCenterY + childCenterY) / 2 - 12}\n                  width=\"70\"\n                  height=\"24\"\n                  rx=\"4\"\n                  fill=\"rgb(229 231 235)\"\n                  stroke=\"rgb(156 163 175)\"\n                  strokeWidth=\"1\"\n                  className=\"fill-gray-200 dark:fill-gray-700 stroke-gray-400 dark:stroke-gray-500\"\n                />\n                <text\n                  x={(parentCenterX + childCenterX) / 2 - 8}\n                  y={(parentCenterY + childCenterY) / 2 + 4}\n                  textAnchor=\"middle\"\n                  className=\"text-sm font-bold fill-gray-900 dark:fill-white\"\n                  fontSize=\"12\"\n                >\n                  {childRel.percentage}%\n                </text>\n\n              </g>\n            </g>\n          );\n        }\n      });\n    });\n    \n    return connections;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Koncernstruktur\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Stamtræ over selskabsstruktur og ejerskabsforhold\n          </p>\n        </div>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"overflow-x-auto\">\n            <svg \n              width={svgWidth} \n              height={svgHeight}\n              viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n              className=\"w-full h-auto bg-gray-50 dark:bg-gray-900 rounded-lg\"\n            >\n              {/* Render connections */}\n              {generateConnections()}\n              \n              {/* Render company nodes */}\n              {allNodes.map(company => (\n                <g key={company.id}>\n                  {/* Company circle */}\n                  <circle\n                    cx={company.x + 70}\n                    cy={company.y + 70}\n                    r=\"35\"\n                    fill=\"rgb(51 65 85)\"\n                    className=\"fill-slate-700 dark:fill-slate-600\"\n                  />\n                  \n                  {/* Building icon */}\n                  <g transform={`translate(${company.x + 55}, ${company.y + 55})`}>\n                    <Building2 \n                      size={30} \n                      color=\"white\"\n                      className=\"stroke-white\"\n                    />\n                  </g>\n                  \n                  {/* Company name */}\n                  <text\n                    x={company.x + 70}\n                    y={company.y + 130}\n                    textAnchor=\"middle\"\n                    className=\"text-sm font-bold fill-gray-900 dark:fill-white\"\n                    fontSize=\"14\"\n                  >\n                    {company.name}\n                  </text>\n                  \n                  {/* CVR number */}\n                  <text\n                    x={company.x + 70}\n                    y={company.y + 145}\n                    textAnchor=\"middle\"\n                    className=\"text-xs fill-gray-600 dark:fill-gray-400\"\n                    fontSize=\"12\"\n                  >\n                    CVR: {company.cvrNumber}\n                  </text>\n                  \n                  {/* Properties owned by this company */}\n                  {company.properties.map((property, index) => {\n                    // For single property: center it under the company\n                    // For multiple properties: spread them horizontally but with better spacing\n                    let propX, propY;\n                    \n                    if (company.properties.length === 1) {\n                      // Single property - center it directly under the company\n                      propX = company.x + 30; // Center under company circle (140px width, property 80px width)\n                      propY = company.y + 220;\n                    } else {\n                      // Multiple properties - spread horizontally\n                      const totalWidth = company.properties.length * 100; // 100px per property including spacing\n                      const startX = company.x + 70 - totalWidth / 2; // Center the group under company\n                      propX = startX + index * 100;\n                      propY = company.y + 220;\n                    }\n                    \n                    return (\n                      <g key={property.id}>\n                        {/* Connection line from company to property - 60% transparent */}\n                        <line\n                          x1={company.x + 70}\n                          y1={company.y + 105}\n                          x2={propX + 40}\n                          y2={propY - 15}\n                          stroke=\"rgb(34 197 94)\"\n                          strokeWidth=\"2\"\n                          strokeOpacity=\"0.4\"\n                          className=\"stroke-green-500 dark:stroke-green-400\"\n                        />\n                        \n                        {/* Clickable property rectangle */}\n                        <rect\n                          x={propX}\n                          y={propY}\n                          width=\"80\"\n                          height=\"45\"\n                          rx=\"8\"\n                          fill=\"rgb(34 197 94)\"\n                          className=\"fill-green-500 dark:fill-green-600 cursor-pointer hover:fill-green-600 dark:hover:fill-green-500\"\n                          onClick={() => setLocation(`/properties/${property.id}`)}\n                        />\n                        \n                        {/* Home icon - centered in the box */}\n                        <g transform={`translate(${propX + 31}, ${propY + 13})`}>\n                          <Home \n                            size={18} \n                            color=\"white\"\n                            className=\"stroke-white pointer-events-none\"\n                          />\n                        </g>\n                        \n                        {/* Property name (below the rectangle) */}\n                        <text\n                          x={propX + 40}\n                          y={propY + 65}\n                          textAnchor=\"middle\"\n                          className=\"text-sm fill-gray-800 dark:fill-gray-200 font-semibold pointer-events-none\"\n                          fontSize=\"13\"\n                        >\n                          {property.name && property.name.trim() ? \n                            (property.name.length > 18 ? `${property.name.substring(0, 18)}...` : property.name) : \n                            (property.address.length > 18 ? `${property.address.substring(0, 18)}...` : property.address)\n                          }\n                        </text>\n                      </g>\n                    );\n                  })}\n                </g>\n              ))}\n            </svg>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">\n          Sammendrag\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                {companies.length}\n              </p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Selskaber i alt\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\n                {relations.length}\n              </p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Ejerskabsforhold\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                {properties?.length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Ejendomme i alt\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n\n    </div>\n  );\n}","size_bytes":18165},"client/src/components/companies/CompanyRelationForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { insertCompanyRelationSchema, insertCompanySchema, type InsertCompanyRelation, type Company } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { z } from \"zod\";\n\n// Extended schema for creating new parent/child companies\nconst createRelationSchema = z.object({\n  type: z.enum([\"parent\", \"child\"]), // Type of relation to create\n  existing: z.boolean(), // Whether to use existing company or create new one\n  existingCompanyId: z.string().optional(),\n  newCompany: z.object({\n    name: z.string().min(1, \"Selskabsnavn er påkrævet\"),\n    cvrNumber: z.coerce.number().int().min(10000000).max(99999999).optional().nullable(),\n  }).optional(),\n  ownershipPercentage: z.coerce.number().min(0.01, \"Ejerskabsprocent skal være større end 0\").max(100, \"Ejerskabsprocent kan ikke overstige 100%\"),\n});\n\ntype CreateRelationFormData = z.infer<typeof createRelationSchema>;\n\ninterface CompanyRelationFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n  companyId: string;\n  companyName: string;\n  relationType: \"parent\" | \"child\";\n}\n\nexport default function CompanyRelationForm({ \n  isOpen, \n  onClose, \n  companyId, \n  companyName,\n  relationType \n}: CompanyRelationFormProps) {\n  const queryClient = useQueryClient();\n  const [createNewCompany, setCreateNewCompany] = useState(false);\n\n  const { data: companies = [] } = useQuery<Company[]>({\n    queryKey: ['/api/companies'],\n    enabled: isOpen,\n  });\n\n  // Filter out the current company from the list\n  const availableCompanies = companies.filter(c => c.id !== companyId);\n\n  const form = useForm<CreateRelationFormData>({\n    resolver: zodResolver(createRelationSchema),\n    defaultValues: {\n      type: relationType,\n      existing: true,\n      ownershipPercentage: 0,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: CreateRelationFormData) => {\n      let targetCompanyId: string;\n\n      if (data.existing) {\n        if (!data.existingCompanyId) {\n          throw new Error(\"Selskab skal vælges\");\n        }\n        targetCompanyId = data.existingCompanyId;\n      } else {\n        if (!data.newCompany) {\n          throw new Error(\"Selskabsdata mangler\");\n        }\n        // Create new company first  \n        console.log('Creating new company:', data.newCompany);\n        const response = await fetch('/api/companies', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          credentials: 'include',\n          body: JSON.stringify(data.newCompany),\n        });\n        \n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || 'Fejl ved oprettelse af selskab');\n        }\n        \n        const newCompany = await response.json() as Company;\n        console.log('New company response:', newCompany);\n        \n        if (!newCompany || !newCompany.id) {\n          throw new Error(\"Fejl ved oprettelse af nyt selskab\");\n        }\n        targetCompanyId = newCompany.id;\n      }\n\n      // Create the relation\n      const relationData = relationType === \"parent\" \n        ? {\n            parentCompanyId: targetCompanyId,\n            childCompanyId: companyId,\n            ownershipPercentage: data.ownershipPercentage,\n          }\n        : {\n            parentCompanyId: companyId,\n            childCompanyId: targetCompanyId,\n            ownershipPercentage: data.ownershipPercentage,\n          };\n\n      console.log('RelationType:', relationType, 'TargetCompanyId:', targetCompanyId, 'CompanyId:', companyId);\n      console.log('Sending relation data:', relationData);\n      return await apiRequest(\"/api/company-relations\", \"POST\", relationData);\n    },\n    onSuccess: () => {\n      // Invalidate all related queries to ensure fresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-relations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId, \"relations\"] });\n      toast({\n        title: \"Success\",\n        description: `${relationType === \"parent\" ? \"Moderselskab\" : \"Datterselskab\"} tilføjet`,\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: CreateRelationFormData) => {\n    createMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>\n            Tilføj {relationType === \"parent\" ? \"moderselskab\" : \"datterselskab\"} til {companyName}\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n          {/* Choose existing or create new */}\n          <div className=\"space-y-2\">\n            <Label>Vælg handling</Label>\n            <Select\n              value={createNewCompany ? \"new\" : \"existing\"}\n              onValueChange={(value) => {\n                setCreateNewCompany(value === \"new\");\n                form.setValue(\"existing\", value === \"existing\");\n              }}\n            >\n              <SelectTrigger data-testid=\"select-action-type\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"existing\">Vælg eksisterende selskab</SelectItem>\n                <SelectItem value=\"new\">Opret nyt selskab</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {!createNewCompany ? (\n            /* Select existing company */\n            <div className=\"space-y-2\">\n              <Label>Eksisterende selskab</Label>\n              <Select\n                value={form.watch(\"existingCompanyId\") || \"\"}\n                onValueChange={(value) => form.setValue(\"existingCompanyId\", value)}\n              >\n                <SelectTrigger data-testid=\"select-existing-company\">\n                  <SelectValue placeholder=\"Vælg selskab\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableCompanies.map((company) => (\n                    <SelectItem key={company.id} value={company.id}>\n                      {company.name}\n                      {company.cvrNumber && ` (CVR: ${company.cvrNumber})`}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {form.formState.errors.existingCompanyId && (\n                <p className=\"text-sm text-red-600\">\n                  {form.formState.errors.existingCompanyId.message}\n                </p>\n              )}\n            </div>\n          ) : (\n            /* Create new company fields */\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"newCompanyName\">Selskabsnavn</Label>\n                <Input\n                  id=\"newCompanyName\"\n                  {...form.register(\"newCompany.name\")}\n                  data-testid=\"input-new-company-name\"\n                />\n                {form.formState.errors.newCompany?.name && (\n                  <p className=\"text-sm text-red-600 mt-1\">\n                    {form.formState.errors.newCompany.name.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"newCompanyCvr\">CVR-nummer (valgfrit)</Label>\n                <Input\n                  id=\"newCompanyCvr\"\n                  {...form.register(\"newCompany.cvrNumber\")}\n                  placeholder=\"12345678\"\n                  data-testid=\"input-new-company-cvr\"\n                />\n                {form.formState.errors.newCompany?.cvrNumber && (\n                  <p className=\"text-sm text-red-600 mt-1\">\n                    {form.formState.errors.newCompany.cvrNumber.message}\n                  </p>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Ownership percentage */}\n          <div>\n            <Label htmlFor=\"ownershipPercentage\">Ejerandel (%)</Label>\n            <Input\n              id=\"ownershipPercentage\"\n              type=\"number\"\n              min=\"0.01\"\n              max=\"100\"\n              step=\"0.01\"\n              {...form.register(\"ownershipPercentage\")}\n              data-testid=\"input-ownership-percentage\"\n            />\n            {form.formState.errors.ownershipPercentage && (\n              <p className=\"text-sm text-red-600 mt-1\">\n                {form.formState.errors.ownershipPercentage.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n              Annuller\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createMutation.isPending}\n              data-testid=\"button-save\"\n            >\n              {createMutation.isPending ? \"Gemmer...\" : \"Gem\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9827},"client/src/components/companies/EditRelationDialog.tsx":{"content":"import React, { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport type { CompanyRelation, Company } from '@shared/schema';\n\ninterface EditRelationDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  relation: CompanyRelation | null;\n  parentCompany: Company | null;\n  childCompany: Company | null;\n}\n\nexport default function EditRelationDialog({ \n  isOpen, \n  onClose, \n  relation, \n  parentCompany, \n  childCompany \n}: EditRelationDialogProps) {\n  const { toast } = useToast();\n  const [ownershipPercentage, setOwnershipPercentage] = useState(\n    relation ? relation.ownershipPercentage : ''\n  );\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: { ownershipPercentage: number }) => {\n      if (!relation) throw new Error('Ingen relation at opdatere');\n      return await apiRequest(`/api/company-relations/${relation.id}`, \"PUT\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-relations\"] });\n      toast({\n        title: \"Opdateret\",\n        description: \"Ejerskabsforhold blev opdateret\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Kunne ikke opdatere ejerskabsforhold\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      if (!relation) throw new Error('Ingen relation at slette');\n      return await apiRequest(`/api/company-relations/${relation.id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-relations\"] });\n      toast({\n        title: \"Slettet\",\n        description: \"Ejerskabsforhold blev slettet\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Kunne ikke slette ejerskabsforhold\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSave = () => {\n    const percentage = parseFloat(ownershipPercentage);\n    if (isNaN(percentage) || percentage < 0.01 || percentage > 100) {\n      toast({\n        title: \"Fejl\",\n        description: \"Ejerskabsprocent skal være mellem 0.01 og 100\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateMutation.mutate({ ownershipPercentage: percentage });\n  };\n\n  const handleDelete = () => {\n    if (confirm('Er du sikker på at du vil slette dette ejerskabsforhold?')) {\n      deleteMutation.mutate();\n    }\n  };\n\n  // Reset state when dialog opens with new relation\n  React.useEffect(() => {\n    if (relation) {\n      setOwnershipPercentage(relation.ownershipPercentage);\n    }\n  }, [relation]);\n\n  if (!relation || !parentCompany || !childCompany) {\n    return null;\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Rediger ejerskabsforhold</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n              <strong className=\"text-gray-900 dark:text-white\">{parentCompany.name}</strong> ejer\n            </div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              <strong className=\"text-gray-900 dark:text-white\">{childCompany.name}</strong>\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"ownershipPercentage\">Ejerskabsprocent</Label>\n            <Input\n              id=\"ownershipPercentage\"\n              type=\"number\"\n              min=\"0.01\"\n              max=\"100\"\n              step=\"0.01\"\n              value={ownershipPercentage}\n              onChange={(e) => setOwnershipPercentage(e.target.value)}\n              placeholder=\"f.eks. 51\"\n              data-testid=\"input-ownership-percentage\"\n            />\n            <div className=\"text-xs text-gray-500 mt-1\">\n              Indtast ejerskabsprocent mellem 0.01 og 100\n            </div>\n          </div>\n\n          <div className=\"flex justify-between pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"destructive\"\n              onClick={handleDelete}\n              disabled={deleteMutation.isPending}\n              data-testid=\"button-delete-relation\"\n            >\n              {deleteMutation.isPending ? 'Sletter...' : 'Slet forhold'}\n            </Button>\n\n            <div className=\"space-x-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel\"\n              >\n                Annuller\n              </Button>\n              <Button\n                type=\"button\"\n                onClick={handleSave}\n                disabled={updateMutation.isPending}\n                data-testid=\"button-save-relation\"\n              >\n                {updateMutation.isPending ? 'Gemmer...' : 'Gem'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5687},"client/src/pages/invitation.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Loader2 } from \"lucide-react\";\n\nconst acceptInvitationSchema = z.object({\n  name: z.string().min(1, \"Navn er påkrævet\"),\n  password: z.string().min(6, \"Adgangskode skal være mindst 6 tegn\"),\n  confirmPassword: z.string().min(6, \"Bekræft adgangskode\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Adgangskoder matcher ikke\",\n  path: [\"confirmPassword\"],\n});\n\ntype AcceptInvitationData = z.infer<typeof acceptInvitationSchema>;\n\nexport default function InvitationPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  // Get token from URL parameters\n  const urlParams = new URLSearchParams(window.location.search);\n  const token = urlParams.get('token');\n\n  const form = useForm<AcceptInvitationData>({\n    resolver: zodResolver(acceptInvitationSchema),\n    defaultValues: {\n      name: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Verify invitation token\n  const { data: invitation, isLoading: isVerifyingInvitation, error: verificationError } = useQuery({\n    queryKey: [`/api/users/invitation/verify/${token}`],\n    enabled: !!token,\n  });\n\n  const acceptInvitationMutation = useMutation({\n    mutationFn: async (data: AcceptInvitationData) => {\n      return await apiRequest(\"/api/users/invitation/accept\", \"POST\", {\n        token,\n        name: data.name,\n        password: data.password,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Konto oprettet\",\n        description: \"Din konto er blevet oprettet. Du kan nu logge ind.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl ved kontooprettelse\",\n        description: error.message || \"Kunne ikke oprette konto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!token) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Ugyldig invitation</CardTitle>\n            <CardDescription>\n              Der mangler et invitationstoken i URL'en.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isVerifyingInvitation) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-center\">\n              <Loader2 className=\"h-6 w-6 animate-spin\" />\n              <span className=\"ml-2\">Verificerer invitation...</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (verificationError || !invitation) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Ugyldig invitation</CardTitle>\n            <CardDescription>\n              Invitationen er ugyldig eller er udløbet. Kontakt venligst din administrator.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle>Velkommen til Doorway</CardTitle>\n          <CardDescription>\n            Du er inviteret til at oprette en konto. Udfyld formularen nedenfor for at komme i gang.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-4 p-3 bg-blue-50 rounded-lg\">\n            <p className=\"text-sm text-blue-700\">\n              <strong>Email:</strong> {invitation.email}\n            </p>\n            <p className=\"text-sm text-blue-700\">\n              <strong>Rolle:</strong> {invitation.role === 'admin' ? 'Administrator' : 'Bruger'}\n            </p>\n          </div>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit((data) => acceptInvitationMutation.mutate(data))} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Fulde navn</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Indtast dit fulde navn\" \n                        {...field}\n                        data-testid=\"input-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Adgangskode</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\" \n                        placeholder=\"Mindst 6 tegn\" \n                        {...field}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bekræft adgangskode</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\" \n                        placeholder=\"Gentag adgangskoden\" \n                        {...field}\n                        data-testid=\"input-confirm-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={acceptInvitationMutation.isPending}\n                data-testid=\"button-accept-invitation\"\n              >\n                {acceptInvitationMutation.isPending && (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                )}\n                Opret konto\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7105},"client/src/components/leases/LeaseTenantForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertLeaseTenantSchema } from \"@shared/schema\";\nimport type { Tenant, LeaseTenant, InsertLeaseTenant } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Danish number formatting functions\nconst formatDanishNumber = (value: string | number): string => {\n  // If it's a number, use Intl.NumberFormat for proper Danish formatting\n  if (typeof value === 'number') {\n    return new Intl.NumberFormat('da-DK', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2,\n    }).format(value);\n  }\n  \n  // If it's a string, process it for manual input\n  const cleanValue = value.replace(/[^\\d,]/g, '');\n  \n  // Handle empty input\n  if (!cleanValue || cleanValue === ',') return '';\n  \n  // Split by comma to handle decimals - only allow one comma\n  const parts = cleanValue.split(',');\n  let integerPart = parts[0] || '';\n  let decimalPart = parts[1] || '';\n  \n  // If multiple commas, only use first two parts\n  if (parts.length > 2) {\n    integerPart = parts[0];\n    decimalPart = parts[1];\n  }\n  \n  // Add thousand separators to integer part (dots)\n  const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n  \n  // Return formatted number with comma as decimal separator if user typed comma\n  return parts.length > 1 ? `${formattedInteger},${decimalPart}` : formattedInteger;\n};\n\nconst parseDanishNumber = (value: string): number => {\n  // Remove thousand separators (dots) and replace comma with dot for parsing\n  const cleanValue = value.replace(/\\./g, '').replace(',', '.');\n  return parseFloat(cleanValue) || 0;\n};\n\nconst formSchema = z.object({\n  tenantId: z.string().min(1, \"Lejer er påkrævet\"),\n  leaseId: z.string().min(1, \"Lejemål er påkrævet\"),\n  periodStart: z.string().min(1, \"Startdato er påkrævet\"),\n  periodEnd: z.string().optional(),\n  rentAmount: z.union([z.string(), z.number()]).refine((val) => {\n    if (val === \"\" || val === null || val === undefined) return false;\n    const num = typeof val === 'string' ? parseDanishNumber(val) : val;\n    return num > 0;\n  }, \"Lejebeløb skal være større end 0\"),\n  advanceWater: z.union([z.string(), z.number()]).optional().or(z.literal(\"\")),\n  advanceHeating: z.union([z.string(), z.number()]).optional().or(z.literal(\"\")),\n  advanceElectricity: z.union([z.string(), z.number()]).optional().or(z.literal(\"\")),\n  advanceOther: z.union([z.string(), z.number()]).optional().or(z.literal(\"\")),\n  depositType: z.string().min(1, \"Depositum type er påkrævet\"),\n  depositAmount: z.union([z.string(), z.number()]).optional().or(z.literal(\"\")),\n  prepaidType: z.string().min(1, \"Forudbetalt leje type er påkrævet\"),\n  prepaidAmount: z.union([z.string(), z.number()]).optional().or(z.literal(\"\")),\n  regulationType: z.string().min(1, \"Regulering er påkrævet\"),\n  note: z.string().optional(),\n}).refine((data) => {\n  if (data.periodEnd && data.periodStart) {\n    return new Date(data.periodEnd) >= new Date(data.periodStart);\n  }\n  return true;\n}, {\n  message: \"Slutdato skal være efter eller lig med startdato\",\n  path: [\"periodEnd\"],\n}).refine((data) => {\n  if (data.depositType === \"amount\") {\n    return data.depositAmount && parseFloat(data.depositAmount.toString()) > 0;\n  }\n  return true;\n}, {\n  message: \"Depositumbeløb er påkrævet når 'Beløb' er valgt\",\n  path: [\"depositAmount\"],\n}).refine((data) => {\n  if (data.prepaidType === \"amount\") {\n    return data.prepaidAmount && parseFloat(data.prepaidAmount.toString()) > 0;\n  }\n  return true;\n}, {\n  message: \"Forudbetalt beløb er påkrævet når 'Beløb' er valgt\",\n  path: [\"prepaidAmount\"],\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface LeaseTenantFormProps {\n  leaseId: string;\n  leaseTenant?: LeaseTenant | null;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst depositOptions = [\n  { value: \"none\", label: \"Ingen\" },\n  { value: \"1_month\", label: \"1 måned\" },\n  { value: \"2_months\", label: \"2 måneder\" },\n  { value: \"3_months\", label: \"3 måneder\" },\n  { value: \"4_months\", label: \"4 måneder\" },\n  { value: \"5_months\", label: \"5 måneder\" },\n  { value: \"6_months\", label: \"6 måneder\" },\n  { value: \"amount\", label: \"Beløb\" },\n];\n\nconst prepaidOptions = [\n  { value: \"none\", label: \"Ingen\" },\n  { value: \"1_month\", label: \"1 måned\" },\n  { value: \"2_months\", label: \"2 måneder\" },\n  { value: \"3_months\", label: \"3 måneder\" },\n  { value: \"4_months\", label: \"4 måneder\" },\n  { value: \"5_months\", label: \"5 måneder\" },\n  { value: \"6_months\", label: \"6 måneder\" },\n  { value: \"amount\", label: \"Beløb\" },\n];\n\nconst regulationOptions = [\n  { value: \"none\", label: \"Ingen regulering\" },\n  { value: \"NPI\", label: \"NPI\" },\n  { value: \"NPI_min_1\", label: \"NPI min. 1%\" },\n  { value: \"NPI_min_2\", label: \"NPI min. 2%\" },\n  { value: \"NPI_min_3\", label: \"NPI min. 3%\" },\n];\n\nexport function LeaseTenantForm({ leaseId, leaseTenant, onSuccess, onCancel }: LeaseTenantFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!leaseTenant;\n  const [calculatedDeposit, setCalculatedDeposit] = useState<number>(0);\n  const [calculatedPrepaid, setCalculatedPrepaid] = useState<number>(0);\n\n  const { data: tenants = [] } = useQuery<Tenant[]>({\n    queryKey: [\"/api/tenants\"],\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      leaseId,\n      tenantId: leaseTenant?.tenantId || \"\",\n      rentAmount: leaseTenant?.rentAmount ? parseFloat(leaseTenant.rentAmount.toString()) : \"\",\n      advanceWater: leaseTenant?.advanceWater ? parseFloat(leaseTenant.advanceWater.toString()) : \"\",\n      advanceHeating: leaseTenant?.advanceHeating ? parseFloat(leaseTenant.advanceHeating.toString()) : \"\",\n      advanceElectricity: leaseTenant?.advanceElectricity ? parseFloat(leaseTenant.advanceElectricity.toString()) : \"\",\n      advanceOther: leaseTenant?.advanceOther ? parseFloat(leaseTenant.advanceOther.toString()) : \"\",\n      periodStart: leaseTenant?.periodStart ? leaseTenant.periodStart.split('T')[0] : \"\",\n      periodEnd: leaseTenant?.periodEnd ? leaseTenant.periodEnd.split('T')[0] : \"\",\n      depositType: leaseTenant?.depositType || \"none\",\n      depositAmount: leaseTenant?.depositAmount ? parseFloat(leaseTenant.depositAmount.toString()) : \"\",\n      prepaidType: leaseTenant?.prepaidType || \"none\",\n      prepaidAmount: leaseTenant?.prepaidAmount ? parseFloat(leaseTenant.prepaidAmount.toString()) : \"\",\n      regulationType: leaseTenant?.regulationType || \"none\",\n      note: leaseTenant?.note || \"\",\n    },\n  });\n\n  const watchRentAmount = form.watch(\"rentAmount\");\n  const watchDepositType = form.watch(\"depositType\");\n  const watchPrepaidType = form.watch(\"prepaidType\");\n\n  // Calculate deposit and prepaid amounts when rent or type changes\n  useEffect(() => {\n    // Handle both number and formatted string values\n    let rentAmount = 0;\n    if (typeof watchRentAmount === 'number') {\n      rentAmount = watchRentAmount;\n    } else if (typeof watchRentAmount === 'string') {\n      rentAmount = parseDanishNumber(watchRentAmount);\n    }\n    \n    console.log(\"Rent calculation - watchRentAmount:\", watchRentAmount, \"type:\", typeof watchRentAmount, \"parsed:\", rentAmount);\n    \n    // Calculate deposit amount\n    if (watchDepositType !== \"amount\" && watchDepositType !== \"none\" && rentAmount > 0) {\n      const months = parseInt(watchDepositType.split(\"_\")[0]);\n      const calculated = Math.round(rentAmount * months * 100) / 100; // Round to 2 decimal places\n      console.log(\"Deposit calculation - rentAmount:\", rentAmount, \"months:\", months, \"calculated:\", calculated);\n      setCalculatedDeposit(calculated);\n      // Only set form value if not editing or if type is not \"amount\"\n      if (!isEditing || watchDepositType !== \"amount\") {\n        form.setValue(\"depositAmount\", calculated);\n      }\n    } else if (watchDepositType === \"none\") {\n      setCalculatedDeposit(0);\n      form.setValue(\"depositAmount\", \"\");\n    } else if (watchDepositType === \"amount\") {\n      setCalculatedDeposit(0); // No calculation for manual amount\n    }\n\n    // Calculate prepaid amount\n    if (watchPrepaidType !== \"amount\" && watchPrepaidType !== \"none\" && rentAmount > 0) {\n      const months = parseInt(watchPrepaidType.split(\"_\")[0]);\n      const calculated = Math.round(rentAmount * months * 100) / 100; // Round to 2 decimal places\n      console.log(\"Prepaid calculation - rentAmount:\", rentAmount, \"months:\", months, \"calculated:\", calculated);\n      setCalculatedPrepaid(calculated);\n      // Only set form value if not editing or if type is not \"amount\"\n      if (!isEditing || watchPrepaidType !== \"amount\") {\n        form.setValue(\"prepaidAmount\", calculated);\n      }\n    } else if (watchPrepaidType === \"none\") {\n      setCalculatedPrepaid(0);\n      form.setValue(\"prepaidAmount\", \"\");\n    } else if (watchPrepaidType === \"amount\") {\n      setCalculatedPrepaid(0); // No calculation for manual amount\n    }\n  }, [watchRentAmount, watchDepositType, watchPrepaidType, form, isEditing]);\n\n  // Format numbers when editing existing data\n  useEffect(() => {\n    if (isEditing && leaseTenant) {\n      console.log(\"Loading existing lease tenant data:\", leaseTenant);\n      // Set formatted values for display\n      if (leaseTenant.rentAmount) {\n        const rentValue = Math.round(parseFloat(leaseTenant.rentAmount.toString()) * 100) / 100;\n        console.log(\"Rent amount from DB:\", leaseTenant.rentAmount, \"parsed:\", rentValue);\n        form.setValue(\"rentAmount\", rentValue);\n      }\n      \n      if (leaseTenant.advanceWater) {\n        const waterValue = parseFloat(leaseTenant.advanceWater.toString());\n        form.setValue(\"advanceWater\", waterValue);\n      }\n      \n      if (leaseTenant.advanceHeating) {\n        const heatingValue = parseFloat(leaseTenant.advanceHeating.toString());\n        console.log(\"Advance heating from DB:\", leaseTenant.advanceHeating, \"parsed:\", heatingValue);\n        form.setValue(\"advanceHeating\", heatingValue);\n      }\n      \n      if (leaseTenant.advanceElectricity) {\n        const electricityValue = parseFloat(leaseTenant.advanceElectricity.toString());\n        form.setValue(\"advanceElectricity\", electricityValue);\n      }\n      \n      if (leaseTenant.advanceOther) {\n        const otherValue = parseFloat(leaseTenant.advanceOther.toString());\n        form.setValue(\"advanceOther\", otherValue);\n      }\n      \n      if (leaseTenant.depositAmount) {\n        const depositValue = parseFloat(leaseTenant.depositAmount.toString());\n        console.log(\"Deposit amount from DB:\", leaseTenant.depositAmount, \"parsed:\", depositValue);\n        form.setValue(\"depositAmount\", depositValue);\n        // Set the displayed calculated amount when editing\n        if (leaseTenant.depositType !== \"amount\" && leaseTenant.depositType !== \"none\") {\n          setCalculatedDeposit(depositValue);\n        }\n      }\n      \n      if (leaseTenant.prepaidAmount) {\n        const prepaidValue = parseFloat(leaseTenant.prepaidAmount.toString());\n        form.setValue(\"prepaidAmount\", prepaidValue);\n        // Set the displayed calculated amount when editing\n        if (leaseTenant.prepaidType !== \"amount\" && leaseTenant.prepaidType !== \"none\") {\n          setCalculatedPrepaid(prepaidValue);\n        }\n      }\n    }\n  }, [isEditing, leaseTenant, form]);\n\n  const mutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const url = isEditing ? `/api/lease-tenants/${leaseTenant.id}` : \"/api/lease-tenants\";\n      const method = isEditing ? \"PATCH\" : \"POST\";\n      \n      // Clean up empty strings and convert to proper types\n      const cleanData = {\n        ...data,\n        periodEnd: data.periodEnd || null,\n        rentAmount: typeof data.rentAmount === 'string' ? parseDanishNumber(data.rentAmount) : data.rentAmount,\n        advanceWater: data.advanceWater && data.advanceWater !== \"0,00\" && data.advanceWater !== \"0\" ? (typeof data.advanceWater === 'string' ? parseDanishNumber(data.advanceWater) : data.advanceWater) : null,\n        advanceHeating: data.advanceHeating && data.advanceHeating !== \"0,00\" && data.advanceHeating !== \"0\" ? (typeof data.advanceHeating === 'string' ? parseDanishNumber(data.advanceHeating) : data.advanceHeating) : null,\n        advanceElectricity: data.advanceElectricity && data.advanceElectricity !== \"0,00\" && data.advanceElectricity !== \"0\" ? (typeof data.advanceElectricity === 'string' ? parseDanishNumber(data.advanceElectricity) : data.advanceElectricity) : null,\n        advanceOther: data.advanceOther && data.advanceOther !== \"0,00\" && data.advanceOther !== \"0\" ? (typeof data.advanceOther === 'string' ? parseDanishNumber(data.advanceOther) : data.advanceOther) : null,\n        depositAmount: data.depositAmount ? Math.round((typeof data.depositAmount === 'string' ? parseDanishNumber(data.depositAmount) : data.depositAmount) * 100) / 100 : null,\n        prepaidAmount: data.prepaidAmount ? Math.round((typeof data.prepaidAmount === 'string' ? parseDanishNumber(data.prepaidAmount) : data.prepaidAmount) * 100) / 100 : null,\n        note: data.note || null,\n      };\n      \n      console.log(\"Sending to server:\", JSON.stringify(cleanData, null, 2));\n      return apiRequest(url, method, cleanData);\n    },\n    onSuccess: () => {\n      toast({\n        title: isEditing ? \"Kontrakt opdateret\" : \"Kontrakt oprettet\",\n        description: isEditing ? \"Lejekontrakten er blevet opdateret\" : \"Den nye lejekontrakt er blevet oprettet\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl ved gem af kontrakten\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    mutation.mutate(data);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('da-DK', {\n      style: 'currency',\n      currency: 'DKK',\n    }).format(amount);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"tenantId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Lejer *</FormLabel>\n                <Select \n                  onValueChange={field.onChange} \n                  defaultValue={field.value}\n                  data-testid=\"select-tenant\"\n                >\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Vælg lejer\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {tenants.map((tenant) => (\n                      <SelectItem key={tenant.id} value={tenant.id}>\n                        #{tenant.internalNumber} - {tenant.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"rentAmount\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Månedlig leje *</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"text\"\n                    placeholder=\"25.000,50\"\n                    data-testid=\"input-rent-amount\"\n                    value={field.value !== undefined && field.value !== null ? (typeof field.value === 'number' ? formatDanishNumber(field.value) : field.value) : \"\"}\n                    onChange={(e) => {\n                      const inputValue = e.target.value;\n                      \n                      // Allow typing of numbers, comma, and dots\n                      if (inputValue === \"\" || /^[\\d.,]*$/.test(inputValue)) {\n                        // Store the raw formatted value (with comma) instead of converting to number\n                        const formatted = formatDanishNumber(inputValue);\n                        field.onChange(formatted);\n                      }\n                    }}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"advanceWater\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Aconto vand</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"text\"\n                    placeholder=\"0,00\"\n                    data-testid=\"input-advance-water\"\n                    value={field.value !== undefined && field.value !== null ? (typeof field.value === 'number' ? formatDanishNumber(field.value) : field.value) : \"\"}\n                    onChange={(e) => {\n                      const inputValue = e.target.value;\n                      if (inputValue === \"\" || /^[\\d.,]*$/.test(inputValue)) {\n                        const formatted = formatDanishNumber(inputValue);\n                        field.onChange(formatted);\n                      }\n                    }}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"advanceHeating\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Aconto varme</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"text\"\n                    placeholder=\"0,00\"\n                    data-testid=\"input-advance-heating\"\n                    value={field.value !== undefined && field.value !== null ? (typeof field.value === 'number' ? formatDanishNumber(field.value) : field.value) : \"\"}\n                    onChange={(e) => {\n                      const inputValue = e.target.value;\n                      if (inputValue === \"\" || /^[\\d.,]*$/.test(inputValue)) {\n                        const formatted = formatDanishNumber(inputValue);\n                        field.onChange(formatted);\n                      }\n                    }}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"advanceElectricity\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Aconto el</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"text\"\n                    placeholder=\"0,00\"\n                    data-testid=\"input-advance-electricity\"\n                    value={field.value !== undefined && field.value !== null ? (typeof field.value === 'number' ? formatDanishNumber(field.value) : field.value) : \"\"}\n                    onChange={(e) => {\n                      const inputValue = e.target.value;\n                      if (inputValue === \"\" || /^[\\d.,]*$/.test(inputValue)) {\n                        const formatted = formatDanishNumber(inputValue);\n                        field.onChange(formatted);\n                      }\n                    }}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"advanceOther\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Aconto øvrigt</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"text\"\n                    placeholder=\"0,00\"\n                    data-testid=\"input-advance-other\"\n                    value={field.value !== undefined && field.value !== null ? (typeof field.value === 'number' ? formatDanishNumber(field.value) : field.value) : \"\"}\n                    onChange={(e) => {\n                      const inputValue = e.target.value;\n                      if (inputValue === \"\" || /^[\\d.,]*$/.test(inputValue)) {\n                        const formatted = formatDanishNumber(inputValue);\n                        field.onChange(formatted);\n                      }\n                    }}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"periodStart\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Lejeperiode start *</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"date\"\n                    data-testid=\"input-period-start\"\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"periodEnd\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Lejeperiode slut</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"date\"\n                    data-testid=\"input-period-end\"\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <FormField\n              control={form.control}\n              name=\"depositType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Depositum type</FormLabel>\n                  <Select \n                    onValueChange={field.onChange} \n                    defaultValue={field.value}\n                    data-testid=\"select-deposit-type\"\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {depositOptions.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"depositAmount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Depositum beløb\n                    {watchDepositType !== \"amount\" && calculatedDeposit > 0 && (\n                      <span className=\"text-sm text-gray-500 ml-2\">\n                        (Beregnet: {formatCurrency(calculatedDeposit)})\n                      </span>\n                    )}\n                  </FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"text\"\n                      placeholder=\"75.000,50\"\n                      disabled={watchDepositType !== \"amount\"}\n                      data-testid=\"input-deposit-amount\"\n                      value={\n                        watchDepositType !== \"amount\" && calculatedDeposit > 0 \n                          ? formatCurrency(calculatedDeposit).replace(' kr', '').replace(' DKK', '') \n                          : field.value !== undefined && field.value !== null ? (typeof field.value === 'number' ? formatDanishNumber(field.value) : field.value) : \"\"\n                      }\n                      onChange={(e) => {\n                        const inputValue = e.target.value;\n                        if (inputValue === \"\" || /^[\\d.,]*$/.test(inputValue)) {\n                          const formatted = formatDanishNumber(inputValue);\n                          field.onChange(formatted);\n                        }\n                      }}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <FormField\n              control={form.control}\n              name=\"prepaidType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Forudbetalt leje type</FormLabel>\n                  <Select \n                    onValueChange={field.onChange} \n                    defaultValue={field.value}\n                    data-testid=\"select-prepaid-type\"\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {prepaidOptions.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"prepaidAmount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Forudbetalt beløb\n                    {watchPrepaidType !== \"amount\" && calculatedPrepaid > 0 && (\n                      <span className=\"text-sm text-gray-500 ml-2\">\n                        (Beregnet: {formatCurrency(calculatedPrepaid)})\n                      </span>\n                    )}\n                  </FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"text\"\n                      placeholder=\"25.000,50\"\n                      disabled={watchPrepaidType !== \"amount\"}\n                      data-testid=\"input-prepaid-amount\"\n                      value={\n                        watchPrepaidType !== \"amount\" && calculatedPrepaid > 0 \n                          ? formatCurrency(calculatedPrepaid).replace(' kr', '').replace(' DKK', '') \n                          : field.value !== undefined && field.value !== null ? (typeof field.value === 'number' ? formatDanishNumber(field.value) : field.value) : \"\"\n                      }\n                      onChange={(e) => {\n                        const inputValue = e.target.value;\n                        if (inputValue === \"\" || /^[\\d.,]*$/.test(inputValue)) {\n                          const formatted = formatDanishNumber(inputValue);\n                          field.onChange(formatted);\n                        }\n                      }}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"regulationType\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Lejeregulering</FormLabel>\n              <Select \n                onValueChange={field.onChange} \n                defaultValue={field.value}\n                data-testid=\"select-regulation\"\n              >\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {regulationOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"note\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Note</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Yderligere information om kontrakten\"\n                  className=\"min-h-[80px]\"\n                  data-testid=\"textarea-note\"\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex gap-2 pt-4\">\n          <Button \n            type=\"submit\" \n            disabled={mutation.isPending}\n            data-testid=\"button-submit\"\n          >\n            {mutation.isPending ? \"Gemmer...\" : (isEditing ? \"Opdater kontrakt\" : \"Opret kontrakt\")}\n          </Button>\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={onCancel}\n            data-testid=\"button-cancel\"\n          >\n            Annuller\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":29977},"client/src/pages/leases.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, FileText, Building2, Users, ArrowUpDown, Search, Filter, Eye, Edit2, MoreHorizontal } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { LeaseForm } from \"@/components/leases/LeaseForm\";\nimport { LeaseTenantForm } from \"@/components/leases/LeaseTenantForm\";\nimport { LeaseTenantsManager } from \"@/components/leases/LeaseTenantsManager\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Lease, Property, LeaseTenant } from \"@shared/schema\";\n\ntype LeaseWithProperty = Lease & { property: Property };\n\ntype SortField = 'name' | 'type' | 'property' | 'area' | 'rent';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function Leases() {\n  const { user } = useAuth();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isTenantDialogOpen, setIsTenantDialogOpen] = useState(false);\n  const [editingLease, setEditingLease] = useState<Lease | null>(null);\n  const [selectedLeaseId, setSelectedLeaseId] = useState<string | null>(null);\n  const [managingLease, setManagingLease] = useState<Lease | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [sortField, setSortField] = useState<SortField>('name');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('asc');\n\n  const { data: leases = [], isLoading } = useQuery<LeaseWithProperty[]>({\n    queryKey: ['/api/leases'],\n  });\n\n  // Get all lease-tenants for showing active status\n  const { data: allLeaseTenants = [] } = useQuery<(LeaseTenant & { tenant: { name: string; internalNumber: number } })[]>({\n    queryKey: ['/api/all-lease-tenants'],\n    enabled: leases.length > 0,\n  });\n\n  const { data: tenants = [] } = useQuery<LeaseTenant[]>({\n    queryKey: ['/api/leases', selectedLeaseId, 'tenants'],\n    enabled: !!selectedLeaseId,\n  });\n\n  const canCreateOrEdit = user?.role === 'admin';\n\n  const handleCreateTenant = (leaseId: string) => {\n    setSelectedLeaseId(leaseId);\n    setIsTenantDialogOpen(true);\n  };\n\n  const handleManageLeaseTenantsOld = (lease: Lease) => {\n    setManagingLease(lease);\n  };\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  const filteredAndSortedLeases = useMemo(() => {\n    let filtered = leases.filter(lease => {\n      const matchesSearch = lease.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                           lease.property.name.toLowerCase().includes(searchQuery.toLowerCase());\n      const matchesType = typeFilter === \"all\" || lease.type === typeFilter;\n      return matchesSearch && matchesType;\n    });\n\n    filtered.sort((a, b) => {\n      let aValue: any = '';\n      let bValue: any = '';\n\n      switch (sortField) {\n        case 'name':\n          aValue = a.name.toLowerCase();\n          bValue = b.name.toLowerCase();\n          break;\n        case 'type':\n          aValue = a.type?.toLowerCase() || '';\n          bValue = b.type?.toLowerCase() || '';\n          break;\n        case 'property':\n          aValue = a.property.name.toLowerCase();\n          bValue = b.property.name.toLowerCase();\n          break;\n        case 'area':\n          aValue = a.totalArea;\n          bValue = b.totalArea;\n          break;\n        case 'rent':\n          aValue = parseFloat(a.maxRentPerSqm || '0');\n          bValue = parseFloat(b.maxRentPerSqm || '0');\n          break;\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return filtered;\n  }, [leases, searchQuery, typeFilter, sortField, sortDirection]);\n\n  const uniqueTypes = useMemo(() => {\n    const types = leases.map(lease => lease.type).filter(Boolean);\n    return Array.from(new Set(types));\n  }, [leases]);\n\n  // Helper function to get active lease-tenant for a lease\n  const getActiveLeaseTenant = (leaseId: string) => {\n    const now = new Date();\n    return allLeaseTenants.find(lt => {\n      if (lt.leaseId !== leaseId) return false;\n      \n      const startDate = new Date(lt.periodStart);\n      const endDate = lt.periodEnd ? new Date(lt.periodEnd) : null;\n      \n      return now >= startDate && (!endDate || now <= endDate);\n    });\n  };\n\n  // Helper function to check if lease is actively rented\n  const isLeaseRented = (leaseId: string) => {\n    return !!getActiveLeaseTenant(leaseId);\n  };\n\n  const formatCurrency = (value: string | number) => {\n    const num = typeof value === 'string' ? parseFloat(value) : value;\n    return new Intl.NumberFormat('da-DK', {\n      style: 'currency',\n      currency: 'DKK',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(num);\n  };\n\n  const formatArea = (area: number) => {\n    return new Intl.NumberFormat('da-DK').format(area);\n  };\n\n  const getLeaseTypeColor = (type: string) => {\n    switch (type) {\n      case 'Bolig': return 'bg-blue-100 text-blue-800';\n      case 'Detail': return 'bg-green-100 text-green-800';\n      case 'Kontor': return 'bg-purple-100 text-purple-800';\n      case 'Lager': return 'bg-orange-100 text-orange-800';\n      case 'Garage': return 'bg-gray-100 text-gray-800';\n      case 'Industri': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Lejemål</h1>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center space-x-3\">\n          <FileText className=\"h-8 w-8 text-primary\" />\n          <h1 className=\"text-2xl font-bold text-gray-900\">Lejemål</h1>\n        </div>\n        {canCreateOrEdit && (\n          <Button \n            onClick={() => setIsCreateDialogOpen(true)}\n            data-testid=\"button-create-lease\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Nyt lejemål\n          </Button>\n        )}\n      </div>\n\n      {leases.length === 0 ? (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <FileText className=\"mx-auto h-16 w-16 text-gray-400 mb-4\" />\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              Ingen lejemål endnu\n            </h2>\n            <p className=\"text-gray-600 mb-4\">\n              {canCreateOrEdit \n                ? \"Kom i gang ved at oprette dit første lejemål.\" \n                : \"Der er ikke oprettet nogen lejemål endnu.\"}\n            </p>\n            {canCreateOrEdit && (\n              <Button onClick={() => setIsCreateDialogOpen(true)}>\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Opret lejemål\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {/* Filters and search */}\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Søg efter lejemål eller ejendom...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-leases\"\n              />\n            </div>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-type\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                <SelectValue placeholder=\"Filtrer efter type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Alle typer</SelectItem>\n                {uniqueTypes.map((type) => (\n                  <SelectItem key={type} value={type}>\n                    {type}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Results count */}\n          <div className=\"text-sm text-gray-600\">\n            Viser {filteredAndSortedLeases.length} af {leases.length} lejemål\n          </div>\n\n          {/* Table */}\n          <div className=\"border rounded-lg\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => handleSort('name')}\n                      className=\"h-auto p-0 font-semibold\"\n                      data-testid=\"sort-name\"\n                    >\n                      Navn\n                      <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </TableHead>\n                  <TableHead>\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => handleSort('type')}\n                      className=\"h-auto p-0 font-semibold\"\n                      data-testid=\"sort-type\"\n                    >\n                      Type\n                      <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </TableHead>\n                  <TableHead>\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => handleSort('property')}\n                      className=\"h-auto p-0 font-semibold\"\n                      data-testid=\"sort-property\"\n                    >\n                      Ejendom\n                      <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </TableHead>\n                  <TableHead className=\"text-right\">\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => handleSort('area')}\n                      className=\"h-auto p-0 font-semibold\"\n                      data-testid=\"sort-area\"\n                    >\n                      Areal\n                      <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </TableHead>\n                  <TableHead className=\"text-right\">\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => handleSort('rent')}\n                      className=\"h-auto p-0 font-semibold\"\n                      data-testid=\"sort-rent\"\n                    >\n                      Max leje/m²\n                      <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </TableHead>\n                  <TableHead className=\"text-center\">Lejer</TableHead>\n                  <TableHead className=\"text-center\">Status</TableHead>\n                  <TableHead className=\"text-center\">Handlinger</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredAndSortedLeases.map((lease) => (\n                  <TableRow key={lease.id} className=\"hover:bg-gray-50\">\n                    <TableCell>\n                      <div className=\"font-medium\">{lease.name}</div>\n                      <div className=\"text-sm text-gray-500\">\n                        {formatArea(lease.totalArea)} m² samlet areal\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {lease.type && (\n                        <Badge className={getLeaseTypeColor(lease.type)}>\n                          {lease.type}\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Building2 className=\"h-4 w-4 mr-2 text-gray-400\" />\n                        {lease.property.name}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {formatArea(lease.totalArea)} m²\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {lease.maxRentPerSqm ? formatCurrency(lease.maxRentPerSqm) : '-'}\n                    </TableCell>\n                    <TableCell className=\"text-center\">\n                      {(() => {\n                        const activeTenant = getActiveLeaseTenant(lease.id);\n                        return activeTenant ? (\n                          <div className=\"text-sm\">\n                            <div className=\"font-medium\">\n                              {user?.role === 'broker' ? `Lejer ${activeTenant.tenant.internalNumber}` : activeTenant.tenant.name}\n                            </div>\n                            <div className=\"text-gray-500 text-xs\">\n                              {formatCurrency(activeTenant.rentAmount)}/mdr\n                            </div>\n                          </div>\n                        ) : (\n                          <span className=\"text-gray-400 text-sm\">-</span>\n                        );\n                      })()}\n                    </TableCell>\n                    <TableCell className=\"text-center\">\n                      <div className=\"flex flex-col items-center space-y-1\">\n                        {lease.vatRegistered && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            Moms\n                          </Badge>\n                        )}\n                        {isLeaseRented(lease.id) ? (\n                          <Badge className=\"bg-green-100 text-green-800 text-xs\">\n                            Udlejet\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            Tomgang\n                          </Badge>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-center\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-actions-${lease.id}`}>\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem asChild>\n                            <Link href={`/leases/${lease.id}`} data-testid={`menu-view-${lease.id}`}>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              Se lejemål\n                            </Link>\n                          </DropdownMenuItem>\n                          {canCreateOrEdit && (\n                            <>\n                              <DropdownMenuItem onClick={() => setEditingLease(lease)} data-testid={`menu-edit-${lease.id}`}>\n                                <Edit2 className=\"h-4 w-4 mr-2\" />\n                                Rediger\n                              </DropdownMenuItem>\n                              <DropdownMenuItem onClick={() => setManagingLease(lease)} data-testid={`menu-manage-tenants-${lease.id}`}>\n                                <Users className=\"h-4 w-4 mr-2\" />\n                                Håndter lejere\n                              </DropdownMenuItem>\n                            </>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n\n          {filteredAndSortedLeases.length === 0 && searchQuery && (\n            <div className=\"text-center py-8 text-gray-500\">\n              Ingen lejemål matcher din søgning \"{searchQuery}\"\n            </div>\n          )}\n        </div>\n      )}\n\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Nyt lejemål</DialogTitle>\n          </DialogHeader>\n          <LeaseForm onClose={() => setIsCreateDialogOpen(false)} />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={!!editingLease} onOpenChange={(open) => !open && setEditingLease(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Rediger lejemål</DialogTitle>\n          </DialogHeader>\n          {editingLease && (\n            <LeaseForm \n              lease={editingLease} \n              onClose={() => setEditingLease(null)} \n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isTenantDialogOpen} onOpenChange={setIsTenantDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Tilføj lejer til lejemål</DialogTitle>\n          </DialogHeader>\n          {selectedLeaseId && (\n            <LeaseTenantForm\n              leaseId={selectedLeaseId}\n              onSuccess={() => {\n                setIsTenantDialogOpen(false);\n                setSelectedLeaseId(null);\n              }}\n              onCancel={() => {\n                setIsTenantDialogOpen(false);\n                setSelectedLeaseId(null);\n              }}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={!!managingLease} onOpenChange={(open) => !open && setManagingLease(null)}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5\" />\n              <span>Administrer lejere</span>\n            </DialogTitle>\n          </DialogHeader>\n          {managingLease && (\n            <LeaseTenantsManager\n              lease={managingLease}\n              onClose={() => setManagingLease(null)}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19698},"client/src/components/leases/LeaseTenantsManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Edit2, Trash2, Users, Calendar, DollarSign, FileText, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { LeaseTenantForm } from \"./LeaseTenantForm\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { LeaseTenant, Tenant, Lease } from \"@shared/schema\";\n\ntype LeaseTenantWithTenant = LeaseTenant & { tenant: Tenant };\n\ninterface LeaseTenantsManagerProps {\n  lease: Lease;\n  onClose: () => void;\n}\n\nexport function LeaseTenantsManager({ lease, onClose }: LeaseTenantsManagerProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingLeaseTenant, setEditingLeaseTenant] = useState<LeaseTenantWithTenant | null>(null);\n  const [deletingLeaseTenant, setDeletingLeaseTenant] = useState<LeaseTenantWithTenant | null>(null);\n\n  const { data: leaseTenants = [], isLoading } = useQuery<LeaseTenantWithTenant[]>({\n    queryKey: ['/api/leases', lease.id, 'tenants'],\n  });\n\n  const canCreateOrEdit = user?.role === 'admin';\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(`/api/lease-tenants/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Lejekontrakt slettet\",\n        description: \"Lejekontrakten er blevet slettet\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/leases', lease.id, 'tenants'] });\n      setDeletingLeaseTenant(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl ved sletning af lejekontrakten\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatCurrency = (amount: number | string) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    if (isNaN(num)) return '0 kr';\n    return new Intl.NumberFormat('da-DK', {\n      style: 'currency',\n      currency: 'DKK',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(num);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('da-DK', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n    });\n  };\n\n  const getStatusBadge = (leaseTenant: LeaseTenantWithTenant) => {\n    const now = new Date();\n    const startDate = new Date(leaseTenant.periodStart);\n    const endDate = leaseTenant.periodEnd ? new Date(leaseTenant.periodEnd) : null;\n\n    if (now < startDate) {\n      return <Badge variant=\"secondary\">Fremtidig</Badge>;\n    }\n    \n    if (endDate && now > endDate) {\n      return <Badge variant=\"destructive\">Udløbet</Badge>;\n    }\n    \n    return <Badge className=\"bg-green-100 text-green-800\">Aktiv</Badge>;\n  };\n\n  const handleFormSuccess = () => {\n    setIsFormOpen(false);\n    setEditingLeaseTenant(null);\n    queryClient.invalidateQueries({ queryKey: ['/api/leases', lease.id, 'tenants'] });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-lg font-medium\">Indlæser lejekontraktrakter...</h3>\n        </div>\n        <div className=\"animate-pulse space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"h-20 bg-gray-200 rounded\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h3 className=\"text-lg font-medium\">Lejere for {lease.name}</h3>\n          <p className=\"text-sm text-gray-600\">\n            Administrer lejekontraktrakter for dette lejemål\n          </p>\n        </div>\n        {canCreateOrEdit && (\n          <Button onClick={() => setIsFormOpen(true)} data-testid=\"button-add-lease-tenant\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Tilføj lejer\n          </Button>\n        )}\n      </div>\n\n      {leaseTenants.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <Users className=\"mx-auto h-16 w-16 text-gray-400 mb-4\" />\n            <h4 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              Ingen lejere endnu\n            </h4>\n            <p className=\"text-gray-600 mb-4\">\n              {canCreateOrEdit \n                ? \"Dette lejemål har ikke nogen lejekontraktrakter endnu. Kom i gang ved at tilføje den første lejer.\" \n                : \"Der er ikke oprettet nogen lejekontraktrakter for dette lejemål endnu.\"}\n            </p>\n            {canCreateOrEdit && (\n              <Button onClick={() => setIsFormOpen(true)}>\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Tilføj første lejer\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"border rounded-lg\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Lejer</TableHead>\n                <TableHead>Periode</TableHead>\n                <TableHead className=\"text-right\">Månedlig leje</TableHead>\n                <TableHead className=\"text-right\">Depositum</TableHead>\n                <TableHead className=\"text-right\">Forudbetalt</TableHead>\n                <TableHead className=\"text-center\">Status</TableHead>\n                {canCreateOrEdit && <TableHead className=\"text-center\">Handlinger</TableHead>}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {leaseTenants.map((leaseTenant) => (\n                <TableRow key={leaseTenant.id} data-testid={`row-lease-tenant-${leaseTenant.id}`}>\n                  <TableCell>\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">{leaseTenant.tenant.name}</span>\n                      <span className=\"text-sm text-gray-500\">\n                        #{leaseTenant.tenant.internalNumber}\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Calendar className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm\">\n                        {formatDate(leaseTenant.periodStart)}\n                        {leaseTenant.periodEnd && ` - ${formatDate(leaseTenant.periodEnd)}`}\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex items-center justify-end space-x-2\">\n                      <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                      <span>{formatCurrency(leaseTenant.rentAmount)}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    {leaseTenant.depositType === 'none' ? \n                      'Ingen' : \n                      leaseTenant.depositAmount ? \n                        formatCurrency(leaseTenant.depositAmount) : \n                        '-'\n                    }\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    {leaseTenant.prepaidType === 'none' ? \n                      'Ingen' : \n                      leaseTenant.prepaidAmount ? \n                        formatCurrency(leaseTenant.prepaidAmount) : \n                        '-'\n                    }\n                  </TableCell>\n                  <TableCell className=\"text-center\">\n                    {getStatusBadge(leaseTenant)}\n                  </TableCell>\n                  {canCreateOrEdit && (\n                    <TableCell className=\"text-center\">\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setEditingLeaseTenant(leaseTenant)}\n                          data-testid={`button-edit-lease-tenant-${leaseTenant.id}`}\n                        >\n                          <Edit2 className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setDeletingLeaseTenant(leaseTenant)}\n                          data-testid={`button-delete-lease-tenant-${leaseTenant.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4 text-red-500\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  )}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      )}\n\n      {/* Add/Edit Form Dialog */}\n      <Dialog open={isFormOpen || !!editingLeaseTenant} onOpenChange={(open) => {\n        if (!open) {\n          setIsFormOpen(false);\n          setEditingLeaseTenant(null);\n        }\n      }}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingLeaseTenant ? \"Rediger lejekontrakt\" : \"Tilføj lejer til lejemål\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingLeaseTenant ? \n                \"Rediger lejekontraktens detaljer nedenfor.\" : \n                \"Udfyld formularen for at tilføje en ny lejer til dette lejemål.\"\n              }\n            </DialogDescription>\n          </DialogHeader>\n          <LeaseTenantForm\n            leaseId={lease.id}\n            leaseTenant={editingLeaseTenant}\n            onSuccess={handleFormSuccess}\n            onCancel={() => {\n              setIsFormOpen(false);\n              setEditingLeaseTenant(null);\n            }}\n          />\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deletingLeaseTenant} onOpenChange={(open) => {\n        if (!open) setDeletingLeaseTenant(null);\n      }}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"flex items-center space-x-2\">\n              <AlertCircle className=\"h-5 w-5 text-red-500\" />\n              <span>Slet lejekontrakt</span>\n            </AlertDialogTitle>\n            <AlertDialogDescription>\n              Er du sikker på, at du vil slette lejekontrakten for{\" \"}\n              <strong>{deletingLeaseTenant?.tenant.name}</strong>?\n              <br /><br />\n              Denne handling kan ikke fortrydes.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annuller</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingLeaseTenant && deleteMutation.mutate(deletingLeaseTenant.id)}\n              className=\"bg-red-600 hover:bg-red-700\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Slet lejekontrakt\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":12044},"client/src/pages/Tenants.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Edit2, Trash2, User, Building, Mail, Phone, MoreHorizontal, ArrowUpDown, Search, Filter } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { TenantForm } from \"@/components/tenants/TenantForm\";\nimport { ConfirmationDialog } from \"@/components/ui/confirmation-dialog\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Tenant } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Tenants() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [location] = useLocation();\n  const [selectedTenant, setSelectedTenant] = useState<Tenant | null>(null);\n  const [showForm, setShowForm] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [tenantToDelete, setTenantToDelete] = useState<Tenant | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [sortField, setSortField] = useState<'name' | 'email' | 'phone' | 'internalNumber'>('name');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n\n  // Handle URL search parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const searchParam = urlParams.get('search');\n    if (searchParam) {\n      setSearchQuery(decodeURIComponent(searchParam));\n    }\n  }, [location]);\n  \n  const canWrite = user?.role === 'admin' || user?.role === 'user';\n\n  const { data: tenants = [], isLoading } = useQuery<Tenant[]>({\n    queryKey: [\"/api/tenants\"],\n  });\n\n  const filteredAndSortedTenants = useMemo(() => {\n    let filtered = tenants.filter(tenant => {\n      const matchesSearch = tenant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                           (tenant.email || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\n                           (tenant.phone || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\n                           tenant.internalNumber.toString().includes(searchQuery);\n      const matchesType = typeFilter === \"all\" || tenant.type === typeFilter;\n      return matchesSearch && matchesType;\n    });\n\n    filtered.sort((a, b) => {\n      let aValue: any = '';\n      let bValue: any = '';\n\n      switch (sortField) {\n        case 'name':\n          aValue = a.name.toLowerCase();\n          bValue = b.name.toLowerCase();\n          break;\n        case 'email':\n          aValue = (a.email || '').toLowerCase();\n          bValue = (b.email || '').toLowerCase();\n          break;\n        case 'phone':\n          aValue = (a.phone || '').toLowerCase();\n          bValue = (b.phone || '').toLowerCase();\n          break;\n        case 'internalNumber':\n          aValue = a.internalNumber;\n          bValue = b.internalNumber;\n          break;\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return filtered;\n  }, [tenants, searchQuery, typeFilter, sortField, sortDirection]);\n\n  const handleSort = (field: typeof sortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  const uniqueTypes = useMemo(() => {\n    const types = tenants.map(tenant => tenant.type).filter(Boolean);\n    return Array.from(new Set(types));\n  }, [tenants]);\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(`/api/tenants/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tenants\"] });\n      setShowDeleteDialog(false);\n      setTenantToDelete(null);\n      toast({\n        title: \"Lejer slettet\",\n        description: \"Lejeren er blevet slettet\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl ved sletning af lejeren\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (tenant: Tenant) => {\n    setSelectedTenant(tenant);\n    setShowForm(true);\n  };\n\n  const handleDelete = (tenant: Tenant) => {\n    setTenantToDelete(tenant);\n    setShowDeleteDialog(true);\n  };\n\n  const confirmDelete = () => {\n    if (tenantToDelete) {\n      deleteMutation.mutate(tenantToDelete.id);\n    }\n  };\n\n  const handleFormSuccess = () => {\n    setShowForm(false);\n    setSelectedTenant(null);\n    queryClient.invalidateQueries({ queryKey: [\"/api/tenants\"] });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-2xl font-bold\">Lejere</h1>\n        </div>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\" />\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-gray-200 rounded\" />\n                  <div className=\"h-3 bg-gray-200 rounded w-2/3\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold\" data-testid=\"page-title\">Lejere</h1>\n          <p className=\"text-gray-600\" data-testid=\"page-description\">\n            Administrer stamdata for alle lejere\n          </p>\n        </div>\n        {canWrite && (\n          <Dialog open={showForm} onOpenChange={setShowForm}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-tenant\" onClick={() => setSelectedTenant(null)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Opret lejer\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"dialog-title\">\n                  {selectedTenant ? \"Rediger lejer\" : \"Opret ny lejer\"}\n                </DialogTitle>\n                <DialogDescription data-testid=\"dialog-description\">\n                  {selectedTenant ? \"Rediger lejerens stamdata\" : \"Udfyld stamdata for den nye lejer\"}\n                </DialogDescription>\n              </DialogHeader>\n              <TenantForm\n                tenant={selectedTenant}\n                onSuccess={handleFormSuccess}\n                onCancel={() => setShowForm(false)}\n              />\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n\n      {tenants.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <User className=\"w-12 h-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\" data-testid=\"empty-state-title\">\n              Ingen lejere endnu\n            </h3>\n            <p className=\"text-gray-600 text-center mb-4\" data-testid=\"empty-state-description\">\n              Opret din første lejer for at komme i gang\n            </p>\n            {canWrite && (\n              <Button onClick={() => setShowForm(true)} data-testid=\"button-create-first-tenant\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Opret lejer\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {/* Search and filters */}\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Søg efter navn, e-mail, telefon eller internt nummer...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-tenants\"\n              />\n            </div>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-type\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                <SelectValue placeholder=\"Filtrer efter type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Alle typer</SelectItem>\n                {uniqueTypes.map((type) => (\n                  <SelectItem key={type} value={type}>\n                    {type === \"erhverv\" ? \"Erhverv\" : \"Privat\"}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Results count */}\n          <div className=\"text-sm text-gray-600\">\n            Viser {filteredAndSortedTenants.length} af {tenants.length} lejere\n          </div>\n\n          {/* Table */}\n          <div className=\"border rounded-lg\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => handleSort('internalNumber')}\n                      className=\"h-auto p-0 font-semibold\"\n                      data-testid=\"sort-internal-number\"\n                    >\n                      Intern nummer\n                      <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </TableHead>\n                  <TableHead>\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => handleSort('name')}\n                      className=\"h-auto p-0 font-semibold\"\n                      data-testid=\"sort-name\"\n                    >\n                      Navn\n                      <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </TableHead>\n                  <TableHead>Kontaktperson</TableHead>\n                  <TableHead>\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => handleSort('email')}\n                      className=\"h-auto p-0 font-semibold\"\n                      data-testid=\"sort-email\"\n                    >\n                      E-mail\n                      <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </TableHead>\n                  <TableHead>\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => handleSort('phone')}\n                      className=\"h-auto p-0 font-semibold\"\n                      data-testid=\"sort-phone\"\n                    >\n                      Telefon\n                      <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </TableHead>\n                  <TableHead className=\"text-center\">Handlinger</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredAndSortedTenants.map((tenant) => (\n                  <TableRow key={tenant.id} data-testid={`row-tenant-${tenant.id}`}>\n                    <TableCell className=\"font-medium\">\n                      <div data-testid={`tenant-number-${tenant.id}`}>\n                        #{tenant.internalNumber}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div data-testid={`tenant-name-${tenant.id}`}>\n                        {user?.role === 'broker' ? `Lejer ${tenant.internalNumber}` : tenant.name}\n                      </div>\n                      {tenant.type === \"erhverv\" && (\n                        <Badge variant=\"default\" className=\"mt-1\" data-testid={`tenant-type-${tenant.id}`}>\n                          <Building className=\"w-3 h-3 mr-1\" />\n                          Erhverv\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell data-testid={`tenant-contact-${tenant.id}`}>\n                      {user?.role === 'broker' ? \n                        (tenant.contactPerson ? 'Anonymiseret' : '-') : \n                        (tenant.contactPerson || '-')\n                      }\n                    </TableCell>\n                    <TableCell data-testid={`tenant-email-${tenant.id}`}>\n                      {user?.role === 'broker' ? `${tenant.email?.[0] || '*'}*****@*****` : tenant.email || '-'}\n                    </TableCell>\n                    <TableCell data-testid={`tenant-phone-${tenant.id}`}>\n                      {user?.role === 'broker' ? '*******' : tenant.phone || '-'}\n                    </TableCell>\n                    <TableCell className=\"text-center\">\n                      {canWrite && (\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-actions-${tenant.id}`}>\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => handleEdit(tenant)} data-testid={`menu-edit-${tenant.id}`}>\n                              <Edit2 className=\"h-4 w-4 mr-2\" />\n                              Rediger\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleDelete(tenant)} \n                              className=\"text-red-600\"\n                              data-testid={`menu-delete-${tenant.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Slet\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      )}\n\n      <ConfirmationDialog\n        open={showDeleteDialog}\n        onOpenChange={setShowDeleteDialog}\n        title=\"Slet lejer\"\n        description={`Er du sikker på, at du vil slette lejeren \"${tenantToDelete?.name}\"? Denne handling kan ikke fortrydes.`}\n        confirmText=\"Slet\"\n        cancelText=\"Annuller\"\n        onConfirm={confirmDelete}\n        isLoading={deleteMutation.isPending}\n        variant=\"destructive\"\n      />\n    </div>\n  );\n}","size_bytes":15877},"client/src/components/companies/OwnershipManagementDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Plus, Edit2, Trash2, Building, UserPlus, Users } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Company, CompanyRelation } from \"@shared/schema\";\nimport CompanyRelationForm from \"./CompanyRelationForm\";\nimport EditRelationDialog from \"./EditRelationDialog\";\n\ninterface OwnershipManagementDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  company: Company | null;\n}\n\nexport default function OwnershipManagementDialog({ \n  isOpen, \n  onClose, \n  company \n}: OwnershipManagementDialogProps) {\n  const { toast } = useToast();\n  const [isRelationFormOpen, setIsRelationFormOpen] = useState(false);\n  const [relationFormData, setRelationFormData] = useState<{\n    companyId: string;\n    companyName: string;\n    relationType: \"parent\" | \"child\";\n  } | null>(null);\n  const [editingRelation, setEditingRelation] = useState<{\n    relation: CompanyRelation;\n    parentCompany: Company | null;\n    childCompany: Company | null;\n  } | null>(null);\n\n  const { data: companies = [] } = useQuery<Company[]>({\n    queryKey: ['/api/companies'],\n    enabled: isOpen,\n  });\n\n  const { data: companyRelations = [] } = useQuery<CompanyRelation[]>({\n    queryKey: ['/api/company-relations'],\n    enabled: isOpen,\n    staleTime: 0,\n  });\n\n  const { data: parentRelations = [] } = useQuery<CompanyRelation[]>({\n    queryKey: ['/api/companies', company?.id, 'parents'],\n    queryFn: async () => {\n      if (!company?.id) return [];\n      const response = await fetch(`/api/companies/${company.id}/parents`);\n      if (!response.ok) throw new Error('Failed to fetch parent relations');\n      return response.json();\n    },\n    enabled: isOpen && !!company?.id,\n    staleTime: 0,\n  });\n\n  const { data: childRelations = [] } = useQuery<CompanyRelation[]>({\n    queryKey: ['/api/companies', company?.id, 'children'],\n    queryFn: async () => {\n      if (!company?.id) return [];\n      const response = await fetch(`/api/companies/${company.id}/children`);\n      if (!response.ok) throw new Error('Failed to fetch child relations');\n      return response.json();\n    },\n    enabled: isOpen && !!company?.id,\n    staleTime: 0,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (relationId: string) => {\n      const response = await fetch(`/api/company-relations/${relationId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/company-relations'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/companies', company?.id, 'parents'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/companies', company?.id, 'children'] });\n      toast({ \n        title: \"Ejerskabsforhold slettet\", \n        description: \"Ejerskabsforholdet blev slettet med succes\" \n      });\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Fejl\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const getCompanyName = (companyId: string) => {\n    const foundCompany = companies.find(c => c.id === companyId);\n    return foundCompany?.name || 'Ukendt selskab';\n  };\n\n  const getCvrNumber = (companyId: string) => {\n    const foundCompany = companies.find(c => c.id === companyId);\n    return foundCompany?.cvrNumber || null;\n  };\n\n  const handleEditRelation = (relation: CompanyRelation) => {\n    const parentCompany = companies.find(c => c.id === relation.parentCompanyId) || null;\n    const childCompany = companies.find(c => c.id === relation.childCompanyId) || null;\n    \n    setEditingRelation({\n      relation,\n      parentCompany,\n      childCompany\n    });\n  };\n\n  if (!company) return null;\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Building className=\"h-5 w-5\" />\n              Administrér ejerskab for {company.name}\n              {company.cvrNumber && <span className=\"text-sm text-gray-500\">(CVR: {company.cvrNumber})</span>}\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Parent Companies (Owners) */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-3\">\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <UserPlus className=\"h-5 w-5\" />\n                  Ejere af {company.name}\n                </CardTitle>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setRelationFormData({\n                      companyId: company.id,\n                      companyName: company.name,\n                      relationType: \"parent\",\n                    });\n                    setIsRelationFormOpen(true);\n                  }}\n                  data-testid=\"button-add-parent\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {parentRelations.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <UserPlus className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-sm text-gray-500\">Ingen ejere registreret</p>\n                    <p className=\"text-xs text-gray-400 mt-1\">Tilføj ejere ved at klikke på + knappen</p>\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Ejer</TableHead>\n                        <TableHead>Andel</TableHead>\n                        <TableHead className=\"text-right\">Handlinger</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {parentRelations.map((relation) => (\n                        <TableRow key={relation.id}>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{getCompanyName(relation.parentCompanyId)}</div>\n                              {getCvrNumber(relation.parentCompanyId) && (\n                                <div className=\"text-xs text-gray-500\">\n                                  CVR: {getCvrNumber(relation.parentCompanyId)}\n                                </div>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"font-semibold text-blue-600\">\n                              {parseFloat(relation.ownershipPercentage).toFixed(1)}%\n                            </span>\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end space-x-1\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleEditRelation(relation)}\n                                data-testid={`button-edit-parent-${relation.id}`}\n                              >\n                                <Edit2 className=\"h-3 w-3\" />\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => deleteMutation.mutate(relation.id)}\n                                data-testid={`button-delete-parent-${relation.id}`}\n                              >\n                                <Trash2 className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Child Companies (Subsidiaries) */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-3\">\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <Users className=\"h-5 w-5\" />\n                  Datterselskaber af {company.name}\n                </CardTitle>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setRelationFormData({\n                      companyId: company.id,\n                      companyName: company.name,\n                      relationType: \"child\",\n                    });\n                    setIsRelationFormOpen(true);\n                  }}\n                  data-testid=\"button-add-child\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {childRelations.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Users className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-sm text-gray-500\">Ingen datterselskaber registreret</p>\n                    <p className=\"text-xs text-gray-400 mt-1\">Tilføj datterselskaber ved at klikke på + knappen</p>\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Datterselskab</TableHead>\n                        <TableHead>Andel</TableHead>\n                        <TableHead className=\"text-right\">Handlinger</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {childRelations.map((relation) => (\n                        <TableRow key={relation.id}>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{getCompanyName(relation.childCompanyId)}</div>\n                              {getCvrNumber(relation.childCompanyId) && (\n                                <div className=\"text-xs text-gray-500\">\n                                  CVR: {getCvrNumber(relation.childCompanyId)}\n                                </div>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"font-semibold text-green-600\">\n                              {parseFloat(relation.ownershipPercentage).toFixed(1)}%\n                            </span>\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end space-x-1\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleEditRelation(relation)}\n                                data-testid={`button-edit-child-${relation.id}`}\n                              >\n                                <Edit2 className=\"h-3 w-3\" />\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => deleteMutation.mutate(relation.id)}\n                                data-testid={`button-delete-child-${relation.id}`}\n                              >\n                                <Trash2 className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Summary */}\n          <Card className=\"mt-4\">\n            <CardContent className=\"pt-6\">\n              <div className=\"grid grid-cols-2 gap-4 text-center\">\n                <div>\n                  <p className=\"text-2xl font-bold text-blue-600\">\n                    {parentRelations.reduce((sum, rel) => sum + parseFloat(rel.ownershipPercentage), 0).toFixed(1)}%\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Total ejerskab af andre</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {childRelations.reduce((sum, rel) => sum + parseFloat(rel.ownershipPercentage), 0).toFixed(1)}%\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Total ejerskab i andre selskaber</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </DialogContent>\n      </Dialog>\n\n      {/* Company Relations Dialog */}\n      {relationFormData && (\n        <CompanyRelationForm\n          isOpen={isRelationFormOpen}\n          onClose={() => {\n            setIsRelationFormOpen(false);\n            setRelationFormData(null);\n          }}\n          companyId={relationFormData.companyId}\n          companyName={relationFormData.companyName}\n          relationType={relationFormData.relationType}\n        />\n      )}\n\n      {/* Edit Relation Dialog */}\n      <EditRelationDialog\n        isOpen={!!editingRelation}\n        onClose={() => setEditingRelation(null)}\n        relation={editingRelation?.relation || null}\n        parentCompany={editingRelation?.parentCompany || null}\n        childCompany={editingRelation?.childCompany || null}\n      />\n    </>\n  );\n}","size_bytes":14800},"client/src/components/leases/LeaseForm.tsx":{"content":"import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertLeaseSchema, type InsertLease, type Lease, type Property } from \"@shared/schema\";\n\ninterface LeaseFormProps {\n  lease?: Lease;\n  onClose: () => void;\n}\n\nexport function LeaseForm({ lease, onClose }: LeaseFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: properties = [] } = useQuery<Property[]>({\n    queryKey: ['/api/properties'],\n  });\n\n  const form = useForm<InsertLease>({\n    resolver: zodResolver(insertLeaseSchema),\n    defaultValues: lease ? {\n      propertyId: lease.propertyId,\n      name: lease.name,\n      registeredArea: lease.registeredArea,\n      totalArea: lease.totalArea,\n      type: lease.type || undefined,\n      vatRegistered: lease.vatRegistered || false,\n      maxRentPerSqm: lease.maxRentPerSqm ? parseFloat(lease.maxRentPerSqm) : undefined,\n      yieldRequirementPct: lease.yieldRequirementPct ? parseFloat(lease.yieldRequirementPct) : undefined,\n    } : {\n      propertyId: \"\",\n      name: \"\",\n      registeredArea: 0,\n      totalArea: 0,\n      vatRegistered: false,\n    }\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertLease) => apiRequest(\"/api/leases\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leases\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Lejemål oprettet successfully\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl ved oprettelse af lejemål\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: Partial<InsertLease>) => \n      apiRequest(`/api/leases/${lease!.id}`, \"PATCH\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leases\"] });\n      toast({\n        title: \"Succes\", \n        description: \"Lejemål opdateret successfully\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl ved opdatering af lejemål\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertLease) => {\n    if (lease) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const formatNumber = (value: string) => {\n    const num = parseInt(value.replace(/\\D/g, ''));\n    if (isNaN(num)) return '';\n    return new Intl.NumberFormat('da-DK').format(num);\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"propertyId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Ejendom</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-property\">\n                      <SelectValue placeholder=\"Vælg ejendom\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {properties.map((property) => (\n                      <SelectItem key={property.id} value={property.id}>\n                        {property.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Navn</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"f.eks. Butik 1. sal\"\n                    data-testid=\"input-lease-name\"\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"type\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Type</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-lease-type\">\n                      <SelectValue placeholder=\"Vælg type\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"Bolig\">Bolig</SelectItem>\n                    <SelectItem value=\"Detail\">Detail</SelectItem>\n                    <SelectItem value=\"Kontor\">Kontor</SelectItem>\n                    <SelectItem value=\"Lager\">Lager</SelectItem>\n                    <SelectItem value=\"Garage\">Garage</SelectItem>\n                    <SelectItem value=\"Industri\">Industri</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"vatRegistered\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                <FormControl>\n                  <Checkbox\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"checkbox-vat-registered\"\n                  />\n                </FormControl>\n                <div className=\"space-y-1 leading-none\">\n                  <FormLabel>Momsregistreret</FormLabel>\n                </div>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"registeredArea\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Tinglyst areal (m²)</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\"\n                    min=\"0\"\n                    step=\"1\"\n                    placeholder=\"0\"\n                    data-testid=\"input-registered-area\"\n                    {...field}\n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"totalArea\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Samlet areal (m²)</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\"\n                    min=\"0\"\n                    step=\"1\"\n                    placeholder=\"0\"\n                    data-testid=\"input-total-area\"\n                    {...field}\n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"maxRentPerSqm\"\n            render={({ field }) => {\n              const [displayValue, setDisplayValue] = React.useState(field.value ? field.value.toString().replace('.', ',') : '');\n              \n              React.useEffect(() => {\n                if (field.value !== undefined) {\n                  setDisplayValue(field.value.toString().replace('.', ','));\n                }\n              }, [field.value]);\n\n              return (\n                <FormItem>\n                  <FormLabel>Max leje pr. m² (kr)</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"2000\"\n                      data-testid=\"input-max-rent-per-sqm\"\n                      value={displayValue}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setDisplayValue(value);\n                        \n                        if (value === '') {\n                          field.onChange(undefined);\n                        } else {\n                          const normalized = value.replace(',', '.');\n                          const parsed = parseFloat(normalized);\n                          if (!isNaN(parsed)) {\n                            field.onChange(parsed);\n                          }\n                        }\n                      }}\n                      onBlur={() => {\n                        if (field.value !== undefined) {\n                          setDisplayValue(field.value.toString().replace('.', ','));\n                        }\n                      }}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              );\n            }}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"yieldRequirementPct\"\n            render={({ field }) => {\n              const [displayValue, setDisplayValue] = React.useState(field.value ? field.value.toString().replace('.', ',') : '');\n              \n              React.useEffect(() => {\n                if (field.value !== undefined) {\n                  setDisplayValue(field.value.toString().replace('.', ','));\n                }\n              }, [field.value]);\n\n              return (\n                <FormItem>\n                  <FormLabel>Afkastkrav (%)</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"6,25\"\n                      data-testid=\"input-yield-requirement\"\n                      value={displayValue}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setDisplayValue(value);\n                        \n                        if (value === '') {\n                          field.onChange(undefined);\n                        } else {\n                          const normalized = value.replace(',', '.');\n                          const parsed = parseFloat(normalized);\n                          if (!isNaN(parsed)) {\n                            field.onChange(parsed);\n                          }\n                        }\n                      }}\n                      onBlur={() => {\n                        if (field.value !== undefined) {\n                          setDisplayValue(field.value.toString().replace('.', ','));\n                        }\n                      }}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              );\n            }}\n          />\n        </div>\n\n        <div className=\"flex justify-end space-x-4\">\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={onClose}\n            disabled={isLoading}\n            data-testid=\"button-cancel\"\n          >\n            Annuller\n          </Button>\n          <Button \n            type=\"submit\" \n            disabled={isLoading}\n            data-testid=\"button-submit\"\n          >\n            {isLoading ? \"Gemmer...\" : lease ? \"Opdater\" : \"Opret\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":12276},"client/src/components/tenants/TenantForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertTenantSchema } from \"@shared/schema\";\nimport type { Tenant, InsertTenant } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertTenantSchema.extend({\n  cvrNumber: z.string().optional(),\n  contactPerson: z.string().optional(),\n  invoiceEmail: z.string().email(\"Ugyldig email\").optional().or(z.literal(\"\")),\n  notes: z.string().optional(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface TenantFormProps {\n  tenant?: Tenant | null;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport function TenantForm({ tenant, onSuccess, onCancel }: TenantFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!tenant;\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: tenant?.name || \"\",\n      type: tenant?.type || \"privat\",\n      cvrNumber: tenant?.cvrNumber || \"\",\n      contactPerson: tenant?.contactPerson || \"\",\n      email: tenant?.email || \"\",\n      invoiceEmail: tenant?.invoiceEmail || \"\",\n      phone: tenant?.phone || \"\",\n      notes: tenant?.notes || \"\",\n    },\n  });\n\n  const watchType = form.watch(\"type\");\n\n  const mutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const url = isEditing ? `/api/tenants/${tenant.id}` : \"/api/tenants\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      \n      // Clean up empty strings\n      const cleanData = {\n        ...data,\n        cvrNumber: data.cvrNumber || null,\n        contactPerson: data.contactPerson || null,\n        invoiceEmail: data.invoiceEmail || null,\n        notes: data.notes || null,\n      };\n      \n      return apiRequest(url, method, cleanData);\n    },\n    onSuccess: () => {\n      toast({\n        title: isEditing ? \"Lejer opdateret\" : \"Lejer oprettet\",\n        description: isEditing ? \"Lejeren er blevet opdateret\" : \"Den nye lejer er blevet oprettet\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl ved gem af lejeren\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Navn *</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"Lejerens navn\"\n                    data-testid=\"input-name\"\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"type\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Type *</FormLabel>\n                <Select \n                  onValueChange={field.onChange} \n                  defaultValue={field.value}\n                  data-testid=\"select-type\"\n                >\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Vælg lejertype\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"privat\">Privat</SelectItem>\n                    <SelectItem value=\"erhverv\">Erhverv</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {watchType === \"erhverv\" && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"cvrNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>CVR-nummer</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"12345678\"\n                      data-testid=\"input-cvr\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"contactPerson\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Kontaktperson</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Navn på kontaktperson\"\n                      data-testid=\"input-contact-person\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email *</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"email\"\n                    placeholder=\"lejer@example.com\"\n                    data-testid=\"input-email\"\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"invoiceEmail\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Faktura email</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"email\"\n                    placeholder=\"faktura@example.com\"\n                    data-testid=\"input-invoice-email\"\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"phone\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Telefon *</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"+45 12 34 56 78\"\n                  data-testid=\"input-phone\"\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Noter</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Yderligere information om lejeren\"\n                  className=\"min-h-[100px]\"\n                  data-testid=\"textarea-notes\"\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex gap-2 pt-4\">\n          <Button \n            type=\"submit\" \n            disabled={mutation.isPending}\n            data-testid=\"button-submit\"\n          >\n            {mutation.isPending ? \"Gemmer...\" : (isEditing ? \"Opdater lejer\" : \"Opret lejer\")}\n          </Button>\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={onCancel}\n            data-testid=\"button-cancel\"\n          >\n            Annuller\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":8390},"client/src/components/ui/confirmation-dialog.tsx":{"content":"import {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface ConfirmationDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  title: string;\n  description: string;\n  confirmText?: string;\n  cancelText?: string;\n  onConfirm: () => void;\n  isLoading?: boolean;\n  variant?: \"default\" | \"destructive\";\n}\n\nexport function ConfirmationDialog({\n  open,\n  onOpenChange,\n  title,\n  description,\n  confirmText = \"Bekræft\",\n  cancelText = \"Annuller\",\n  onConfirm,\n  isLoading = false,\n  variant = \"default\"\n}: ConfirmationDialogProps) {\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{title}</AlertDialogTitle>\n          <AlertDialogDescription>{description}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isLoading}>\n            {cancelText}\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={onConfirm}\n            disabled={isLoading}\n            className={variant === \"destructive\" ? \"bg-red-600 hover:bg-red-700\" : \"\"}\n          >\n            {isLoading ? \"Behandler...\" : confirmText}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}","size_bytes":1490},"client/src/components/ui/logo.tsx":{"content":"import React from 'react';\n\ninterface LogoProps {\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n  showText?: boolean;\n}\n\nexport function Logo({ className = \"\", size = 'md', showText = true }: LogoProps) {\n  const dimensions = {\n    sm: { width: 120, height: 32, iconSize: 28, fontSize: '18px' },\n    md: { width: 180, height: 48, iconSize: 42, fontSize: '28px' },\n    lg: { width: 240, height: 64, iconSize: 56, fontSize: '36px' }\n  };\n  \n  const { width, height, iconSize, fontSize } = dimensions[size];\n  \n  return (\n    <div className={`flex items-center ${className}`}>\n      <svg\n        width={iconSize}\n        height={iconSize}\n        viewBox=\"0 0 100 100\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"flex-shrink-0\"\n      >\n        {/* Door frame - outer rectangle */}\n        <rect\n          x=\"10\"\n          y=\"10\"\n          width=\"80\"\n          height=\"80\"\n          fill=\"currentColor\"\n          className=\"text-gray-800 dark:text-white\"\n        />\n        \n        {/* Door opening - inner rectangle */}\n        <rect\n          x=\"20\"\n          y=\"20\"\n          width=\"50\"\n          height=\"70\"\n          fill=\"white\"\n          className=\"dark:fill-gray-900\"\n        />\n        \n        {/* Door panel - partially open door */}\n        <path\n          d=\"M20 20 L55 20 L65 30 L65 90 L20 90 Z\"\n          fill=\"currentColor\"\n          className=\"text-gray-600 dark:text-gray-400\"\n        />\n        \n        {/* Door handle */}\n        <circle\n          cx=\"58\"\n          cy=\"55\"\n          r=\"3\"\n          fill=\"white\"\n          className=\"dark:fill-gray-900\"\n        />\n        \n        {/* Door shadow/depth line */}\n        <line\n          x1=\"55\"\n          y1=\"20\"\n          x2=\"65\"\n          y2=\"30\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          className=\"text-gray-400 dark:text-gray-600\"\n        />\n      </svg>\n      \n      {showText && (\n        <span\n          className=\"ml-3 font-bold text-gray-800 dark:text-white tracking-wide\"\n          style={{ fontSize }}\n        >\n          DOORWAY\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport function LogoIcon({ className = \"\", size = 'md' }: { className?: string; size?: 'sm' | 'md' | 'lg' }) {\n  return <Logo className={className} size={size} showText={false} />;\n}","size_bytes":2305},"client/src/components/leases/LeaseDetail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency, formatDate, formatNumber } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { ArrowLeft, Edit, Trash2, Building2, Users, TrendingUp, Calendar, DollarSign, FileText, Calculator, Banknote } from \"lucide-react\";\nimport { LeaseForm } from \"./LeaseForm\";\nimport { LeaseTenantForm } from \"./LeaseTenantForm\";\nimport { toast } from \"@/hooks/use-toast\";\nimport type { Lease, Property, LeaseTenant, Tenant } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ntype LeaseWithProperty = Lease & { property: Property };\ntype LeaseTenantWithTenant = LeaseTenant & { tenant: Tenant };\n\nexport default function LeaseDetail() {\n  const { user } = useAuth();\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [showForm, setShowForm] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [showTenantForm, setShowTenantForm] = useState(false);\n  \n  const canEdit = user?.role === 'admin';\n\n  const { data: lease, isLoading } = useQuery<LeaseWithProperty>({\n    queryKey: [\"/api/leases\", id],\n    enabled: !!id,\n  });\n\n  // Get historical tenants for this lease\n  const { data: tenantHistory = [] } = useQuery<LeaseTenantWithTenant[]>({\n    queryKey: [\"/api/leases\", id, \"tenants\"],\n    enabled: !!id,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(`/api/leases/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leases\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Lejemål slettet\",\n      });\n      setLocation(\"/leases\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Fejl\",\n        description: error.message || \"Der opstod en fejl ved sletning af lejemål\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (!lease) {\n    return (\n      <div className=\"text-center py-8\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">Lejemål ikke fundet</h2>\n        <Button \n          variant=\"outline\" \n          onClick={() => setLocation(\"/leases\")}\n          className=\"mt-4\"\n          data-testid=\"button-back-to-leases\"\n        >\n          <ArrowLeft className=\"mr-2\" size={16} />\n          Tilbage til lejemål\n        </Button>\n      </div>\n    );\n  }\n\n  // Calculate current annual rent (from active contracts)\n  const currentTenants = tenantHistory.filter(t => !t.periodEnd || new Date(t.periodEnd) >= new Date());\n  const currentAnnualRent = currentTenants.reduce((sum, t) => sum + (parseFloat(t.rentAmount) * 12), 0);\n\n  // Calculate potential annual rent (based on max rent per sqm)\n  const potentialAnnualRent = lease.maxRentPerSqm \n    ? parseFloat(lease.maxRentPerSqm) * lease.totalArea \n    : null;\n\n  // Sort tenant history by period start date (newest first)\n  const sortedTenantHistory = [...tenantHistory].sort((a, b) => \n    new Date(b.periodStart).getTime() - new Date(a.periodStart).getTime()\n  );\n\n  const getRegulationTypeLabel = (type: string) => {\n    switch (type) {\n      case \"NPI\": return \"NPI\";\n      case \"NPI_min_1\": return \"NPI min. 1%\";\n      case \"NPI_min_2\": return \"NPI min. 2%\";\n      case \"NPI_min_3\": return \"NPI min. 3%\";\n      case \"none\": return \"Ingen regulering\";\n      default: return type;\n    }\n  };\n\n  const getStatusBadge = (tenant: LeaseTenantWithTenant) => {\n    const now = new Date();\n    const start = new Date(tenant.periodStart);\n    const end = tenant.periodEnd ? new Date(tenant.periodEnd) : null;\n\n    if (start > now) {\n      return <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\">Kommende</Badge>;\n    } else if (!end || end >= now) {\n      return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Aktiv</Badge>;\n    } else {\n      return <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-700\">Tidligere</Badge>;\n    }\n  };\n\n  const getTotalAdvances = (tenant: LeaseTenantWithTenant) => {\n    const advances = [\n      tenant.advanceWater ? parseFloat(tenant.advanceWater) : 0,\n      tenant.advanceHeating ? parseFloat(tenant.advanceHeating) : 0,\n      tenant.advanceElectricity ? parseFloat(tenant.advanceElectricity) : 0,\n      tenant.advanceOther ? parseFloat(tenant.advanceOther) : 0,\n    ];\n    return advances.reduce((sum, advance) => sum + advance, 0);\n  };\n\n  return (\n    <>\n      <div className=\"mb-6\">\n        <Button \n          variant=\"outline\" \n          onClick={() => setLocation(\"/leases\")}\n          className=\"mb-4\"\n          data-testid=\"button-back-to-leases\"\n        >\n          <ArrowLeft className=\"mr-2\" size={16} />\n          Tilbage til lejemål\n        </Button>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-lease-name\">\n              {lease.name}\n            </h1>\n            <p className=\"text-gray-600 mt-1\" data-testid=\"text-property-name\">\n              {lease.property?.name || 'Ukendt ejendom'}\n            </p>\n          </div>\n          {canEdit && (\n            <div className=\"flex space-x-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowForm(true)}\n                data-testid=\"button-edit-lease\"\n              >\n                <Edit className=\"mr-2\" size={16} />\n                Rediger\n              </Button>\n              <Button \n                variant=\"destructive\" \n                onClick={() => setShowDeleteDialog(true)}\n                data-testid=\"button-delete-lease\"\n              >\n                <Trash2 className=\"mr-2\" size={16} />\n                Slet\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {/* Basic Information Card */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Grundoplysninger</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-sm\">\n              <div>\n                <span className=\"font-medium\">Type:</span> {lease.type}\n              </div>\n              <div>\n                <span className=\"font-medium\">Tinglyst areal:</span> {formatNumber(lease.registeredArea)} m²\n              </div>\n              <div>\n                <span className=\"font-medium\">Samlet areal:</span> {formatNumber(lease.totalArea)} m²\n              </div>\n              <div>\n                <span className=\"font-medium\">Momsregistreret:</span> {lease.vatRegistered ? \"Ja\" : \"Nej\"}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Financial Information Card */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Økonomiske oplysninger</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-sm\">\n              <div>\n                <span className=\"font-medium\">Faktisk årlig leje:</span>\n                <div className=\"text-lg font-bold text-green-600\" data-testid=\"text-current-rent\">\n                  {formatCurrency(currentAnnualRent)}\n                </div>\n              </div>\n              {potentialAnnualRent && (\n                <div>\n                  <span className=\"font-medium\">Årligt potentiale:</span>\n                  <div className=\"text-lg font-bold text-blue-600\" data-testid=\"text-potential-rent\">\n                    {formatCurrency(potentialAnnualRent)}\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Yield Requirement Card */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Afkastkrav</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-sm\">\n              {lease.yieldRequirementPct ? (\n                <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"text-yield-requirement\">\n                  {parseFloat(lease.yieldRequirementPct).toFixed(2)}%\n                </div>\n              ) : (\n                <div className=\"text-gray-500\">Ikke angivet</div>\n              )}\n              {lease.maxRentPerSqm && (\n                <div>\n                  <span className=\"font-medium\">Max leje pr. m²:</span>\n                  <div className=\"text-sm\" data-testid=\"text-max-rent-sqm\">\n                    {formatCurrency(parseFloat(lease.maxRentPerSqm))}/m²\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Active Tenants Card */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Aktive lejere</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-active-tenants\">\n              {currentTenants.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {tenantHistory.length} total i historik\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tenant History Table */}\n      <Card className=\"mb-8\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <FileText className=\"h-5 w-5\" />\n            <span>Lejerhistorik</span>\n          </CardTitle>\n          {canEdit && (\n            <Button \n              onClick={() => setShowTenantForm(true)}\n              data-testid=\"button-add-tenant\"\n            >\n              Tilføj lejer\n            </Button>\n          )}\n        </CardHeader>\n        <CardContent>\n          {sortedTenantHistory.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              Ingen lejere registreret endnu\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Lejer</TableHead>\n                    <TableHead>Periode</TableHead>\n                    <TableHead className=\"text-right\">Månedlig leje</TableHead>\n                    <TableHead className=\"text-right\">Leje/m²</TableHead>\n                    <TableHead className=\"text-right\">Aconto forbrug</TableHead>\n                    <TableHead className=\"text-right\">Forudbetalt</TableHead>\n                    <TableHead>Regulering</TableHead>\n                    <TableHead className=\"text-right\">Depositum</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedTenantHistory.map((tenant) => {\n                    const monthlyRent = parseFloat(tenant.rentAmount);\n                    const rentPerSqm = monthlyRent / lease.totalArea;\n                    const totalAdvances = getTotalAdvances(tenant);\n                    const prepaidAmount = tenant.prepaidAmount ? parseFloat(tenant.prepaidAmount) : 0;\n\n                    return (\n                      <TableRow key={tenant.id} data-testid={`row-tenant-${tenant.id}`}>\n                        <TableCell>\n                          {getStatusBadge(tenant)}\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          <div>\n                            <div data-testid={`text-tenant-name-${tenant.id}`}>\n                              {user?.role === 'broker' ? `Lejer ${tenant.tenant.internalNumber}` : tenant.tenant.name}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              #{tenant.tenant.internalNumber}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            <div data-testid={`text-period-start-${tenant.id}`}>\n                              Fra: {formatDate(tenant.periodStart)}\n                            </div>\n                            {tenant.periodEnd && (\n                              <div data-testid={`text-period-end-${tenant.id}`}>\n                                Til: {formatDate(tenant.periodEnd)}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-right font-medium\" data-testid={`text-monthly-rent-${tenant.id}`}>\n                          {formatCurrency(monthlyRent)}\n                        </TableCell>\n                        <TableCell className=\"text-right font-medium\" data-testid={`text-rent-per-sqm-${tenant.id}`}>\n                          {formatCurrency(rentPerSqm * 12)}/m²\n                        </TableCell>\n                        <TableCell className=\"text-right\" data-testid={`text-advances-${tenant.id}`}>\n                          {totalAdvances > 0 ? formatCurrency(totalAdvances) : \"-\"}\n                          {totalAdvances > 0 && (\n                            <div className=\"text-xs text-gray-500\">\n                              {tenant.advanceWater && `V: ${formatCurrency(parseFloat(tenant.advanceWater))}`}\n                              {tenant.advanceHeating && ` H: ${formatCurrency(parseFloat(tenant.advanceHeating))}`}\n                              {tenant.advanceElectricity && ` E: ${formatCurrency(parseFloat(tenant.advanceElectricity))}`}\n                              {tenant.advanceOther && ` Ø: ${formatCurrency(parseFloat(tenant.advanceOther))}`}\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-right\" data-testid={`text-prepaid-${tenant.id}`}>\n                          {prepaidAmount > 0 ? formatCurrency(prepaidAmount) : \"-\"}\n                          {tenant.prepaidType !== \"none\" && tenant.prepaidType !== \"amount\" && prepaidAmount > 0 && (\n                            <div className=\"text-xs text-gray-500\">\n                              ({tenant.prepaidType.replace(\"_\", \" \")})\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell data-testid={`text-regulation-${tenant.id}`}>\n                          {getRegulationTypeLabel(tenant.regulationType)}\n                        </TableCell>\n                        <TableCell className=\"text-right\" data-testid={`text-deposit-${tenant.id}`}>\n                          {tenant.depositAmount \n                            ? formatCurrency(parseFloat(tenant.depositAmount))\n                            : \"-\"\n                          }\n                          {tenant.depositType !== \"none\" && tenant.depositType !== \"amount\" && (\n                            <div className=\"text-xs text-gray-500\">\n                              ({tenant.depositType.replace(\"_\", \" \")})\n                            </div>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Rent Development Statistics */}\n      {sortedTenantHistory.length > 1 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              <span>Lejeudvikling</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {(() => {\n                const rents = sortedTenantHistory.map(t => parseFloat(t.rentAmount)).reverse();\n                const firstRent = rents[0];\n                const lastRent = rents[rents.length - 1];\n                const totalChange = lastRent - firstRent;\n                const percentChange = ((lastRent - firstRent) / firstRent) * 100;\n                const avgRent = rents.reduce((sum, rent) => sum + rent, 0) / rents.length;\n\n                return (\n                  <>\n                    <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"text-sm text-gray-600\">Første registrerede leje</div>\n                      <div className=\"text-xl font-bold text-blue-600\" data-testid=\"text-first-rent\">\n                        {formatCurrency(firstRent)}\n                      </div>\n                    </div>\n                    <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                      <div className=\"text-sm text-gray-600\">Nuværende leje</div>\n                      <div className=\"text-xl font-bold text-green-600\" data-testid=\"text-current-monthly-rent\">\n                        {formatCurrency(lastRent)}\n                      </div>\n                    </div>\n                    <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                      <div className=\"text-sm text-gray-600\">Samlet ændring</div>\n                      <div className={`text-xl font-bold ${totalChange >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"text-rent-change\">\n                        {totalChange >= 0 ? '+' : ''}{formatCurrency(totalChange)}\n                      </div>\n                      <div className={`text-sm ${percentChange >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"text-rent-change-percent\">\n                        ({percentChange >= 0 ? '+' : ''}{percentChange.toFixed(1)}%)\n                      </div>\n                    </div>\n                  </>\n                );\n              })()}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Forms and Dialogs */}\n      {showForm && (\n        <LeaseForm \n          lease={lease} \n          onClose={() => setShowForm(false)} \n        />\n      )}\n\n      {showTenantForm && (\n        <LeaseTenantForm \n          leaseId={lease.id}\n          onSuccess={() => {\n            setShowTenantForm(false);\n            queryClient.invalidateQueries({ queryKey: [\"/api/leases\", id, \"tenants\"] });\n          }}\n          onCancel={() => setShowTenantForm(false)} \n        />\n      )}\n\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Slet lejemål</AlertDialogTitle>\n            <AlertDialogDescription>\n              Er du sikker på, at du vil slette dette lejemål? Denne handling kan ikke fortrydes.\n              Alle tilknyttede lejere og kontrakter vil også blive slettet.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">\n              Annuller\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteMutation.mutate()}\n              disabled={deleteMutation.isPending}\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? \"Sletter...\" : \"Slet\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":20935}}}